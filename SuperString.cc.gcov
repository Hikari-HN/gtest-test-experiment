        -:    0:Source:SuperString.cc
        -:    0:Graph:test.gcno
        -:    0:Data:test.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/*-- imports --*/
        -:    3:
        -:    4:#include "include/SuperString.hh"
        -:    5:// std
        -:    6:#include <algorithm>
        -:    7:#include <cstddef>
        -:    8:#include <iostream>
        -:    9:#include <stdexcept>
        -:   10:
        -:   11:/*-- definitions --*/
        -:   12:
        -:   13://*-- SuperString
function _ZN11SuperStringC2Ev called 14 returned 100% blocks executed 100%
       14:   14:SuperString::SuperString()
       14:   15:        : _sequence(NULL) {
        -:   16:    // nothing go here
       14:   17:}
        -:   18:
function _ZN11SuperStringC2ERKS_ called 131 returned 100% blocks executed 100%
      131:   19:SuperString::SuperString(const SuperString &other) /*copy*/ {
      131:   20:    this->_sequence = other._sequence;
      131:   21:    this->_sequence->refAdd();
call    0 returned 100%
      131:   22:}
        -:   23:
function _ZN11SuperStringC2EPNS_14StringSequenceE called 118 returned 100% blocks executed 100%
      118:   24:SuperString::SuperString(SuperString::StringSequence *sequence)
      118:   25:        : _sequence(sequence) {
      118:   26:    this->_sequence->refAdd();
call    0 returned 100%
      118:   27:}
        -:   28:
function _ZN11SuperStringD2Ev called 263 returned 100% blocks executed 100%
      263:   29:SuperString::~SuperString() {
      263:   30:    if(this->_sequence != NULL && this->_sequence->refRelease() == 0 && this->freeingCost() < this->keepingCost()) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
call    2 returned 100%
branch  3 taken 47% (fallthrough)
branch  4 taken 53%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 44% (fallthrough)
branch 10 taken 56%
      117:   31:        this->_sequence->doDelete();
call    0 returned 100%
        -:   32:    }
      263:   33:}
        -:   34:
function _ZNK11SuperString7isEmptyEv called 33 returned 100% blocks executed 100%
       33:   35:bool SuperString::isEmpty() const {
       33:   36:    return this->length() == 0;
call    0 returned 100%
        -:   37:}
        -:   38:
function _ZNK11SuperString10isNotEmptyEv called 4 returned 100% blocks executed 100%
        4:   39:bool SuperString::isNotEmpty() const {
        4:   40:    return this->length() != 0;
call    0 returned 100%
        -:   41:}
        -:   42:
function _ZNK11SuperString6lengthEv called 162 returned 100% blocks executed 100%
      162:   43:std::size_t SuperString::length() const {
      162:   44:    if(this->_sequence != NULL) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
      154:   45:        return this->_sequence->length();
call    0 returned 100%
        -:   46:    }
        8:   47:    return 0;
        -:   48:}
        -:   49:
function _ZNK11SuperString9compareToERKS_ called 38 returned 100% blocks executed 100%
       38:   50:int SuperString::compareTo(const SuperString &other) const {
       38:   51:    std::size_t thisLength = this->length();
call    0 returned 100%
       38:   52:    std::size_t otherLength = other.length();
call    0 returned 100%
       38:   53:    std::size_t len = (thisLength < otherLength) ? thisLength : otherLength;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
      127:   54:    for(int i = 0; i < len; i++) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
       91:   55:        int thisCodeUnit = this->codeUnitAt(i).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       91:   56:        int otherCodeUnit = other.codeUnitAt(i).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       91:   57:        if(thisCodeUnit < otherCodeUnit) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:   58:            return -1;
        -:   59:        }
       90:   60:        if(thisCodeUnit > otherCodeUnit) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:   61:            return 1;
        -:   62:        }
        -:   63:    }
       36:   64:    if(thisLength < otherLength) return -1;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       35:   65:    if(thisLength > otherLength) return 1;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       34:   66:    return 0;
        -:   67:}
        -:   68:
function _ZNK11SuperString7indexOfES_ called 4 returned 100% blocks executed 80%
        4:   69:SuperString::Result<std::size_t, SuperString::Error> SuperString::indexOf(SuperString other) const {
        4:   70:    if(this->_sequence != NULL) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:   71:        return this->_sequence->indexOf(other);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:   72:    }
        1:   73:    return Result<std::size_t, Error>(Error::NotFound);
call    0 returned 100%
        -:   74:}
        -:   75:
function _ZNK11SuperString11lastIndexOfES_ called 3 returned 100% blocks executed 80%
        3:   76:SuperString::Result<std::size_t, SuperString::Error> SuperString::lastIndexOf(SuperString other) const {
        3:   77:    if(this->_sequence != NULL) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   78:        return this->_sequence->lastIndexOf(other);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:   79:    }
        1:   80:    return Result<std::size_t, Error>(Error::NotFound);
call    0 returned 100%
        -:   81:}
        -:   82:
function _ZNK11SuperString10codeUnitAtEm called 226 returned 100% blocks executed 100%
      226:   83:SuperString::Result<int, SuperString::Error> SuperString::codeUnitAt(std::size_t index) const {
      226:   84:    if(this->_sequence != NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      225:   85:        return this->_sequence->codeUnitAt(index);
call    0 returned 100%
        -:   86:    }
        1:   87:    return Result<int, SuperString::Error>(Error::Unexpected);
call    0 returned 100%
        -:   88:}
        -:   89:
        -:   90:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString9substringEmm called 30 returned 100% blocks executed 100%
       30:   91:SuperString::substring(std::size_t startIndex, std::size_t endIndex) const {
       30:   92:    if(this->_sequence != NULL) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
       27:   93:        return this->_sequence->substring(startIndex, endIndex);
call    0 returned 100%
        -:   94:    }
        3:   95:    return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -:   96:}
        -:   97:
function _ZNK11SuperString6substrEmm called 2 returned 50% blocks executed 88%
        2:   98:SuperString SuperString::substr(std::size_t pos, std::size_t len) const {
        2:   99:    SuperString::Result<SuperString, SuperString::Error> result = this->substring(pos, pos + len);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  100:    if(result.isErr()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  101:        throw std::out_of_range("");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  102:    }
        2:  103:    return result.ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  104:}
call    0 returned 100%
call    1 returned 100%
        -:  105:
function _ZNK11SuperString6substrEm called 2 returned 50% blocks executed 88%
        2:  106:SuperString SuperString::substr(std::size_t pos) const {
        2:  107:    SuperString::Result<SuperString, SuperString::Error> result = this->substring(pos, this->length() - pos);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        2:  108:    if(result.isErr()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  109:        throw std::out_of_range("");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  110:    }
        2:  111:    return result.ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  112:}
call    0 returned 100%
call    1 returned 100%
        -:  113:
function _ZNK11SuperString5printERSo called 13 returned 100% blocks executed 100%
       13:  114:bool SuperString::print(std::ostream &stream) const {
       13:  115:    if(this->_sequence != NULL) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       12:  116:        return this->_sequence->print(stream);
call    0 returned 100%
        -:  117:    }
        1:  118:    return true;
        -:  119:}
        -:  120:
function _ZNK11SuperString5printERSomm called 28 returned 100% blocks executed 100%
       28:  121:bool SuperString::print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const {
       28:  122:    if(this->_sequence != NULL) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
       27:  123:        return this->_sequence->print(stream, startIndex, endIndex);
call    0 returned 100%
        -:  124:    }
        1:  125:    return true;
        -:  126:}
        -:  127:
function _ZNK11SuperString4trimEv called 13 returned 100% blocks executed 100%
       13:  128:SuperString SuperString::trim() const {
       13:  129:    if(this->_sequence != NULL) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       12:  130:        return this->_sequence->trim();
call    0 returned 100%
        -:  131:    }
        1:  132:    return SuperString(); // FIXME: 将原本的空指针解引用导致段错误，修改为返回空对象  by Hikari
call    0 returned 100%
        -:  133:    // return *this;
        -:  134:}
        -:  135:
function _ZNK11SuperString8trimLeftEv called 13 returned 100% blocks executed 100%
       13:  136:SuperString SuperString::trimLeft() const {
       13:  137:    if(this->_sequence != NULL) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       12:  138:        return this->_sequence->trimLeft();
call    0 returned 100%
        -:  139:    }
        1:  140:    return SuperString(); // FIXME: 将原本的空指针解引用导致段错误，修改为返回空对象  by Hikari
call    0 returned 100%
        -:  141:    // return *this;
        -:  142:}
        -:  143:
function _ZNK11SuperString9trimRightEv called 13 returned 100% blocks executed 100%
       13:  144:SuperString SuperString::trimRight() const {
       13:  145:    if(this->_sequence != NULL) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       12:  146:        return this->_sequence->trimRight();
call    0 returned 100%
        -:  147:    }
        1:  148:    return SuperString(); // FIXME: 将原本的空指针解引用导致段错误，修改为返回空对象  by Hikari
call    0 returned 100%
        -:  149:    // return *this;
        -:  150:}
        -:  151:
        -:  152:// TODO: delete this two methods
function _ZNK11SuperString11freeingCostEv called 117 returned 100% blocks executed 100%
      117:  153:std::size_t SuperString::freeingCost() const {
      117:  154:    return this->_sequence->freeingCost();
call    0 returned 100%
        -:  155:}
        -:  156:
function _ZNK11SuperString11keepingCostEv called 117 returned 100% blocks executed 100%
      117:  157:std::size_t SuperString::keepingCost() const {
      117:  158:    return this->_sequence->keepingCost();
call    0 returned 100%
        -:  159:}
        -:  160:
function _ZNK11SuperStringplERKS_ called 1 returned 100% blocks executed 83%
        1:  161:SuperString SuperString::operator+(const SuperString &other) const {
        1:  162:    ConcatenationSequence *sequence = new ConcatenationSequence(this->_sequence, other._sequence);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        1:  163:    return SuperString(sequence);
call    0 returned 100%
        -:  164:}
        -:  165:
function _ZNK11SuperStringmlEm called 1 returned 100% blocks executed 83%
        1:  166:SuperString SuperString::operator*(std::size_t times) const {
        1:  167:    MultipleSequence *sequence = new MultipleSequence(this->_sequence, times);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        1:  168:    return SuperString(sequence);
call    0 returned 100%
        -:  169:}
        -:  170:
function _ZN11SuperStringaSERKS_ called 2 returned 100% blocks executed 100%
        2:  171:SuperString &SuperString::operator=(const SuperString &other) {
        2:  172:    if(this != &other) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  173:        if(this->_sequence->refRelease() == 0) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  174:            this->_sequence->doDelete();
call    0 returned 100%
        -:  175:        }
        1:  176:        this->_sequence = other._sequence;
        1:  177:        this->_sequence->refAdd();
call    0 returned 100%
        -:  178:    }
        2:  179:    return *this;
        -:  180:}
        -:  181:
function _ZNK11SuperStringeqERKS_ called 33 returned 100% blocks executed 100%
       33:  182:bool SuperString::operator==(const SuperString &other) const {
       33:  183:    return this->compareTo(other) == 0;
call    0 returned 100%
        -:  184:}
        -:  185:
function _ZN11SuperString5ConstEPKcNS_8EncodingE called 51 returned 100% blocks executed 70%
       51:  186:SuperString SuperString::Const(const char *chars, SuperString::Encoding encoding) {
       51:  187:    StringSequence *sequence = NULL;
       51:  188:    switch(encoding) {
branch  0 taken 10%
branch  1 taken 76%
branch  2 taken 6%
branch  3 taken 8%
branch  4 taken 0%
        5:  189:        case Encoding::ASCII:
        5:  190:            sequence = new SuperString::ConstASCIISequence((Byte *) chars);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        5:  191:            break;
       39:  192:        case Encoding::UTF8:
       39:  193:            sequence = new SuperString::ConstUTF8Sequence((Byte *) chars);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
       39:  194:            break;
        3:  195:        case Encoding::UTF16BE:
        3:  196:            sequence = new SuperString::ConstUTF16BESequence((Byte *) chars);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        3:  197:            break;
        4:  198:        case Encoding::UTF32:
        4:  199:            sequence = new SuperString::ConstUTF32Sequence((Byte *) chars);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        4:  200:            break;
        -:  201:    }
       51:  202:    return SuperString(sequence);
call    0 returned 100%
        -:  203:}
        -:  204:
function _ZN11SuperString5ConstEPKiNS_8EncodingE called 1 returned 100% blocks executed 100%
        1:  205:SuperString SuperString::Const(const int *bytes, SuperString::Encoding encoding) {
        1:  206:    return SuperString::Const((const char *) bytes, encoding);
call    0 returned 100%
        -:  207:}
        -:  208:
function _ZN11SuperString5ConstEPKhNS_8EncodingE called 9 returned 100% blocks executed 100%
        9:  209:SuperString SuperString::Const(const SuperString::Byte *bytes, SuperString::Encoding encoding) {
        9:  210:    return SuperString::Const((const char *) bytes, encoding);
call    0 returned 100%
        -:  211:}
        -:  212:
function _ZN11SuperString4CopyEPKcNS_8EncodingE called 14 returned 100% blocks executed 70%
       14:  213:SuperString SuperString::Copy(const char *chars, Encoding encoding) {
       14:  214:    StringSequence *sequence = NULL;
       14:  215:    switch(encoding) {
branch  0 taken 14%
branch  1 taken 50%
branch  2 taken 14%
branch  3 taken 21%
branch  4 taken 0%
        2:  216:        case Encoding::ASCII:
        2:  217:            sequence = new SuperString::CopyASCIISequence((Byte *) chars);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        2:  218:            break;
        7:  219:        case Encoding::UTF8:
        7:  220:            sequence = new SuperString::CopyUTF8Sequence((Byte *) chars);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        7:  221:            break;
        2:  222:        case Encoding::UTF16BE:
        2:  223:            sequence = new SuperString::CopyUTF16BESequence((Byte *) chars);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        2:  224:            break;
        3:  225:        case Encoding::UTF32:
        3:  226:            sequence = new SuperString::CopyUTF32Sequence((Byte *) chars);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        3:  227:            break;
        -:  228:    }
       14:  229:    return SuperString(sequence);
call    0 returned 100%
        -:  230:}
        -:  231:
function _ZN11SuperString4CopyEPKiNS_8EncodingE called 1 returned 100% blocks executed 100%
        1:  232:SuperString SuperString::Copy(const int *bytes, SuperString::Encoding encoding) {
        1:  233:    return SuperString::Copy((const char *) bytes, encoding);
call    0 returned 100%
        -:  234:}
        -:  235:
function _ZN11SuperString4CopyEPKhNS_8EncodingE called 4 returned 100% blocks executed 100%
        4:  236:SuperString SuperString::Copy(const SuperString::Byte *bytes, Encoding encoding) {
        4:  237:    return SuperString::Copy((const char *) bytes, encoding);
call    0 returned 100%
        -:  238:}
        -:  239:
        -:  240://*-- SuperString::StringSequence (abstract|internal)
function _ZN11SuperString14StringSequenceC2Ev called 150 returned 100% blocks executed 100%
      150:  241:SuperString::StringSequence::StringSequence()
      150:  242:        : _refCount(0) {
call    0 returned 100%
        -:  243:    // nothing go here
      150:  244:}
        -:  245:
     144*:  246:SuperString::StringSequence::~StringSequence() {
        -:  247:    // nothing go here
     144*:  248:}
------------------
_ZN11SuperString14StringSequenceD0Ev:
function _ZN11SuperString14StringSequenceD0Ev called 0 returned 0% blocks executed 0%
    #####:  246:SuperString::StringSequence::~StringSequence() {
        -:  247:    // nothing go here
    #####:  248:}
call    0 never executed
call    1 never executed
------------------
_ZN11SuperString14StringSequenceD2Ev:
function _ZN11SuperString14StringSequenceD2Ev called 144 returned 100% blocks executed 100%
      144:  246:SuperString::StringSequence::~StringSequence() {
        -:  247:    // nothing go here
      144:  248:}
call    0 returned 100%
------------------
        -:  249:
function _ZNK11SuperString14StringSequence7isEmptyEv called 1 returned 100% blocks executed 100%
        1:  250:bool SuperString::StringSequence::isEmpty() const {
        1:  251:    return this->length() == 0;
call    0 returned 100%
        -:  252:}
        -:  253:
function _ZNK11SuperString14StringSequence10isNotEmptyEv called 1 returned 100% blocks executed 100%
        1:  254:bool SuperString::StringSequence::isNotEmpty() const {
        1:  255:    return this->length() > 0;
call    0 returned 100%
        -:  256:}
        -:  257:
function _ZNK11SuperString14StringSequence7indexOfES_ called 3 returned 100% blocks executed 87%
        3:  258:SuperString::Result<std::size_t, SuperString::Error> SuperString::StringSequence::indexOf(SuperString other) const {
       10:  259:    for(std::size_t i = 0, length = this->length(); i < (length - other.length()); i++) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 90%
branch  3 taken 10% (fallthrough)
        9:  260:        if(this->_substringMatches(i, other)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 22% (fallthrough)
branch  6 taken 78%
call    7 never executed
        2:  261:            return Result<std::size_t, Error>(i);
call    0 returned 100%
        -:  262:        }
        -:  263:    }
        1:  264:    return Result<std::size_t, Error>(Error::NotFound);
call    0 returned 100%
        -:  265:}
        -:  266:
function _ZNK11SuperString14StringSequence11lastIndexOfES_ called 2 returned 100% blocks executed 87%
        2:  267:SuperString::Result<std::size_t, SuperString::Error> SuperString::StringSequence::lastIndexOf(SuperString other) const {
       11:  268:    for(std::size_t i = this->length() - other.length(); i > 0; i--) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 91%
branch  3 taken 9% (fallthrough)
       10:  269:        if(this->_substringMatches(i - 1, other)) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 10% (fallthrough)
branch  6 taken 90%
call    7 never executed
        1:  270:            return Result<std::size_t, Error>(i - 1);
call    0 returned 100%
        -:  271:        }
        -:  272:    }
        1:  273:    return Result<std::size_t, Error>(Error::NotFound);
call    0 returned 100%
        -:  274:}
        -:  275:
function _ZNK11SuperString14StringSequence6refAddEv called 250 returned 100% blocks executed 100%
      250:  276:void SuperString::StringSequence::refAdd() const {
      250:  277:    StringSequence *self = (StringSequence *) (unsigned long) this;
      250:  278:    self->_refCount++;
      250:  279:}
        -:  280:
function _ZNK11SuperString14StringSequence10refReleaseEv called 251 returned 100% blocks executed 100%
      251:  281:std::size_t SuperString::StringSequence::refRelease() const {
      251:  282:    StringSequence *self = (StringSequence *) (unsigned long) this;
      251:  283:    if(self->_refCount == 0) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        1:  284:        return 0;
        -:  285:    }
      250:  286:    return --self->_refCount;
        -:  287:}
        -:  288:
function _ZNK11SuperString14StringSequence8refCountEv called 90 returned 100% blocks executed 100%
       90:  289:std::size_t SuperString::StringSequence::refCount() const {
       90:  290:    return this->_refCount;
        -:  291:}
        -:  292:
function _ZNK11SuperString14StringSequence13addReferencerEPNS_23ReferenceStringSequenceE called 91 returned 100% blocks executed 100%
       91:  293:void SuperString::StringSequence::addReferencer(SuperString::ReferenceStringSequence *sequence) const {
       91:  294:    StringSequence *self = (StringSequence *) (unsigned long) this;
       91:  295:    self->_referencers.push(sequence);
call    0 returned 100%
       91:  296:}
        -:  297:
function _ZNK11SuperString14StringSequence16removeReferencerEPNS_23ReferenceStringSequenceE called 90 returned 100% blocks executed 100%
       90:  298:void SuperString::StringSequence::removeReferencer(SuperString::ReferenceStringSequence *sequence) const {
       90:  299:    StringSequence *self = (StringSequence *) (unsigned long) this;
       90:  300:    self->_referencers.remove(sequence);
call    0 returned 100%
       90:  301:}
        -:  302:
function _ZNK11SuperString14StringSequence11freeingCostEv called 126 returned 100% blocks executed 100%
      126:  303:std::size_t SuperString::StringSequence::freeingCost() const {
      126:  304:    std::size_t cost = 0;
      126:  305:    SingleLinkedList<ReferenceStringSequence *>::Node<ReferenceStringSequence *> *node = this->_referencers._head;
      127:  306:    while(node != NULL) {
branch  0 taken 1%
branch  1 taken 99% (fallthrough)
        1:  307:        cost += node->_data->reconstructionCost(this);
call    0 returned 100%
        1:  308:        node = node->_next;
        -:  309:    }
      126:  310:    return cost;
        -:  311:}
        -:  312:
function _ZN11SuperString14StringSequence22reconstructReferencersEv called 87 returned 100% blocks executed 100%
       87:  313:void SuperString::StringSequence::reconstructReferencers() {
       87:  314:    SingleLinkedList<ReferenceStringSequence *>::Node<ReferenceStringSequence *> *node = this->_referencers._head;
       89:  315:    while(node != NULL) {
branch  0 taken 2%
branch  1 taken 98% (fallthrough)
        2:  316:        node->_data->reconstruct(this);
call    0 returned 100%
        2:  317:        node = node->_next;
        -:  318:    }
       87:  319:}
        -:  320:
function _ZNK11SuperString14StringSequence17_substringMatchesEmS_ called 20 returned 100% blocks executed 91%
       20:  321:bool SuperString::StringSequence::_substringMatches(std::size_t startIndex,
        -:  322:                                                                 SuperString other) const {
       20:  323:    if(other.isEmpty()) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        1:  324:        return true;
        -:  325:    }
       19:  326:    std::size_t length = other.length();
call    0 returned 100%
       19:  327:    if(startIndex + length > this->length()) {
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        1:  328:        return false;
        -:  329:    }
       23:  330:    for(int i = 0; i < length; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       21:  331:        if(this->codeUnitAt(i + startIndex).ok() != other.codeUnitAt(i).ok()) {
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
call    6 returned 100%
call    7 returned 100%
branch  8 taken 76% (fallthrough)
branch  9 taken 24%
call   10 never executed
       16:  332:            return false;
        -:  333:        }
        -:  334:    }
        2:  335:    return true;
        -:  336:}
        -:  337:
        -:  338://*-- SuperString::ReferenceStringSequence (abstract|internal)
      76*:  339:SuperString::ReferenceStringSequence::~ReferenceStringSequence() {
        -:  340:    // nothing go here
      76*:  341:}
------------------
_ZN11SuperString23ReferenceStringSequenceD0Ev:
function _ZN11SuperString23ReferenceStringSequenceD0Ev called 0 returned 0% blocks executed 0%
    #####:  339:SuperString::ReferenceStringSequence::~ReferenceStringSequence() {
        -:  340:    // nothing go here
    #####:  341:}
call    0 never executed
call    1 never executed
------------------
_ZN11SuperString23ReferenceStringSequenceD2Ev:
function _ZN11SuperString23ReferenceStringSequenceD2Ev called 76 returned 100% blocks executed 100%
       76:  339:SuperString::ReferenceStringSequence::~ReferenceStringSequence() {
        -:  340:    // nothing go here
       76:  341:}
call    0 returned 100%
------------------
        -:  342:
        -:  343://*-- SuperString::ConstASCIISequence (internal)
function _ZN11SuperString18ConstASCIISequenceC2EPKh called 6 returned 100% blocks executed 100%
        6:  344:SuperString::ConstASCIISequence::ConstASCIISequence(const Byte *bytes)
        6:  345:        : _bytes(bytes),
        6:  346:          _status(SuperString::ConstASCIISequence::Status::LengthNotComputed) {
call    0 returned 100%
        -:  347:    // nothing go here
        6:  348:}
        -:  349:
       10:  350:SuperString::ConstASCIISequence::~ConstASCIISequence() {
        5:  351:    this->reconstructReferencers();
       10:  352:}
------------------
_ZN11SuperString18ConstASCIISequenceD0Ev:
function _ZN11SuperString18ConstASCIISequenceD0Ev called 5 returned 100% blocks executed 100%
        5:  350:SuperString::ConstASCIISequence::~ConstASCIISequence() {
        -:  351:    this->reconstructReferencers();
        5:  352:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString18ConstASCIISequenceD2Ev:
function _ZN11SuperString18ConstASCIISequenceD2Ev called 5 returned 100% blocks executed 100%
        5:  350:SuperString::ConstASCIISequence::~ConstASCIISequence() {
        5:  351:    this->reconstructReferencers();
call    0 returned 100%
        5:  352:}
call    0 returned 100%
------------------
        -:  353:
function _ZNK11SuperString18ConstASCIISequence6lengthEv called 28 returned 100% blocks executed 100%
       28:  354:std::size_t SuperString::ConstASCIISequence::length() const /*override*/ {
       28:  355:    if(this->_status == Status::LengthNotComputed) {
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        5:  356:        ConstASCIISequence *self = ((ConstASCIISequence *) ((std::size_t) this)); // to keep this method `const`
        5:  357:        self->_status = Status::LengthComputed;
        5:  358:        self->_length = SuperString::ASCII::length(this->_bytes);
call    0 returned 100%
        -:  359:    }
       28:  360:    return this->_length;
        -:  361:}
        -:  362:
        -:  363:SuperString::Result<int, SuperString::Error>
function _ZNK11SuperString18ConstASCIISequence10codeUnitAtEm called 5 returned 100% blocks executed 100%
        5:  364:SuperString::ConstASCIISequence::codeUnitAt(std::size_t index) const {
        5:  365:    if(index < this->length()) {
call    0 returned 100%
branch  1 taken 80% (fallthrough)
branch  2 taken 20%
        4:  366:        return Result<int, SuperString::Error>(SuperString::ASCII::codeUnitAt(this->_bytes, index));
call    0 returned 100%
call    1 returned 100%
        -:  367:    }
        1:  368:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -:  369:}
        -:  370:
        -:  371:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString18ConstASCIISequence9substringEmm called 6 returned 100% blocks executed 81%
        6:  372:SuperString::ConstASCIISequence::substring(std::size_t startIndex,
        -:  373:                                           std::size_t endIndex) const {
        -:  374:    // TODO: General code, specify + repeated * times
        6:  375:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        2:  376:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -:  377:    }
        4:  378:    SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        8:  379:    return Result<SuperString, Error>(SuperString(sequence));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  380:}
        -:  381:
function _ZNK11SuperString18ConstASCIISequence5printERSo called 1 returned 100% blocks executed 100%
        1:  382:bool SuperString::ConstASCIISequence::print(std::ostream &stream) const {
        1:  383:    SuperString::ASCII::print(stream, this->_bytes);
call    0 returned 100%
        1:  384:    return true;
        -:  385:}
        -:  386:
function _ZNK11SuperString18ConstASCIISequence5printERSomm called 3 returned 100% blocks executed 100%
        3:  387:bool SuperString::ConstASCIISequence::print(std::ostream &stream, std::size_t startIndex,
        -:  388:                                                         std::size_t endIndex) const {
        3:  389:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
        2:  390:        return false;
        -:  391:    }
        1:  392:    SuperString::ASCII::print(stream, this->_bytes, startIndex, endIndex);
call    0 returned 100%
        1:  393:    return true;
        -:  394:}
        -:  395:
function _ZNK11SuperString18ConstASCIISequence4trimEv called 1 returned 100% blocks executed 77%
        1:  396:SuperString SuperString::ConstASCIISequence::trim() const {
        1:  397:    Pair<std::size_t, std::size_t> indexes = SuperString::ASCII::trim(this->_bytes, this->_length);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  398:    return this->substring(indexes.first(), indexes.second()).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
        -:  399:}
        -:  400:
function _ZNK11SuperString18ConstASCIISequence8trimLeftEv called 1 returned 100% blocks executed 82%
        1:  401:SuperString SuperString::ConstASCIISequence::trimLeft() const {
        2:  402:    return this->substring(SuperString::ASCII::trimLeft(this->_bytes), this->length()).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  403:}
        -:  404:
function _ZNK11SuperString18ConstASCIISequence9trimRightEv called 1 returned 100% blocks executed 82%
        1:  405:SuperString SuperString::ConstASCIISequence::trimRight() const {
        2:  406:    return this->substring(0, SuperString::ASCII::trimRight(this->_bytes, this->length())).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  407:}
        -:  408:
function _ZNK11SuperString18ConstASCIISequence11keepingCostEv called 9 returned 100% blocks executed 100%
        9:  409:std::size_t SuperString::ConstASCIISequence::keepingCost() const {
        9:  410:    return sizeof(ConstASCIISequence);
        -:  411:}
        -:  412:
function _ZNK11SuperString18ConstASCIISequence8doDeleteEv called 5 returned 100% blocks executed 100%
        5:  413:void SuperString::ConstASCIISequence::doDelete() const {
        5:  414:    ConstASCIISequence *self = ((ConstASCIISequence *) (std::size_t) this);
        5:  415:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        5:  416:        self->_status = Status::ToBeDestructed; // Just a trick, we don't want any more variable
        5:  417:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  418:    }
        5:  419:}
        -:  420:
function _ZNK11SuperString18ConstASCIISequence13isToBeDeletedEv called 5 returned 100% blocks executed 100%
        5:  421:bool SuperString::ConstASCIISequence::isToBeDeleted() const {
        5:  422:    return this->_status == Status::ToBeDestructed;
        -:  423:}
        -:  424:
        -:  425://*-- SuperString::CopyASCIISequence (internal)
function _ZN11SuperString17CopyASCIISequenceC2EPKh called 2 returned 100% blocks executed 86%
        2:  426:SuperString::CopyASCIISequence::CopyASCIISequence(const SuperString::Byte *bytes) {
call    0 returned 100%
        2:  427:    this->_length = SuperString::ASCII::length(bytes);
call    0 returned 100%
        2:  428:    this->_data = new Byte[this->_length + 1];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  429:    std::copy_n(bytes, this->_length + 1, this->_data);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  430:}
call    0 never executed
        -:  431:
function _ZN11SuperString17CopyASCIISequenceC2EPKNS_18ConstASCIISequenceE called 1 returned 100% blocks executed 86%
        1:  432:SuperString::CopyASCIISequence::CopyASCIISequence(const SuperString::ConstASCIISequence *sequence) {
call    0 returned 100%
        1:  433:    this->_length = sequence->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  434:    this->_data = new Byte[this->_length + 1];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  435:    std::copy_n(sequence->_bytes, this->_length + 1, this->_data);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  436:}
call    0 never executed
        -:  437:
        5:  438:SuperString::CopyASCIISequence::~CopyASCIISequence() {
        3:  439:    this->reconstructReferencers();
        3:  440:    delete this->_data;
        5:  441:}
------------------
_ZN11SuperString17CopyASCIISequenceD0Ev:
function _ZN11SuperString17CopyASCIISequenceD0Ev called 2 returned 100% blocks executed 100%
        2:  438:SuperString::CopyASCIISequence::~CopyASCIISequence() {
        -:  439:    this->reconstructReferencers();
        -:  440:    delete this->_data;
        2:  441:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString17CopyASCIISequenceD2Ev:
function _ZN11SuperString17CopyASCIISequenceD2Ev called 3 returned 100% blocks executed 100%
        3:  438:SuperString::CopyASCIISequence::~CopyASCIISequence() {
        3:  439:    this->reconstructReferencers();
call    0 returned 100%
        3:  440:    delete this->_data;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        3:  441:}
call    0 returned 100%
------------------
        -:  442:
function _ZNK11SuperString17CopyASCIISequence6lengthEv called 49 returned 100% blocks executed 100%
       49:  443:std::size_t SuperString::CopyASCIISequence::length() const {
       49:  444:    return this->_length;
        -:  445:}
        -:  446:
function _ZNK11SuperString17CopyASCIISequence10codeUnitAtEm called 21 returned 100% blocks executed 100%
       21:  447:SuperString::Result<int, SuperString::Error> SuperString::CopyASCIISequence::codeUnitAt(
        -:  448:        std::size_t index) const {
       21:  449:    if(index < this->length()) {
call    0 returned 100%
branch  1 taken 95% (fallthrough)
branch  2 taken 5%
       20:  450:        return Result<int, SuperString::Error>(SuperString::ASCII::codeUnitAt(this->_data, index));
call    0 returned 100%
call    1 returned 100%
        -:  451:    }
        1:  452:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -:  453:}
        -:  454:
        -:  455:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString17CopyASCIISequence9substringEmm called 6 returned 100% blocks executed 81%
        6:  456:SuperString::CopyASCIISequence::substring(std::size_t startIndex,
        -:  457:                                          std::size_t endIndex) const {
        -:  458:    // TODO: General code, specify + repeated * times
        6:  459:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        2:  460:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -:  461:    }
        4:  462:    SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        8:  463:    return Result<SuperString, Error>(SuperString(sequence));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  464:}
        -:  465:
function _ZNK11SuperString17CopyASCIISequence5printERSo called 1 returned 100% blocks executed 100%
        1:  466:bool SuperString::CopyASCIISequence::print(std::ostream &stream) const {
        1:  467:    SuperString::ASCII::print(stream, this->_data);
call    0 returned 100%
        1:  468:    return true;
        -:  469:}
        -:  470:
function _ZNK11SuperString17CopyASCIISequence5printERSomm called 3 returned 100% blocks executed 100%
        3:  471:bool SuperString::CopyASCIISequence::print(std::ostream &stream, std::size_t startIndex,
        -:  472:                                                        std::size_t endIndex) const {
        3:  473:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
        2:  474:        return false;
        -:  475:    }
        1:  476:    SuperString::ASCII::print(stream, this->_data, startIndex, endIndex);
call    0 returned 100%
        1:  477:    return true;
        -:  478:}
        -:  479:
function _ZNK11SuperString17CopyASCIISequence4trimEv called 1 returned 100% blocks executed 77%
        1:  480:SuperString SuperString::CopyASCIISequence::trim() const {
        1:  481:    Pair<std::size_t, std::size_t> indexes = SuperString::ASCII::trim(this->_data, this->_length);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  482:    return this->substring(indexes.first(), indexes.second()).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
        -:  483:}
        -:  484:
function _ZNK11SuperString17CopyASCIISequence8trimLeftEv called 1 returned 100% blocks executed 82%
        1:  485:SuperString SuperString::CopyASCIISequence::trimLeft() const {
        2:  486:    return this->substring(SuperString::ASCII::trimLeft(this->_data), this->length()).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  487:}
        -:  488:
function _ZNK11SuperString17CopyASCIISequence9trimRightEv called 1 returned 100% blocks executed 82%
        1:  489:SuperString SuperString::CopyASCIISequence::trimRight() const {
        2:  490:    return this->substring(0, SuperString::ASCII::trimRight(this->_data, this->length())).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  491:}
        -:  492:
function _ZNK11SuperString17CopyASCIISequence11keepingCostEv called 6 returned 100% blocks executed 100%
        6:  493:std::size_t SuperString::CopyASCIISequence::keepingCost() const {
        6:  494:    std::size_t cost = sizeof(CopyASCIISequence);
        6:  495:    if(this->_data != NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  496:        cost += this->length() + 1;
call    0 returned 100%
        -:  497:    }
        6:  498:    return cost;
        -:  499:}
        -:  500:
function _ZNK11SuperString17CopyASCIISequence8doDeleteEv called 2 returned 100% blocks executed 100%
        2:  501:void SuperString::CopyASCIISequence::doDelete() const {
        2:  502:    CopyASCIISequence *self = ((CopyASCIISequence *) (std::size_t) this);
        2:  503:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  504:        self->_length = 0; // Just a trick, we don't want any more variable
        2:  505:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  506:    }
        2:  507:}
        -:  508:
function _ZNK11SuperString17CopyASCIISequence13isToBeDeletedEv called 2 returned 100% blocks executed 100%
        2:  509:bool SuperString::CopyASCIISequence::isToBeDeleted() const {
        2:  510:    return this->_length == 0;
        -:  511:}
        -:  512:
        -:  513://*-- SuperString::ConstUTF8Sequence (internal)
function _ZN11SuperString17ConstUTF8SequenceC2EPKh called 40 returned 100% blocks executed 100%
       40:  514:SuperString::ConstUTF8Sequence::ConstUTF8Sequence(const Byte *bytes)
       40:  515:        : _bytes(bytes),
       40:  516:          _status(SuperString::ConstUTF8Sequence::Status::LengthNotComputed) {
call    0 returned 100%
        -:  517:    // nothing go here
       40:  518:}
        -:  519:
       78:  520:SuperString::ConstUTF8Sequence::~ConstUTF8Sequence() {
       39:  521:    this->reconstructReferencers();
       78:  522:}
------------------
_ZN11SuperString17ConstUTF8SequenceD0Ev:
function _ZN11SuperString17ConstUTF8SequenceD0Ev called 39 returned 100% blocks executed 100%
       39:  520:SuperString::ConstUTF8Sequence::~ConstUTF8Sequence() {
        -:  521:    this->reconstructReferencers();
       39:  522:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString17ConstUTF8SequenceD2Ev:
function _ZN11SuperString17ConstUTF8SequenceD2Ev called 39 returned 100% blocks executed 100%
       39:  520:SuperString::ConstUTF8Sequence::~ConstUTF8Sequence() {
       39:  521:    this->reconstructReferencers();
call    0 returned 100%
       39:  522:}
call    0 returned 100%
------------------
        -:  523:
function _ZNK11SuperString17ConstUTF8Sequence6lengthEv called 510 returned 100% blocks executed 100%
      510:  524:std::size_t SuperString::ConstUTF8Sequence::length() const /*override*/ {
      510:  525:    if(this->_status == Status::LengthNotComputed) {
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       35:  526:        ConstUTF8Sequence *self = ((ConstUTF8Sequence *) ((std::size_t) this)); // to keep this method `const`
       35:  527:        self->_status = Status::LengthComputed;
       35:  528:        self->_length = SuperString::UTF8::length(this->_bytes);
call    0 returned 100%
        -:  529:    }
      510:  530:    return this->_length;
        -:  531:}
        -:  532:
function _ZNK11SuperString17ConstUTF8Sequence10codeUnitAtEm called 298 returned 100% blocks executed 100%
      298:  533:SuperString::Result<int, SuperString::Error> SuperString::ConstUTF8Sequence::codeUnitAt(std::size_t index) const {
      298:  534:    return SuperString::UTF8::codeUnitAt(this->_bytes, index);
call    0 returned 100%
        -:  535:}
        -:  536:
        -:  537:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString17ConstUTF8Sequence9substringEmm called 21 returned 100% blocks executed 76%
       21:  538:SuperString::ConstUTF8Sequence::substring(std::size_t startIndex,
        -:  539:                                          std::size_t endIndex) const {
        -:  540:    // TODO: General code, specify + repeated * times
       21:  541:    std::size_t length = this->length();
call    0 returned 100%
       21:  542:    if(length < startIndex || length < endIndex) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        2:  543:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -:  544:    }
       19:  545:    SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
       38:  546:    return Result<SuperString, Error>(SuperString(sequence));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  547:}
        -:  548:
function _ZNK11SuperString17ConstUTF8Sequence5printERSo called 17 returned 100% blocks executed 100%
       17:  549:bool SuperString::ConstUTF8Sequence::print(std::ostream &stream) const {
       17:  550:    SuperString::UTF8::print(stream, this->_bytes);
call    0 returned 100%
       17:  551:    return true;
        -:  552:}
        -:  553:
function _ZNK11SuperString17ConstUTF8Sequence5printERSomm called 25 returned 100% blocks executed 100%
       25:  554:bool SuperString::ConstUTF8Sequence::print(std::ostream &stream, std::size_t startIndex,
        -:  555:                                                        std::size_t endIndex) const {
       25:  556:    std::size_t length = this->length();
call    0 returned 100%
       25:  557:    if(length < startIndex || length < endIndex) {
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
        7:  558:        return false;
        -:  559:    }
       18:  560:    SuperString::UTF8::print(stream, this->_bytes, startIndex, endIndex);
call    0 returned 100%
       18:  561:    return true;
        -:  562:}
        -:  563:
function _ZNK11SuperString17ConstUTF8Sequence4trimEv called 5 returned 100% blocks executed 74%
        5:  564:SuperString SuperString::ConstUTF8Sequence::trim() const {
        -:  565:    // TODO: General code, specify
        5:  566:    std::size_t startIndex = 0;
        5:  567:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  568:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  569:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 29% (fallthrough)
branch  6 taken 71%
branch  7 taken 29%
branch  8 taken 71% (fallthrough)
        2:  570:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  571:    }
        5:  572:    result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        7:  573:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 29% (fallthrough)
branch  6 taken 71%
branch  7 taken 29%
branch  8 taken 71% (fallthrough)
        2:  574:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  575:    }
       15:  576:    return this->substring(startIndex, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        5:  577:}
call    0 returned 100%
call    1 never executed
        -:  578:
function _ZNK11SuperString17ConstUTF8Sequence8trimLeftEv called 5 returned 100% blocks executed 74%
        5:  579:SuperString SuperString::ConstUTF8Sequence::trimLeft() const {
        -:  580:    // TODO: General code, specify
        5:  581:    std::size_t startIndex = 0;
        5:  582:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  583:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 29% (fallthrough)
branch  6 taken 71%
branch  7 taken 29%
branch  8 taken 71% (fallthrough)
        2:  584:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  585:    }
       15:  586:    return this->substring(startIndex, this->length()).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        5:  587:}
call    0 returned 100%
call    1 never executed
        -:  588:
function _ZNK11SuperString17ConstUTF8Sequence9trimRightEv called 5 returned 100% blocks executed 74%
        5:  589:SuperString SuperString::ConstUTF8Sequence::trimRight() const {
        -:  590:    // TODO: General code, specify
        5:  591:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:  592:    Result<int, Error> result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  593:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 29% (fallthrough)
branch  6 taken 71%
branch  7 taken 29%
branch  8 taken 71% (fallthrough)
        2:  594:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  595:    }
       15:  596:    return this->substring(0, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        5:  597:}
call    0 returned 100%
call    1 never executed
        -:  598:
function _ZNK11SuperString17ConstUTF8Sequence11keepingCostEv called 83 returned 100% blocks executed 100%
       83:  599:std::size_t SuperString::ConstUTF8Sequence::keepingCost() const {
       83:  600:    return sizeof(ConstUTF8Sequence);
        -:  601:}
        -:  602:
function _ZNK11SuperString17ConstUTF8Sequence8doDeleteEv called 39 returned 100% blocks executed 100%
       39:  603:void SuperString::ConstUTF8Sequence::doDelete() const {
       39:  604:    ConstUTF8Sequence *self = ((ConstUTF8Sequence *) (std::size_t) this);
       39:  605:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       39:  606:        self->_status = Status::ToBeDestructed; // Just a trick, we don't want any more variable
       39:  607:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  608:    }
       39:  609:}
        -:  610:
function _ZNK11SuperString17ConstUTF8Sequence13isToBeDeletedEv called 39 returned 100% blocks executed 100%
       39:  611:bool SuperString::ConstUTF8Sequence::isToBeDeleted() const {
       39:  612:    return this->_status == Status::ToBeDestructed;
        -:  613:}
        -:  614:
        -:  615://*-- SuperString::CopyUTF8Sequence (internal)
function _ZN11SuperString16CopyUTF8SequenceC2EPKh called 7 returned 100% blocks executed 80%
        7:  616:SuperString::CopyUTF8Sequence::CopyUTF8Sequence(const SuperString::Byte *bytes) {
call    0 returned 100%
        7:  617:    Pair<std::size_t, std::size_t> lengthAndMemoryLength = SuperString::UTF8::lengthAndMemoryLength(bytes);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  618:    this->_length = lengthAndMemoryLength.first();
call    0 returned 100%
        7:  619:    this->_memoryLength = lengthAndMemoryLength.second();
call    0 returned 100%
        7:  620:    this->_data = new Byte[this->_memoryLength];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  621:    std::copy_n(bytes, this->_memoryLength, this->_data);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        7:  622:}
call    0 never executed
        -:  623:
function _ZN11SuperString16CopyUTF8SequenceC2EPKNS_17ConstUTF8SequenceE called 1 returned 100% blocks executed 80%
        1:  624:SuperString::CopyUTF8Sequence::CopyUTF8Sequence(const SuperString::ConstUTF8Sequence *sequence) {
call    0 returned 100%
        1:  625:    Pair<std::size_t, std::size_t> lengthAndMemoryLength = SuperString::UTF8::lengthAndMemoryLength(sequence->_bytes);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  626:    this->_length = lengthAndMemoryLength.first();
call    0 returned 100%
        1:  627:    this->_memoryLength = lengthAndMemoryLength.second();
call    0 returned 100%
        1:  628:    this->_data = new Byte[this->_memoryLength];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  629:    std::copy_n(sequence->_bytes, this->_memoryLength, this->_data);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  630:}
call    0 never executed
        -:  631:
       13:  632:SuperString::CopyUTF8Sequence::~CopyUTF8Sequence() {
        7:  633:    this->reconstructReferencers();
        7:  634:    delete this->_data;
       13:  635:}
------------------
_ZN11SuperString16CopyUTF8SequenceD0Ev:
function _ZN11SuperString16CopyUTF8SequenceD0Ev called 6 returned 100% blocks executed 100%
        6:  632:SuperString::CopyUTF8Sequence::~CopyUTF8Sequence() {
        -:  633:    this->reconstructReferencers();
        -:  634:    delete this->_data;
        6:  635:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString16CopyUTF8SequenceD2Ev:
function _ZN11SuperString16CopyUTF8SequenceD2Ev called 7 returned 100% blocks executed 100%
        7:  632:SuperString::CopyUTF8Sequence::~CopyUTF8Sequence() {
        7:  633:    this->reconstructReferencers();
call    0 returned 100%
        7:  634:    delete this->_data;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        7:  635:}
call    0 returned 100%
------------------
        -:  636:
function _ZNK11SuperString16CopyUTF8Sequence6lengthEv called 50 returned 100% blocks executed 100%
       50:  637:std::size_t SuperString::CopyUTF8Sequence::length() const {
       50:  638:    return this->_length;
        -:  639:}
        -:  640:
function _ZNK11SuperString16CopyUTF8Sequence10codeUnitAtEm called 29 returned 100% blocks executed 100%
       29:  641:SuperString::Result<int, SuperString::Error> SuperString::CopyUTF8Sequence::codeUnitAt(std::size_t index) const {
       29:  642:    if(index < this->length()) {
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
       28:  643:        return Result<int, Error>(SuperString::UTF8::codeUnitAt(this->_data, index));
call    0 returned 100%
        -:  644:    }
        1:  645:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -:  646:}
        -:  647:
        -:  648:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString16CopyUTF8Sequence9substringEmm called 6 returned 100% blocks executed 81%
        6:  649:SuperString::CopyUTF8Sequence::substring(std::size_t startIndex, std::size_t endIndex) const {
        -:  650:    // TODO: General code, specify + repeated * times
        6:  651:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        2:  652:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -:  653:    }
        4:  654:    SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        8:  655:    return Result<SuperString, Error>(SuperString(sequence));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  656:}
        -:  657:
function _ZNK11SuperString16CopyUTF8Sequence5printERSo called 1 returned 100% blocks executed 100%
        1:  658:bool SuperString::CopyUTF8Sequence::print(std::ostream &stream) const {
        1:  659:    SuperString::UTF8::print(stream, this->_data);
call    0 returned 100%
        1:  660:    return true;
        -:  661:}
        -:  662:
function _ZNK11SuperString16CopyUTF8Sequence5printERSomm called 3 returned 100% blocks executed 100%
        3:  663:bool SuperString::CopyUTF8Sequence::print(std::ostream &stream, std::size_t startIndex,
        -:  664:                                                       std::size_t endIndex) const {
        3:  665:    std::size_t length = this->length();
call    0 returned 100%
        3:  666:    if(length < startIndex || length < endIndex) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2:  667:        return false;
        -:  668:    }
        1:  669:    SuperString::UTF8::print(stream, this->_data, startIndex, endIndex);
call    0 returned 100%
        1:  670:    return true;
        -:  671:}
        -:  672:
function _ZNK11SuperString16CopyUTF8Sequence4trimEv called 1 returned 100% blocks executed 74%
        1:  673:SuperString SuperString::CopyUTF8Sequence::trim() const {
        -:  674:    // TODO: General code, specify
        1:  675:    std::size_t startIndex = 0;
        1:  676:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  677:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  678:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  679:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  680:    }
        1:  681:    result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  682:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  683:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  684:    }
        3:  685:    return this->substring(startIndex, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  686:}
call    0 returned 100%
call    1 never executed
        -:  687:
function _ZNK11SuperString16CopyUTF8Sequence8trimLeftEv called 1 returned 100% blocks executed 74%
        1:  688:SuperString SuperString::CopyUTF8Sequence::trimLeft() const {
        -:  689:    // TODO: General code, specify
        1:  690:    std::size_t startIndex = 0;
        1:  691:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  692:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  693:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  694:    }
        3:  695:    return this->substring(startIndex, this->length()).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        1:  696:}
call    0 returned 100%
call    1 never executed
        -:  697:
function _ZNK11SuperString16CopyUTF8Sequence9trimRightEv called 1 returned 100% blocks executed 74%
        1:  698:SuperString SuperString::CopyUTF8Sequence::trimRight() const {
        -:  699:    // TODO: General code, specify
        1:  700:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  701:    Result<int, Error> result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  702:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  703:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  704:    }
        3:  705:    return this->substring(0, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  706:}
call    0 returned 100%
call    1 never executed
        -:  707:
function _ZNK11SuperString16CopyUTF8Sequence11keepingCostEv called 11 returned 100% blocks executed 100%
       11:  708:std::size_t SuperString::CopyUTF8Sequence::keepingCost() const {
       11:  709:    std::size_t cost = sizeof(CopyUTF8Sequence) + this->_memoryLength;
       11:  710:    return cost;
        -:  711:}
        -:  712:
function _ZNK11SuperString16CopyUTF8Sequence8doDeleteEv called 7 returned 100% blocks executed 100%
        7:  713:void SuperString::CopyUTF8Sequence::doDelete() const {
        7:  714:    CopyUTF8Sequence *self = ((CopyUTF8Sequence *) (std::size_t) this);
        7:  715:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
        6:  716:        self->_length = 0; // Just a trick, we don't want any more variable
        6:  717:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  718:    }
        7:  719:}
        -:  720:
function _ZNK11SuperString16CopyUTF8Sequence13isToBeDeletedEv called 7 returned 100% blocks executed 100%
        7:  721:bool SuperString::CopyUTF8Sequence::isToBeDeleted() const {
        7:  722:    return this->_length == 0;
        -:  723:}
        -:  724:
        -:  725://*-- ConstUTF16BESequence (internal)
function _ZN11SuperString20ConstUTF16BESequenceC2EPKh called 4 returned 100% blocks executed 100%
        4:  726:SuperString::ConstUTF16BESequence::ConstUTF16BESequence(const SuperString::Byte *bytes)
        4:  727:        : _bytes(bytes),
        4:  728:          _status(SuperString::ConstUTF16BESequence::Status::LengthNotComputed) {
call    0 returned 100%
        -:  729:    // nothing go here
        4:  730:}
        -:  731:
        6:  732:SuperString::ConstUTF16BESequence::~ConstUTF16BESequence() {
        3:  733:    this->reconstructReferencers();
        6:  734:}
------------------
_ZN11SuperString20ConstUTF16BESequenceD0Ev:
function _ZN11SuperString20ConstUTF16BESequenceD0Ev called 3 returned 100% blocks executed 100%
        3:  732:SuperString::ConstUTF16BESequence::~ConstUTF16BESequence() {
        -:  733:    this->reconstructReferencers();
        3:  734:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString20ConstUTF16BESequenceD2Ev:
function _ZN11SuperString20ConstUTF16BESequenceD2Ev called 3 returned 100% blocks executed 100%
        3:  732:SuperString::ConstUTF16BESequence::~ConstUTF16BESequence() {
        3:  733:    this->reconstructReferencers();
call    0 returned 100%
        3:  734:}
call    0 returned 100%
------------------
        -:  735:
function _ZNK11SuperString20ConstUTF16BESequence6lengthEv called 45 returned 100% blocks executed 100%
       45:  736:std::size_t SuperString::ConstUTF16BESequence::length() const /*override*/ {
       45:  737:    if(this->_status == Status::LengthNotComputed) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        2:  738:        ConstUTF16BESequence *self = ((ConstUTF16BESequence *) ((std::size_t) this)); // to keep this method `const`
        2:  739:        self->_status = Status::LengthComputed;
        2:  740:        self->_length = SuperString::UTF16BE::length(this->_bytes);
call    0 returned 100%
        -:  741:    }
       45:  742:    return this->_length;
        -:  743:}
        -:  744:
function _ZNK11SuperString20ConstUTF16BESequence10codeUnitAtEm called 12 returned 100% blocks executed 100%
       12:  745:SuperString::Result<int, SuperString::Error> SuperString::ConstUTF16BESequence::codeUnitAt(
        -:  746:        std::size_t index) const {
       12:  747:    std::cout<<"index: "<<index<<"length: "<<this->length()<<std::endl;
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
       12:  748:    if(index < this->length()) {
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
       11:  749:        return SuperString::UTF16BE::codeUnitAt(this->_bytes, index);
call    0 returned 100%
        -:  750:    }
        1:  751:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -:  752:}
        -:  753:
        -:  754:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString20ConstUTF16BESequence9substringEmm called 6 returned 100% blocks executed 81%
        6:  755:SuperString::ConstUTF16BESequence::substring(std::size_t startIndex,
        -:  756:                                             std::size_t endIndex) const {
        -:  757:    // TODO: General code, specify + repeated * times
        6:  758:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        2:  759:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -:  760:    }
        4:  761:    SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        8:  762:    return Result<SuperString, Error>(SuperString(sequence));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  763:}
        -:  764:
function _ZNK11SuperString20ConstUTF16BESequence5printERSo called 2 returned 100% blocks executed 100%
        2:  765:bool SuperString::ConstUTF16BESequence::print(std::ostream &stream) const {
        2:  766:    SuperString::UTF16BE::print(stream, this->_bytes, this->length());
call    0 returned 100%
call    1 returned 100%
        2:  767:    return true;
        -:  768:}
        -:  769:
function _ZNK11SuperString20ConstUTF16BESequence5printERSomm called 3 returned 100% blocks executed 100%
        3:  770:bool SuperString::ConstUTF16BESequence::print(std::ostream &stream, std::size_t startIndex,
        -:  771:                                                           std::size_t endIndex) const {
        3:  772:    std::size_t length = this->length();
call    0 returned 100%
        3:  773:    if(length < startIndex || length < endIndex) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:  774:        return false;
        -:  775:    }
        2:  776:    SuperString::UTF16BE::print(stream, this->_bytes, startIndex, endIndex);
call    0 returned 100%
        2:  777:    return true;
        -:  778:}
        -:  779:
function _ZNK11SuperString20ConstUTF16BESequence4trimEv called 1 returned 100% blocks executed 74%
        1:  780:SuperString SuperString::ConstUTF16BESequence::trim() const {
        -:  781:    // TODO: General code, specify
        1:  782:    std::size_t startIndex = 0;
        1:  783:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  784:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  785:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  786:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  787:    }
        1:  788:    result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  789:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  790:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  791:    }
        3:  792:    return this->substring(startIndex, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  793:}
call    0 returned 100%
call    1 never executed
        -:  794:
function _ZNK11SuperString20ConstUTF16BESequence8trimLeftEv called 1 returned 100% blocks executed 74%
        1:  795:SuperString SuperString::ConstUTF16BESequence::trimLeft() const {
        -:  796:    // TODO: General code, specify
        1:  797:    std::size_t startIndex = 0;
        1:  798:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  799:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  800:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  801:    }
        3:  802:    return this->substring(startIndex, this->length()).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        1:  803:}
call    0 returned 100%
call    1 never executed
        -:  804:
function _ZNK11SuperString20ConstUTF16BESequence9trimRightEv called 1 returned 100% blocks executed 74%
        1:  805:SuperString SuperString::ConstUTF16BESequence::trimRight() const {
        -:  806:    // TODO: General code, specify
        1:  807:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  808:    Result<int, Error> result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  809:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  810:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  811:    }
        3:  812:    return this->substring(0, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  813:}
call    0 returned 100%
call    1 never executed
        -:  814:
function _ZNK11SuperString20ConstUTF16BESequence11keepingCostEv called 7 returned 100% blocks executed 100%
        7:  815:std::size_t SuperString::ConstUTF16BESequence::keepingCost() const {
        7:  816:    return sizeof(ConstUTF16BESequence);
        -:  817:}
        -:  818:
function _ZNK11SuperString20ConstUTF16BESequence8doDeleteEv called 3 returned 100% blocks executed 100%
        3:  819:void SuperString::ConstUTF16BESequence::doDelete() const {
        3:  820:    ConstUTF16BESequence *self = ((ConstUTF16BESequence *) (std::size_t) this);
        3:  821:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        3:  822:        self->_status = Status::ToBeDestructed; // Just a trick, we don't want any more variable
        3:  823:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  824:    }
        3:  825:}
        -:  826:
function _ZNK11SuperString20ConstUTF16BESequence13isToBeDeletedEv called 3 returned 100% blocks executed 100%
        3:  827:bool SuperString::ConstUTF16BESequence::isToBeDeleted() const {
        3:  828:    return this->_status == Status::ToBeDestructed;
        -:  829:}
        -:  830:
        -:  831://*-- SuperString::CopyUTF16BESequence (internal)
function _ZN11SuperString19CopyUTF16BESequenceC2EPKh called 2 returned 100% blocks executed 80%
        2:  832:SuperString::CopyUTF16BESequence::CopyUTF16BESequence(const SuperString::Byte *bytes) {
call    0 returned 100%
        2:  833:    Pair<std::size_t, std::size_t> lengthAndMemoryLength = SuperString::UTF16BE::lengthAndMemoryLength(bytes);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  834:    this->_length = lengthAndMemoryLength.first();
call    0 returned 100%
        2:  835:    this->_memoryLength = lengthAndMemoryLength.second();
call    0 returned 100%
        2:  836:    this->_data = new Byte[this->_memoryLength];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  837:    std::copy_n(bytes, this->_memoryLength, this->_data);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  838:}
call    0 never executed
        -:  839:
function _ZN11SuperString19CopyUTF16BESequenceC2EPKNS_20ConstUTF16BESequenceE called 1 returned 100% blocks executed 80%
        1:  840:SuperString::CopyUTF16BESequence::CopyUTF16BESequence(const SuperString::ConstUTF16BESequence *sequence) {
call    0 returned 100%
        1:  841:    Pair<std::size_t, std::size_t> lengthAndMemoryLength = SuperString::UTF16BE::lengthAndMemoryLength(sequence->_bytes);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  842:    this->_length = lengthAndMemoryLength.first();
call    0 returned 100%
        1:  843:    this->_memoryLength = lengthAndMemoryLength.second();
call    0 returned 100%
        1:  844:    this->_data = new Byte[this->_memoryLength];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  845:    std::copy_n(sequence->_bytes, this->_memoryLength, this->_data);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  846:}
call    0 never executed
        -:  847:
        5:  848:SuperString::CopyUTF16BESequence::~CopyUTF16BESequence() {
        3:  849:    this->reconstructReferencers();
        3:  850:    delete this->_data;
        5:  851:}
------------------
_ZN11SuperString19CopyUTF16BESequenceD0Ev:
function _ZN11SuperString19CopyUTF16BESequenceD0Ev called 2 returned 100% blocks executed 100%
        2:  848:SuperString::CopyUTF16BESequence::~CopyUTF16BESequence() {
        -:  849:    this->reconstructReferencers();
        -:  850:    delete this->_data;
        2:  851:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString19CopyUTF16BESequenceD2Ev:
function _ZN11SuperString19CopyUTF16BESequenceD2Ev called 3 returned 100% blocks executed 100%
        3:  848:SuperString::CopyUTF16BESequence::~CopyUTF16BESequence() {
        3:  849:    this->reconstructReferencers();
call    0 returned 100%
        3:  850:    delete this->_data;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        3:  851:}
call    0 returned 100%
------------------
        -:  852:
function _ZNK11SuperString19CopyUTF16BESequence6lengthEv called 29 returned 100% blocks executed 100%
       29:  853:std::size_t SuperString::CopyUTF16BESequence::length() const {
       29:  854:    return this->_length;
        -:  855:}
        -:  856:
        -:  857:SuperString::Result<int, SuperString::Error>
function _ZNK11SuperString19CopyUTF16BESequence10codeUnitAtEm called 10 returned 100% blocks executed 100%
       10:  858:SuperString::CopyUTF16BESequence::codeUnitAt(std::size_t index) const {
       10:  859:    if(index < this->length()) {
call    0 returned 100%
branch  1 taken 90% (fallthrough)
branch  2 taken 10%
        9:  860:        return SuperString::UTF16BE::codeUnitAt(this->_data, index);
call    0 returned 100%
        -:  861:    }
        1:  862:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -:  863:}
        -:  864:
        -:  865:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString19CopyUTF16BESequence9substringEmm called 6 returned 100% blocks executed 81%
        6:  866:SuperString::CopyUTF16BESequence::substring(std::size_t startIndex, std::size_t endIndex) const {
        -:  867:    // TODO: General code, specify + repeated * times
        6:  868:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        2:  869:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -:  870:    }
        4:  871:    SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        8:  872:    return Result<SuperString, Error>(SuperString(sequence));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  873:}
        -:  874:
function _ZNK11SuperString19CopyUTF16BESequence5printERSo called 1 returned 100% blocks executed 100%
        1:  875:bool SuperString::CopyUTF16BESequence::print(std::ostream &stream) const {
        1:  876:    SuperString::UTF16BE::print(stream, this->_data, this->length());
call    0 returned 100%
call    1 returned 100%
        1:  877:    return true;
        -:  878:}
        -:  879:
function _ZNK11SuperString19CopyUTF16BESequence5printERSomm called 3 returned 100% blocks executed 100%
        3:  880:bool SuperString::CopyUTF16BESequence::print(std::ostream &stream, std::size_t startIndex,
        -:  881:                                                          std::size_t endIndex) const {
        3:  882:    std::size_t length = this->length();
call    0 returned 100%
        3:  883:    if(length < startIndex || length < endIndex) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        1:  884:        return false;
        -:  885:    }
        2:  886:    SuperString::UTF16BE::print(stream, this->_data, startIndex, endIndex);
call    0 returned 100%
        2:  887:    return true;
        -:  888:}
        -:  889:
function _ZNK11SuperString19CopyUTF16BESequence4trimEv called 1 returned 100% blocks executed 74%
        1:  890:SuperString SuperString::CopyUTF16BESequence::trim() const {
        -:  891:    // TODO: General code, specify
        1:  892:    std::size_t startIndex = 0;
        1:  893:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  894:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  895:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  896:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  897:    }
        1:  898:    result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  899:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  900:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  901:    }
        3:  902:    return this->substring(startIndex, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  903:}
call    0 returned 100%
call    1 never executed
        -:  904:
function _ZNK11SuperString19CopyUTF16BESequence8trimLeftEv called 1 returned 100% blocks executed 74%
        1:  905:SuperString SuperString::CopyUTF16BESequence::trimLeft() const {
        -:  906:    // TODO: General code, specify
        1:  907:    std::size_t startIndex = 0;
        1:  908:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  909:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  910:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  911:    }
        3:  912:    return this->substring(startIndex, this->length()).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        1:  913:}
call    0 returned 100%
call    1 never executed
        -:  914:
function _ZNK11SuperString19CopyUTF16BESequence9trimRightEv called 1 returned 100% blocks executed 74%
        1:  915:SuperString SuperString::CopyUTF16BESequence::trimRight() const {
        -:  916:    // TODO: General code, specify
        1:  917:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  918:    Result<int, Error> result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  919:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1:  920:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -:  921:    }
        3:  922:    return this->substring(0, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  923:}
call    0 returned 100%
call    1 never executed
        -:  924:
function _ZNK11SuperString19CopyUTF16BESequence11keepingCostEv called 6 returned 100% blocks executed 100%
        6:  925:std::size_t SuperString::CopyUTF16BESequence::keepingCost() const {
        6:  926:    std::size_t cost = sizeof(CopyUTF16BESequence) + this->_memoryLength;
        6:  927:    return cost;
        -:  928:}
        -:  929:
function _ZNK11SuperString19CopyUTF16BESequence8doDeleteEv called 2 returned 100% blocks executed 100%
        2:  930:void SuperString::CopyUTF16BESequence::doDelete() const {
        2:  931:    CopyUTF16BESequence *self = ((CopyUTF16BESequence *) (std::size_t) this);
        2:  932:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  933:        self->_length = 0; // Just a trick, we don't want any more variable
        2:  934:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:  935:    }
        2:  936:}
        -:  937:
function _ZNK11SuperString19CopyUTF16BESequence13isToBeDeletedEv called 2 returned 100% blocks executed 100%
        2:  938:bool SuperString::CopyUTF16BESequence::isToBeDeleted() const {
        2:  939:    return this->_length == 0;
        -:  940:}
        -:  941:
        -:  942://*-- SuperString::ConstUTF32Sequence (internal)
function _ZN11SuperString18ConstUTF32SequenceC2EPKh called 5 returned 100% blocks executed 100%
        5:  943:SuperString::ConstUTF32Sequence::ConstUTF32Sequence(const SuperString::Byte *bytes)
        5:  944:        : _bytes(((const int *) bytes)),
        5:  945:          _status(SuperString::ConstUTF32Sequence::Status::LengthNotComputed) {
call    0 returned 100%
        -:  946:    // nothing go here
        5:  947:}
        -:  948:
        8:  949:SuperString::ConstUTF32Sequence::~ConstUTF32Sequence() {
        4:  950:    this->reconstructReferencers();
        8:  951:}
------------------
_ZN11SuperString18ConstUTF32SequenceD0Ev:
function _ZN11SuperString18ConstUTF32SequenceD0Ev called 4 returned 100% blocks executed 100%
        4:  949:SuperString::ConstUTF32Sequence::~ConstUTF32Sequence() {
        -:  950:    this->reconstructReferencers();
        4:  951:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString18ConstUTF32SequenceD2Ev:
function _ZN11SuperString18ConstUTF32SequenceD2Ev called 4 returned 100% blocks executed 100%
        4:  949:SuperString::ConstUTF32Sequence::~ConstUTF32Sequence() {
        4:  950:    this->reconstructReferencers();
call    0 returned 100%
        4:  951:}
call    0 returned 100%
------------------
        -:  952:
function _ZNK11SuperString18ConstUTF32Sequence6lengthEv called 23 returned 100% blocks executed 100%
       23:  953:std::size_t SuperString::ConstUTF32Sequence::length() const /*override*/ {
       23:  954:    if(this->_status == Status::LengthNotComputed) {
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        2:  955:        ConstUTF32Sequence *self = ((ConstUTF32Sequence *) ((std::size_t) this)); // to keep this method `const`
        2:  956:        self->_status = Status::LengthComputed;
        2:  957:        self->_length = SuperString::UTF32::length(((const Byte *) this->_bytes));
call    0 returned 100%
        -:  958:    }
       23:  959:    return this->_length;
        -:  960:}
        -:  961:
        -:  962:SuperString::Result<int, SuperString::Error>
function _ZNK11SuperString18ConstUTF32Sequence10codeUnitAtEm called 2 returned 100% blocks executed 100%
        2:  963:SuperString::ConstUTF32Sequence::codeUnitAt(std::size_t index) const {
        2:  964:    if(index < this->length()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:  965:        return Result<int, SuperString::Error>(SuperString::UTF32::codeUnitAt(((const Byte *) this->_bytes), index));
call    0 returned 100%
call    1 returned 100%
        -:  966:    }
        1:  967:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -:  968:}
        -:  969:
        -:  970:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString18ConstUTF32Sequence9substringEmm called 6 returned 100% blocks executed 81%
        6:  971:SuperString::ConstUTF32Sequence::substring(std::size_t startIndex,
        -:  972:                                           std::size_t endIndex) const {
        -:  973:    // TODO: General code, specify + repeated * times
        6:  974:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        2:  975:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -:  976:    }
        4:  977:    SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        8:  978:    return Result<SuperString, Error>(SuperString(sequence));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -:  979:}
        -:  980:
function _ZNK11SuperString18ConstUTF32Sequence5printERSo called 2 returned 100% blocks executed 100%
        2:  981:bool SuperString::ConstUTF32Sequence::print(std::ostream &stream) const {
        2:  982:    SuperString::UTF32::print(stream, ((const Byte *) this->_bytes));
call    0 returned 100%
        2:  983:    return true;
        -:  984:}
        -:  985:
function _ZNK11SuperString18ConstUTF32Sequence5printERSomm called 3 returned 100% blocks executed 100%
        3:  986:bool SuperString::ConstUTF32Sequence::print(std::ostream &stream, std::size_t startIndex,
        -:  987:                                                         std::size_t endIndex) const {
        3:  988:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
        2:  989:        return false;
        -:  990:    }
        1:  991:    SuperString::UTF32::print(stream, ((Byte *) this->_bytes), startIndex, endIndex);
call    0 returned 100%
        1:  992:    return true;
        -:  993:}
        -:  994:
function _ZNK11SuperString18ConstUTF32Sequence4trimEv called 1 returned 100% blocks executed 77%
        1:  995:SuperString SuperString::ConstUTF32Sequence::trim() const {
        1:  996:    Pair<std::size_t, std::size_t> indexes = SuperString::UTF32::trim(((Byte *) this->_bytes), this->_length);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  997:    return this->substring(indexes.first(), indexes.second()).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
        -:  998:}
        -:  999:
function _ZNK11SuperString18ConstUTF32Sequence8trimLeftEv called 1 returned 100% blocks executed 82%
        1: 1000:SuperString SuperString::ConstUTF32Sequence::trimLeft() const {
        2: 1001:    return this->substring(SuperString::UTF32::trimLeft(((Byte *) this->_bytes)), this->length()).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1002:}
        -: 1003:
function _ZNK11SuperString18ConstUTF32Sequence9trimRightEv called 1 returned 100% blocks executed 82%
        1: 1004:SuperString SuperString::ConstUTF32Sequence::trimRight() const {
        2: 1005:    return this->substring(0, SuperString::UTF32::trimRight(((Byte *) this->_bytes), this->length())).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1006:}
        -: 1007:
function _ZNK11SuperString18ConstUTF32Sequence11keepingCostEv called 8 returned 100% blocks executed 100%
        8: 1008:std::size_t SuperString::ConstUTF32Sequence::keepingCost() const {
        8: 1009:    return sizeof(ConstUTF32Sequence);
        -: 1010:}
        -: 1011:
function _ZNK11SuperString18ConstUTF32Sequence8doDeleteEv called 4 returned 100% blocks executed 100%
        4: 1012:void SuperString::ConstUTF32Sequence::doDelete() const {
        4: 1013:    ConstUTF32Sequence *self = ((ConstUTF32Sequence *) (std::size_t) this);
        4: 1014:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        4: 1015:        self->_status = Status::ToBeDestructed; // Just a trick, we don't want any more variable
        4: 1016:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 1017:    }
        4: 1018:}
        -: 1019:
function _ZNK11SuperString18ConstUTF32Sequence13isToBeDeletedEv called 4 returned 100% blocks executed 100%
        4: 1020:bool SuperString::ConstUTF32Sequence::isToBeDeleted() const {
        4: 1021:    return this->_status == Status::ToBeDestructed;
        -: 1022:}
        -: 1023:
        -: 1024://*-- SuperString::CopyUTF32Sequence (internal)
function _ZN11SuperString17CopyUTF32SequenceC2EPKh called 3 returned 100% blocks executed 80%
        3: 1025:SuperString::CopyUTF32Sequence::CopyUTF32Sequence(const SuperString::Byte *bytes) {
call    0 returned 100%
        3: 1026:    this->_length = SuperString::UTF32::length(bytes);
call    0 returned 100%
       3*: 1027:    this->_data = new int[this->_length + 1];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        3: 1028:    std::copy_n(bytes, this->_length + 1, this->_data);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        3: 1029:}
call    0 never executed
        -: 1030:
function _ZN11SuperString17CopyUTF32SequenceC2EPKNS_18ConstUTF32SequenceE called 1 returned 100% blocks executed 80%
        1: 1031:SuperString::CopyUTF32Sequence::CopyUTF32Sequence(const SuperString::ConstUTF32Sequence *sequence) {
call    0 returned 100%
        1: 1032:    this->_length = SuperString::UTF32::length(((const Byte *) sequence->_bytes));
call    0 returned 100%
       1*: 1033:    this->_data = new int[this->_length + 1];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1: 1034:    std::copy_n(sequence->_bytes, this->_length + 1, this->_data);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1035:}
call    0 never executed
        -: 1036:
        7: 1037:SuperString::CopyUTF32Sequence::~CopyUTF32Sequence() {
        4: 1038:    this->reconstructReferencers();
        4: 1039:    delete this->_data;
        7: 1040:}
------------------
_ZN11SuperString17CopyUTF32SequenceD0Ev:
function _ZN11SuperString17CopyUTF32SequenceD0Ev called 3 returned 100% blocks executed 100%
        3: 1037:SuperString::CopyUTF32Sequence::~CopyUTF32Sequence() {
        -: 1038:    this->reconstructReferencers();
        -: 1039:    delete this->_data;
        3: 1040:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString17CopyUTF32SequenceD2Ev:
function _ZN11SuperString17CopyUTF32SequenceD2Ev called 4 returned 100% blocks executed 100%
        4: 1037:SuperString::CopyUTF32Sequence::~CopyUTF32Sequence() {
        4: 1038:    this->reconstructReferencers();
call    0 returned 100%
        4: 1039:    delete this->_data;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        4: 1040:}
call    0 returned 100%
------------------
        -: 1041:
function _ZNK11SuperString17CopyUTF32Sequence6lengthEv called 28 returned 100% blocks executed 100%
       28: 1042:std::size_t SuperString::CopyUTF32Sequence::length() const {
       28: 1043:    return this->_length;
        -: 1044:}
        -: 1045:
function _ZNK11SuperString17CopyUTF32Sequence10codeUnitAtEm called 2 returned 100% blocks executed 100%
        2: 1046:SuperString::Result<int, SuperString::Error> SuperString::CopyUTF32Sequence::codeUnitAt(
        -: 1047:        std::size_t index) const {
        2: 1048:    if(index < this->length()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1: 1049:        return Result<int, SuperString::Error>(SuperString::UTF32::codeUnitAt(((const Byte *) this->_data), index));
call    0 returned 100%
call    1 returned 100%
        -: 1050:    }
        1: 1051:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -: 1052:}
        -: 1053:
        -: 1054:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString17CopyUTF32Sequence9substringEmm called 6 returned 100% blocks executed 81%
        6: 1055:SuperString::CopyUTF32Sequence::substring(std::size_t startIndex,
        -: 1056:                                          std::size_t endIndex) const {
        -: 1057:    // TODO: General code, specify + repeated * times
        6: 1058:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 83% (fallthrough)
branch  2 taken 17%
call    3 returned 100%
branch  4 taken 20% (fallthrough)
branch  5 taken 80%
branch  6 taken 33% (fallthrough)
branch  7 taken 67%
        2: 1059:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -: 1060:    }
        4: 1061:    SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
        8: 1062:    return Result<SuperString, Error>(SuperString(sequence));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        -: 1063:}
        -: 1064:
function _ZNK11SuperString17CopyUTF32Sequence5printERSo called 1 returned 100% blocks executed 100%
        1: 1065:bool SuperString::CopyUTF32Sequence::print(std::ostream &stream) const {
        1: 1066:    SuperString::UTF32::print(stream, ((const Byte *) this->_data));
call    0 returned 100%
        1: 1067:    return true;
        -: 1068:}
        -: 1069:
function _ZNK11SuperString17CopyUTF32Sequence5printERSomm called 3 returned 100% blocks executed 100%
        3: 1070:bool SuperString::CopyUTF32Sequence::print(std::ostream &stream, std::size_t startIndex,
        -: 1071:                                                        std::size_t endIndex) const {
        3: 1072:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
        2: 1073:        return false;
        -: 1074:    }
        1: 1075:    SuperString::UTF32::print(stream, ((const Byte *) this->_data), startIndex, endIndex);
call    0 returned 100%
        1: 1076:    return true;
        -: 1077:}
        -: 1078:
function _ZNK11SuperString17CopyUTF32Sequence4trimEv called 1 returned 100% blocks executed 77%
        1: 1079:SuperString SuperString::CopyUTF32Sequence::trim() const {
        1: 1080:    Pair<std::size_t, std::size_t> indexes = SuperString::UTF32::trim(((const Byte *) this->_data), this->_length);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1081:    return this->substring(indexes.first(), indexes.second()).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
        -: 1082:}
        -: 1083:
function _ZNK11SuperString17CopyUTF32Sequence8trimLeftEv called 1 returned 100% blocks executed 82%
        1: 1084:SuperString SuperString::CopyUTF32Sequence::trimLeft() const {
        2: 1085:    return this->substring(SuperString::UTF32::trimLeft(((const Byte *) this->_data)), this->length()).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1086:}
        -: 1087:
function _ZNK11SuperString17CopyUTF32Sequence9trimRightEv called 1 returned 100% blocks executed 82%
        1: 1088:SuperString SuperString::CopyUTF32Sequence::trimRight() const {
        2: 1089:    return this->substring(0, SuperString::UTF32::trimRight(((const Byte *) this->_data), this->length())).ok();
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1090:}
        -: 1091:
function _ZNK11SuperString17CopyUTF32Sequence11keepingCostEv called 7 returned 100% blocks executed 100%
        7: 1092:std::size_t SuperString::CopyUTF32Sequence::keepingCost() const {
        7: 1093:    std::size_t cost = sizeof(CopyASCIISequence);
        7: 1094:    if(this->_data != NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7: 1095:        cost += this->length() + 1;
call    0 returned 100%
        -: 1096:    }
        7: 1097:    return cost;
        -: 1098:}
        -: 1099:
function _ZNK11SuperString17CopyUTF32Sequence8doDeleteEv called 3 returned 100% blocks executed 100%
        3: 1100:void SuperString::CopyUTF32Sequence::doDelete() const {
        3: 1101:    CopyUTF32Sequence *self = ((CopyUTF32Sequence *) (std::size_t) this);
        3: 1102:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        3: 1103:        self->_length = 0; // Just a trick, we don't want any more variable
        3: 1104:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 1105:    }
        3: 1106:}
        -: 1107:
function _ZNK11SuperString17CopyUTF32Sequence13isToBeDeletedEv called 3 returned 100% blocks executed 100%
        3: 1108:bool SuperString::CopyUTF32Sequence::isToBeDeleted() const {
        3: 1109:    return this->_length == 0;
        -: 1110:}
        -: 1111:
        -: 1112://*-- SuperString::SubstringSequence (internal)
function _ZN11SuperString17SubstringSequenceC2EPKNS_14StringSequenceEmm called 59 returned 100% blocks executed 80%
       59: 1113:SuperString::SubstringSequence::SubstringSequence(const StringSequence *sequence, std::size_t startIndex,
       59: 1114:                                                  std::size_t endIndex) {
call    0 returned 100%
       59: 1115:    this->_kind = Kind::SUBSTRING;
       59: 1116:    this->_container._substring._sequence = sequence;
       59: 1117:    this->_container._substring._startIndex = startIndex;
       59: 1118:    this->_container._substring._endIndex = endIndex;
       59: 1119:    this->_container._substring._sequence->addReferencer(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       59: 1120:}
call    0 never executed
        -: 1121:
      110: 1122:SuperString::SubstringSequence::~SubstringSequence() {
       58: 1123:    switch(this->kind()) {
       57: 1124:        case Kind::SUBSTRING:
       57: 1125:            this->_container._substring._sequence->removeReferencer(this);
       58: 1126:            if(this->_container._substring._sequence->refCount() == 0 &&
        1: 1127:               this->_container._substring._sequence->freeingCost() <
        1: 1128:               this->_container._substring._sequence->keepingCost()) {
        1: 1129:                this->_container._substring._sequence->doDelete();
        -: 1130:            }
       57: 1131:            break;
        1: 1132:        case Kind::RECONSTRUCTED:
        1: 1133:            delete this->_container._reconstructed._data;
        1: 1134:            break;
        -: 1135:    }
      110: 1136:}
------------------
_ZN11SuperString17SubstringSequenceD0Ev:
function _ZN11SuperString17SubstringSequenceD0Ev called 52 returned 100% blocks executed 100%
       52: 1122:SuperString::SubstringSequence::~SubstringSequence() {
        -: 1123:    switch(this->kind()) {
        -: 1124:        case Kind::SUBSTRING:
        -: 1125:            this->_container._substring._sequence->removeReferencer(this);
        -: 1126:            if(this->_container._substring._sequence->refCount() == 0 &&
        -: 1127:               this->_container._substring._sequence->freeingCost() <
        -: 1128:               this->_container._substring._sequence->keepingCost()) {
        -: 1129:                this->_container._substring._sequence->doDelete();
        -: 1130:            }
        -: 1131:            break;
        -: 1132:        case Kind::RECONSTRUCTED:
        -: 1133:            delete this->_container._reconstructed._data;
        -: 1134:            break;
        -: 1135:    }
       52: 1136:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString17SubstringSequenceD2Ev:
function _ZN11SuperString17SubstringSequenceD2Ev called 58 returned 100% blocks executed 100%
       58: 1122:SuperString::SubstringSequence::~SubstringSequence() {
       58: 1123:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 98%
branch  2 taken 2%
branch  3 taken 0%
       57: 1124:        case Kind::SUBSTRING:
       57: 1125:            this->_container._substring._sequence->removeReferencer(this);
call    0 returned 100%
       58: 1126:            if(this->_container._substring._sequence->refCount() == 0 &&
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
branch  3 taken 2% (fallthrough)
branch  4 taken 98%
        1: 1127:               this->_container._substring._sequence->freeingCost() <
call    0 returned 100%
        1: 1128:               this->_container._substring._sequence->keepingCost()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1129:                this->_container._substring._sequence->doDelete();
call    0 returned 100%
        -: 1130:            }
       57: 1131:            break;
        1: 1132:        case Kind::RECONSTRUCTED:
        1: 1133:            delete this->_container._reconstructed._data;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1: 1134:            break;
        -: 1135:    }
       58: 1136:}
call    0 returned 100%
------------------
        -: 1137:
function _ZNK11SuperString17SubstringSequence4kindEv called 406 returned 100% blocks executed 100%
      406: 1138:SuperString::SubstringSequence::Kind SuperString::SubstringSequence::kind() const {
      406: 1139:    return (Kind) (((char) this->_kind) & 0b01111111);
        -: 1140:}
        -: 1141:
function _ZNK11SuperString17SubstringSequence6lengthEv called 139 returned 100% blocks executed 83%
      139: 1142:std::size_t SuperString::SubstringSequence::length() const /*override*/ {
      139: 1143:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 94%
branch  2 taken 6%
branch  3 taken 0%
      131: 1144:        case Kind::SUBSTRING:
      131: 1145:            return this->_container._substring._endIndex - this->_container._substring._startIndex;
        8: 1146:        case Kind::RECONSTRUCTED:
        8: 1147:            return this->_container._reconstructed._length;
        -: 1148:    }
        -: 1149:    /* FIXME: Never goes here! by Hikari */
    #####: 1150:}
        -: 1151:
function _ZNK11SuperString17SubstringSequence10codeUnitAtEm called 87 returned 100% blocks executed 100%
       87: 1152:SuperString::Result<int, SuperString::Error> SuperString::SubstringSequence::codeUnitAt(
        -: 1153:        std::size_t index) const {
       87: 1154:    if(index < this->length()) {
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
       86: 1155:        switch(this->kind()) {
call    0 returned 100%
branch  1 taken 99%
branch  2 taken 1%
branch  3 taken 0%
       85: 1156:            case Kind::SUBSTRING:
       85: 1157:                return this->_container._substring._sequence->codeUnitAt(
       85: 1158:                        this->_container._substring._startIndex + index);
call    0 returned 100%
        1: 1159:            case Kind::RECONSTRUCTED:
        1: 1160:                return Result<int, SuperString::Error>(*(this->_container._reconstructed._data + index));
call    0 returned 100%
        -: 1161:        }
        -: 1162:    }
        1: 1163:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -: 1164:}
        -: 1165:
        -: 1166:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString17SubstringSequence9substringEmm called 9 returned 100% blocks executed 85%
        9: 1167:SuperString::SubstringSequence::substring(std::size_t startIndex, std::size_t endIndex) const {
        9: 1168:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 67%
branch  2 taken 33%
branch  3 taken 0%
        6: 1169:        case Kind::SUBSTRING:
        6: 1170:            if((this->_container._substring._sequence->length() <
call    0 returned 100%
       11: 1171:                (this->_container._substring._startIndex + startIndex)) ||
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        5: 1172:               (this->_container._substring._sequence->length() <
call    0 returned 100%
        5: 1173:                (this->_container._substring._startIndex + endIndex))) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        2: 1174:                return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -: 1175:            } else {
        -: 1176:                return Result<SuperString, Error>(
        8: 1177:                        SuperString(new SubstringSequence(this->_container._substring._sequence,
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        4: 1178:                                                          this->_container._substring._startIndex +
        -: 1179:                                                          startIndex,
        4: 1180:                                                          this->_container._substring._startIndex +
        8: 1181:                                                          endIndex)));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 never executed
        -: 1182:            }
        3: 1183:        case Kind::RECONSTRUCTED:    
        -: 1184:            // TODO: General code, specify + repeated * times
        3: 1185:            if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
        2: 1186:                return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -: 1187:            }
        1: 1188:            return Result<SuperString, Error>(Error::Unimplemented);
call    0 returned 100%
        -: 1189:            // FIXME: Not implemented yet by Hikari, always return Error::Unimplemented
        -: 1190:            // SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
        -: 1191:            // return Result<SuperString, Error>(SuperString(sequence));
        -: 1192:    }
        -: 1193:    /* FIXME: Never goes here! by Hikari */
    #####: 1194:}
        -: 1195:
function _ZNK11SuperString17SubstringSequence5printERSo called 2 returned 100% blocks executed 88%
        2: 1196:bool SuperString::SubstringSequence::print(std::ostream &stream) const {
        2: 1197:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 50%
branch  2 taken 50%
branch  3 taken 0%
        1: 1198:        case Kind::SUBSTRING:
        2: 1199:            return this->_container._substring._sequence->print(stream, this->_container._substring._startIndex,
        1: 1200:                                                                this->_container._substring._endIndex);
call    0 returned 100%
        1: 1201:        case Kind::RECONSTRUCTED:
        1: 1202:            SuperString::UTF32::print(stream, ((Byte *) this->_container._reconstructed._data));
call    0 returned 100%
        1: 1203:            return true;
        -: 1204:    }
        -: 1205:    /* FIXME: Never goes here! by Hikari */
    #####: 1206:}
        -: 1207:
function _ZNK11SuperString17SubstringSequence5printERSomm called 2 returned 100% blocks executed 88%
        2: 1208:bool SuperString::SubstringSequence::print(std::ostream &stream, std::size_t startIndex,
        -: 1209:                                                        std::size_t endIndex) const {
        2: 1210:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 50%
branch  2 taken 50%
branch  3 taken 0%
        1: 1211:        case Kind::SUBSTRING:
        2: 1212:            return this->_container._substring._sequence->print(stream,
        1: 1213:                                                                this->_container._substring._startIndex + startIndex,
        1: 1214:                                                                this->_container._substring._startIndex + endIndex);
call    0 returned 100%
        1: 1215:        case Kind::RECONSTRUCTED:
        1: 1216:            SuperString::UTF32::print(stream, ((Byte *) this->_container._reconstructed._data), startIndex, endIndex);
call    0 returned 100%
        1: 1217:            return true;
        -: 1218:    }
        -: 1219:    /* FIXME: Never goes here! by Hikari */
    #####: 1220:}
        -: 1221:
function _ZNK11SuperString17SubstringSequence4trimEv called 1 returned 100% blocks executed 74%
        1: 1222:SuperString SuperString::SubstringSequence::trim() const {
        -: 1223:    // TODO: General code, specify
        1: 1224:    std::size_t startIndex = 0;
        1: 1225:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1226:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1227:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1228:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1229:    }
        1: 1230:    result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2: 1231:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1232:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1233:    }
        3: 1234:    return this->substring(startIndex, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1: 1235:}
call    0 returned 100%
call    1 never executed
        -: 1236:
function _ZNK11SuperString17SubstringSequence8trimLeftEv called 1 returned 100% blocks executed 74%
        1: 1237:SuperString SuperString::SubstringSequence::trimLeft() const {
        -: 1238:    // TODO: General code, specify
        1: 1239:    std::size_t startIndex = 0;
        1: 1240:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1241:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1242:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1243:    }
        3: 1244:    return this->substring(startIndex, this->length()).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 returned 100%
call   10 never executed
        1: 1245:}
call    0 returned 100%
call    1 never executed
        -: 1246:
function _ZNK11SuperString17SubstringSequence9trimRightEv called 1 returned 100% blocks executed 74%
        1: 1247:SuperString SuperString::SubstringSequence::trimRight() const {
        -: 1248:    // TODO: General code, specify
        1: 1249:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1250:    Result<int, Error> result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1251:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1252:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1253:    }
        3: 1254:    return this->substring(0, endIndex).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1: 1255:}
call    0 returned 100%
call    1 never executed
        -: 1256:
function _ZNK11SuperString17SubstringSequence11keepingCostEv called 53 returned 100% blocks executed 86%
       53: 1257:std::size_t SuperString::SubstringSequence::keepingCost() const {
       53: 1258:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 98%
branch  2 taken 2%
branch  3 taken 0%
       52: 1259:        case Kind::SUBSTRING:
       52: 1260:            return sizeof(SubstringSequence) + this->_container._substring._sequence->keepingCost();
call    0 returned 100%
        1: 1261:        case Kind::RECONSTRUCTED:
        1: 1262:            return sizeof(SubstringSequence) + this->_container._reconstructed._length * sizeof(int);
        -: 1263:    }
        -: 1264:    /* FIXME: Never goes here! by Hikari */
    #####: 1265:}
        -: 1266:
function _ZNK11SuperString17SubstringSequence18reconstructionCostEPKNS_14StringSequenceE called 2 returned 100% blocks executed 100%
        2: 1267:std::size_t SuperString::SubstringSequence::reconstructionCost(const StringSequence *sequence) const {
        2: 1268:    if(this->kind() == Kind::SUBSTRING) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1: 1269:        return sizeof(SubstringSequence) +
        1: 1270:               (this->_container._substring._endIndex - this->_container._substring._startIndex) * sizeof(int);
        -: 1271:    }
        1: 1272:    return 0;
        -: 1273:}
        -: 1274:
function _ZNK11SuperString17SubstringSequence11reconstructEPKNS_14StringSequenceE called 3 returned 100% blocks executed 79%
        3: 1275:void SuperString::SubstringSequence::reconstruct(const StringSequence *sequence) const {
        3: 1276:    SubstringSequence *self = ((SubstringSequence *) ((std::size_t) this));
        3: 1277:    if(self->kind() == Kind::SUBSTRING) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        2: 1278:        struct SubstringMetaInfo old = self->_container._substring;
        -: 1279:        struct ReconstructedMetaInfo nw;
        2: 1280:        nw._length = old._endIndex - old._startIndex;
       2*: 1281:        nw._data = new int[nw._length];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        5: 1282:        for(std::size_t i = 0; i < nw._length; i++) {
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        3: 1283:            nw._data[i] = old._sequence->codeUnitAt(old._startIndex + i).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -: 1284:        }
        2: 1285:        old._sequence->removeReferencer(self);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       2*: 1286:        if(old._sequence->refCount() == 0 && old._sequence->freeingCost() < old._sequence->keepingCost()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1287:            // FIXME: Never goes here! by Hikari
        -: 1288:            // old._sequence->doDelete();
        -: 1289:        }
        2: 1290:        self->_kind = Kind::RECONSTRUCTED;
        2: 1291:        self->_container._reconstructed = nw;
        -: 1292:    }
        3: 1293:}
        -: 1294:
function _ZNK11SuperString17SubstringSequence8doDeleteEv called 52 returned 100% blocks executed 100%
       52: 1295:void SuperString::SubstringSequence::doDelete() const {
       52: 1296:    SubstringSequence *self = ((SubstringSequence *) (std::size_t) this);
       52: 1297:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       52: 1298:        self->_kind = (Kind) (((char) self->kind()) + 0b10000000); // Just a trick, we don't want any more variable
call    0 returned 100%
       52: 1299:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 1300:    }
       52: 1301:}
        -: 1302:
function _ZNK11SuperString17SubstringSequence13isToBeDeletedEv called 52 returned 100% blocks executed 100%
       52: 1303:bool SuperString::SubstringSequence::isToBeDeleted() const {
       52: 1304:    return (((char) this->_kind) & 0b10000000) == 0b10000000;
        -: 1305:}
        -: 1306:
        -: 1307://*-- SuperString::ConcatenationSequence (internal)
function _ZN11SuperString21ConcatenationSequenceC2EPKNS_14StringSequenceES3_ called 13 returned 100% blocks executed 83%
       13: 1308:SuperString::ConcatenationSequence::ConcatenationSequence(const StringSequence *leftSequence,
       13: 1309:                                                          const StringSequence *rightSequence) {
call    0 returned 100%
       13: 1310:    this->_kind = Kind::CONCATENATION;
       13: 1311:    this->_container._concatenation._left = leftSequence;
       13: 1312:    this->_container._concatenation._right = rightSequence;
       13: 1313:    this->_container._concatenation._left->addReferencer(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       13: 1314:    this->_container._concatenation._right->addReferencer(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       13: 1315:}
call    0 never executed
        -: 1316:
       20: 1317:SuperString::ConcatenationSequence::~ConcatenationSequence() {
       13: 1318:    this->reconstructReferencers();
       13: 1319:    switch(this->kind()) {
        9: 1320:        case Kind::CONCATENATION:
        9: 1321:            this->_container._concatenation._left->removeReferencer(this);
       10: 1322:            if(this->_container._concatenation._left->refCount() == 0 &&
        1: 1323:               this->_container._concatenation._left->freeingCost() <
        1: 1324:               this->_container._concatenation._left->keepingCost()) {
        1: 1325:                this->_container._concatenation._left->doDelete();
        -: 1326:            }
        9: 1327:            this->_container._concatenation._right->removeReferencer(this);
       10: 1328:            if(this->_container._concatenation._right->refCount() == 0 &&
        1: 1329:               this->_container._concatenation._right->freeingCost() <
        1: 1330:               this->_container._concatenation._right->keepingCost()) {
        1: 1331:                this->_container._concatenation._right->doDelete();
        -: 1332:            }
        9: 1333:            break;
        1: 1334:        case Kind::LEFTRECONSTRUCTED:
        1: 1335:            delete this->_container._leftReconstructed._leftData;
        1: 1336:            this->_container._leftReconstructed._right->removeReferencer(this);
       2*: 1337:            if(this->_container._leftReconstructed._right->refCount() == 0 &&
        1: 1338:               this->_container._leftReconstructed._right->freeingCost() <
        1: 1339:               this->_container._leftReconstructed._right->keepingCost()) {
        1: 1340:                this->_container._leftReconstructed._right->doDelete();
        -: 1341:            }
        1: 1342:            break;
        1: 1343:        case Kind::RIGHTRECONSTRUCTED:
        1: 1344:            delete this->_container._rightReconstructed._rightData;
        1: 1345:            this->_container._rightReconstructed._left->removeReferencer(this);
       2*: 1346:            if(this->_container._rightReconstructed._left->refCount() == 0 &&
        1: 1347:               this->_container._rightReconstructed._left->freeingCost() <
        1: 1348:               this->_container._rightReconstructed._left->keepingCost()) {
        1: 1349:                this->_container._rightReconstructed._left->doDelete();
        -: 1350:            }
        1: 1351:            break;
        2: 1352:        case Kind::RECONSTRUCTED:
        2: 1353:            delete this->_container._reconstructed._data;
        -: 1354:    }
       20: 1355:}
------------------
_ZN11SuperString21ConcatenationSequenceD0Ev:
function _ZN11SuperString21ConcatenationSequenceD0Ev called 7 returned 100% blocks executed 100%
        7: 1317:SuperString::ConcatenationSequence::~ConcatenationSequence() {
        -: 1318:    this->reconstructReferencers();
        -: 1319:    switch(this->kind()) {
        -: 1320:        case Kind::CONCATENATION:
        -: 1321:            this->_container._concatenation._left->removeReferencer(this);
        -: 1322:            if(this->_container._concatenation._left->refCount() == 0 &&
        -: 1323:               this->_container._concatenation._left->freeingCost() <
        -: 1324:               this->_container._concatenation._left->keepingCost()) {
        -: 1325:                this->_container._concatenation._left->doDelete();
        -: 1326:            }
        -: 1327:            this->_container._concatenation._right->removeReferencer(this);
        -: 1328:            if(this->_container._concatenation._right->refCount() == 0 &&
        -: 1329:               this->_container._concatenation._right->freeingCost() <
        -: 1330:               this->_container._concatenation._right->keepingCost()) {
        -: 1331:                this->_container._concatenation._right->doDelete();
        -: 1332:            }
        -: 1333:            break;
        -: 1334:        case Kind::LEFTRECONSTRUCTED:
        -: 1335:            delete this->_container._leftReconstructed._leftData;
        -: 1336:            this->_container._leftReconstructed._right->removeReferencer(this);
        -: 1337:            if(this->_container._leftReconstructed._right->refCount() == 0 &&
        -: 1338:               this->_container._leftReconstructed._right->freeingCost() <
        -: 1339:               this->_container._leftReconstructed._right->keepingCost()) {
        -: 1340:                this->_container._leftReconstructed._right->doDelete();
        -: 1341:            }
        -: 1342:            break;
        -: 1343:        case Kind::RIGHTRECONSTRUCTED:
        -: 1344:            delete this->_container._rightReconstructed._rightData;
        -: 1345:            this->_container._rightReconstructed._left->removeReferencer(this);
        -: 1346:            if(this->_container._rightReconstructed._left->refCount() == 0 &&
        -: 1347:               this->_container._rightReconstructed._left->freeingCost() <
        -: 1348:               this->_container._rightReconstructed._left->keepingCost()) {
        -: 1349:                this->_container._rightReconstructed._left->doDelete();
        -: 1350:            }
        -: 1351:            break;
        -: 1352:        case Kind::RECONSTRUCTED:
        -: 1353:            delete this->_container._reconstructed._data;
        -: 1354:    }
        7: 1355:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString21ConcatenationSequenceD2Ev:
function _ZN11SuperString21ConcatenationSequenceD2Ev called 13 returned 100% blocks executed 96%
       13: 1317:SuperString::ConcatenationSequence::~ConcatenationSequence() {
       13: 1318:    this->reconstructReferencers();
call    0 returned 100%
       13: 1319:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 69%
branch  2 taken 8%
branch  3 taken 8%
branch  4 taken 15%
branch  5 taken 0%
        9: 1320:        case Kind::CONCATENATION:
        9: 1321:            this->_container._concatenation._left->removeReferencer(this);
call    0 returned 100%
       10: 1322:            if(this->_container._concatenation._left->refCount() == 0 &&
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
branch  3 taken 11% (fallthrough)
branch  4 taken 89%
        1: 1323:               this->_container._concatenation._left->freeingCost() <
call    0 returned 100%
        1: 1324:               this->_container._concatenation._left->keepingCost()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1325:                this->_container._concatenation._left->doDelete();
call    0 returned 100%
        -: 1326:            }
        9: 1327:            this->_container._concatenation._right->removeReferencer(this);
call    0 returned 100%
       10: 1328:            if(this->_container._concatenation._right->refCount() == 0 &&
call    0 returned 100%
branch  1 taken 11% (fallthrough)
branch  2 taken 89%
branch  3 taken 11% (fallthrough)
branch  4 taken 89%
        1: 1329:               this->_container._concatenation._right->freeingCost() <
call    0 returned 100%
        1: 1330:               this->_container._concatenation._right->keepingCost()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1331:                this->_container._concatenation._right->doDelete();
call    0 returned 100%
        -: 1332:            }
        9: 1333:            break;
        1: 1334:        case Kind::LEFTRECONSTRUCTED:
        1: 1335:            delete this->_container._leftReconstructed._leftData;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1: 1336:            this->_container._leftReconstructed._right->removeReferencer(this);
call    0 returned 100%
       2*: 1337:            if(this->_container._leftReconstructed._right->refCount() == 0 &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 1338:               this->_container._leftReconstructed._right->freeingCost() <
call    0 returned 100%
        1: 1339:               this->_container._leftReconstructed._right->keepingCost()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1340:                this->_container._leftReconstructed._right->doDelete();
call    0 returned 100%
        -: 1341:            }
        1: 1342:            break;
        1: 1343:        case Kind::RIGHTRECONSTRUCTED:
        1: 1344:            delete this->_container._rightReconstructed._rightData;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1: 1345:            this->_container._rightReconstructed._left->removeReferencer(this);
call    0 returned 100%
       2*: 1346:            if(this->_container._rightReconstructed._left->refCount() == 0 &&
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1: 1347:               this->_container._rightReconstructed._left->freeingCost() <
call    0 returned 100%
        1: 1348:               this->_container._rightReconstructed._left->keepingCost()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1349:                this->_container._rightReconstructed._left->doDelete();
call    0 returned 100%
        -: 1350:            }
        1: 1351:            break;
        2: 1352:        case Kind::RECONSTRUCTED:
        2: 1353:            delete this->_container._reconstructed._data;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 1354:    }
       13: 1355:}
call    0 returned 100%
------------------
        -: 1356:
function _ZNK11SuperString21ConcatenationSequence4kindEv called 206 returned 100% blocks executed 100%
      206: 1357:SuperString::ConcatenationSequence::Kind SuperString::ConcatenationSequence::kind() const {
      206: 1358:    return (Kind) (((char) this->_kind) & 0b01111111);
        -: 1359:}
        -: 1360:
function _ZNK11SuperString21ConcatenationSequence6lengthEv called 83 returned 100% blocks executed 92%
       83: 1361:std::size_t SuperString::ConcatenationSequence::length() const {
       83: 1362:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 95%
branch  2 taken 1%
branch  3 taken 1%
branch  4 taken 2%
branch  5 taken 0%
       79: 1363:        case Kind::CONCATENATION:
       79: 1364:            return this->_container._concatenation._left->length() + this->_container._concatenation._right->length();
call    0 returned 100%
call    1 returned 100%
        1: 1365:        case Kind::LEFTRECONSTRUCTED:
        1: 1366:            return this->_container._leftReconstructed._leftLength +
        1: 1367:                   this->_container._leftReconstructed._right->length();
call    0 returned 100%
        1: 1368:        case Kind::RIGHTRECONSTRUCTED:
        1: 1369:            return this->_container._rightReconstructed._rightLength +
        1: 1370:                   this->_container._rightReconstructed._left->length();
call    0 returned 100%
        2: 1371:        case Kind::RECONSTRUCTED:
        2: 1372:            return this->_container._reconstructed._length;
        -: 1373:    }
        -: 1374:    /* FIXME: Never goes here! by Hikari */
    #####: 1375:}
        -: 1376:
        -: 1377:SuperString::Result<int, SuperString::Error>
function _ZNK11SuperString21ConcatenationSequence10codeUnitAtEm called 48 returned 100% blocks executed 100%
       48: 1378:SuperString::ConcatenationSequence::codeUnitAt(std::size_t index) const {
       48: 1379:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 83%
branch  2 taken 6%
branch  3 taken 6%
branch  4 taken 4%
branch  5 taken 0%
       40: 1380:        case Kind::CONCATENATION:
       40: 1381:            if(index < this->_container._concatenation._left->length()) {
call    0 returned 100%
branch  1 taken 55% (fallthrough)
branch  2 taken 45%
       22: 1382:                return Result<int, Error>(this->_container._concatenation._left->codeUnitAt(index));
call    0 returned 100%
       18: 1383:            } else if((index - this->_container._concatenation._left->length()) <
call    0 returned 100%
       18: 1384:                      this->_container._concatenation._right->length()) {
call    0 returned 100%
branch  1 taken 94% (fallthrough)
branch  2 taken 6%
       17: 1385:                return Result<int, Error>(this->_container._concatenation._right->codeUnitAt(
       17: 1386:                        index - this->_container._concatenation._left->length()));
call    0 returned 100%
call    1 returned 100%
        -: 1387:            }
        1: 1388:            break;
        3: 1389:        case Kind::LEFTRECONSTRUCTED:
        3: 1390:            if(index < this->_container._leftReconstructed._leftLength) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 1391:                return Result<int, Error>(this->_container._leftReconstructed._leftData[index]);
call    0 returned 100%
        4: 1392:            } else if((index - this->_container._leftReconstructed._leftLength) <
        2: 1393:                      this->_container._leftReconstructed._right->length()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1: 1394:                return Result<int, Error>(this->_container._leftReconstructed._right->codeUnitAt(
        1: 1395:                        index - this->_container._leftReconstructed._leftLength));
call    0 returned 100%
        -: 1396:            }
        1: 1397:            break;
        3: 1398:        case Kind::RIGHTRECONSTRUCTED:
        3: 1399:            if(index < this->_container._rightReconstructed._left->length()) {
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        1: 1400:                return Result<int, Error>(this->_container._rightReconstructed._left->codeUnitAt(index));
call    0 returned 100%
        2: 1401:            } else if((index - this->_container._rightReconstructed._left->length()) <
call    0 returned 100%
        2: 1402:                      this->_container._rightReconstructed._rightLength) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1403:                return Result<int, Error>(
        1: 1404:                        this->_container._rightReconstructed._rightData[
        1: 1405:                                index - this->_container._rightReconstructed._left->length()
call    0 returned 100%
        1: 1406:                        ]);
call    0 returned 100%
        -: 1407:            }
        1: 1408:            break;
        2: 1409:        case Kind::RECONSTRUCTED:
        2: 1410:            if(index < this->_container._reconstructed._length) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1411:                return Result<int, Error>(this->_container._reconstructed._data[index]);
call    0 returned 100%
        -: 1412:            }
        -: 1413:    }
        4: 1414:    return Result<int, Error>(Error::RangeError);
call    0 returned 100%
        -: 1415:}
        -: 1416:
        -: 1417:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString21ConcatenationSequence9substringEmm called 3 returned 100% blocks executed 100%
        3: 1418:SuperString::ConcatenationSequence::substring(std::size_t startIndex,
        -: 1419:                                              std::size_t endIndex) const {
        3: 1420:    if(this->length() < startIndex || this->length() < endIndex) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
call    3 returned 100%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
        2: 1421:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -: 1422:    }
        1: 1423:    return Result<SuperString, Error>(Error::Unimplemented);
call    0 returned 100%
        -: 1424:    // FIXME: Not implemented yet by Hikari, always return Error::Unimplemented
        -: 1425:    // SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
        -: 1426:    // return Result<SuperString, Error>(SuperString(sequence));
        -: 1427:}
        -: 1428:
function _ZNK11SuperString21ConcatenationSequence5printERSo called 7 returned 100% blocks executed 100%
        7: 1429:bool SuperString::ConcatenationSequence::print(std::ostream &stream) const {
        7: 1430:    bool isOk = true;
        7: 1431:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 57%
branch  2 taken 14%
branch  3 taken 14%
branch  4 taken 14%
branch  5 taken 0%
        4: 1432:        case Kind::CONCATENATION:
        4: 1433:            isOk &= this->_container._concatenation._left->print(stream);
call    0 returned 100%
        4: 1434:            isOk &= this->_container._concatenation._right->print(stream);
call    0 returned 100%
        4: 1435:            break;
        1: 1436:        case Kind::LEFTRECONSTRUCTED:
        1: 1437:            SuperString::UTF32::print(stream, (const Byte *) this->_container._leftReconstructed._leftData);
call    0 returned 100%
        1: 1438:            isOk &= this->_container._leftReconstructed._right->print(stream);
call    0 returned 100%
        1: 1439:            break;
        1: 1440:        case Kind::RIGHTRECONSTRUCTED:
        1: 1441:            isOk &= this->_container._rightReconstructed._left->print(stream);
call    0 returned 100%
        1: 1442:            SuperString::UTF32::print(stream, (const Byte *) this->_container._rightReconstructed._rightData);
call    0 returned 100%
        1: 1443:            break;
        1: 1444:        case Kind::RECONSTRUCTED:
        1: 1445:            SuperString::UTF32::print(stream, (const Byte *) this->_container._reconstructed._data);
call    0 returned 100%
        1: 1446:            break;
        -: 1447:    }
        7: 1448:    return isOk;
        -: 1449:}
        -: 1450:
function _ZNK11SuperString21ConcatenationSequence5printERSomm called 19 returned 100% blocks executed 100%
       19: 1451:bool SuperString::ConcatenationSequence::print(std::ostream &stream, std::size_t startIndex,
        -: 1452:                                                            std::size_t endIndex) const {
       19: 1453:    bool isOk = true;
       19: 1454:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 53%
branch  2 taken 21%
branch  3 taken 21%
branch  4 taken 5%
branch  5 taken 0%
       10: 1455:        case Kind::CONCATENATION:
       10: 1456:            if(startIndex < this->_container._concatenation._left->length()) {
call    0 returned 100%
branch  1 taken 70% (fallthrough)
branch  2 taken 30%
        7: 1457:                if(endIndex < this->_container._concatenation._left->length()) {
call    0 returned 100%
branch  1 taken 43% (fallthrough)
branch  2 taken 57%
        3: 1458:                    isOk &= this->_container._concatenation._left->print(stream, startIndex, endIndex);
call    0 returned 100%
        -: 1459:                } else {
        4: 1460:                    isOk &= this->_container._concatenation._left->print(stream, startIndex,
call    0 returned 100%
        4: 1461:                                                                         this->_container._concatenation._left->length());
call    0 returned 100%
        4: 1462:                    isOk &= this->_container._concatenation._right->print(stream, 0,
        -: 1463:                                                                          endIndex -
        4: 1464:                                                                          this->_container._concatenation._left->length());
call    0 returned 100%
call    1 returned 100%
        -: 1465:                }
        -: 1466:            } else {
        3: 1467:                if((endIndex - this->_container._concatenation._left->length()) <
call    0 returned 100%
        3: 1468:                   this->_container._concatenation._right->length()) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        2: 1469:                    isOk &= this->_container._concatenation._right->print(stream, startIndex -
        2: 1470:                                                                                  this->_container._concatenation._left->length(),
call    0 returned 100%
        -: 1471:                                                                          endIndex -
        2: 1472:                                                                          this->_container._concatenation._left->length());
call    0 returned 100%
call    1 returned 100%
        -: 1473:                }
        -: 1474:            }
       10: 1475:            break;
        4: 1476:        case Kind::LEFTRECONSTRUCTED:
        4: 1477:            if(startIndex < this->_container._leftReconstructed._leftLength) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2: 1478:                if(endIndex < this->_container._leftReconstructed._leftLength) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1479:                    SuperString::UTF32::print(stream, (const Byte *) this->_container._leftReconstructed._leftData,
call    0 returned 100%
        -: 1480:                                              startIndex, endIndex);
        -: 1481:                } else {
        1: 1482:                    SuperString::UTF32::print(stream, (const Byte *) this->_container._leftReconstructed._leftData,
        1: 1483:                                              startIndex, this->_container._leftReconstructed._leftLength);
call    0 returned 100%
        1: 1484:                    isOk &= this->_container._leftReconstructed._right->print(stream, 0,
        -: 1485:                                                                              endIndex -
        1: 1486:                                                                              this->_container._leftReconstructed._leftLength);
call    0 returned 100%
        -: 1487:                }
        -: 1488:            } else {
        4: 1489:                if((endIndex - this->_container._leftReconstructed._leftLength) <
        2: 1490:                   this->_container._leftReconstructed._right->length()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1: 1491:                    isOk &= this->_container._leftReconstructed._right->print(stream, startIndex -
        1: 1492:                                                                                      this->_container._leftReconstructed._leftLength,
        -: 1493:                                                                              endIndex -
        1: 1494:                                                                              this->_container._leftReconstructed._leftLength);
call    0 returned 100%
        -: 1495:                }
        -: 1496:            }
        4: 1497:            break;
        4: 1498:        case Kind::RIGHTRECONSTRUCTED:
        4: 1499:            if(startIndex < this->_container._rightReconstructed._left->length()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        2: 1500:                if(endIndex < this->_container._rightReconstructed._left->length()) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1: 1501:                    isOk &= this->_container._rightReconstructed._left->print(stream, startIndex, endIndex);
call    0 returned 100%
        -: 1502:                } else {
        1: 1503:                    isOk &= this->_container._rightReconstructed._left->print(stream, startIndex,
call    0 returned 100%
        1: 1504:                                                                      this->_container._rightReconstructed._left->length());
call    0 returned 100%
        1: 1505:                    SuperString::UTF32::print(stream, (const Byte *) this->_container._rightReconstructed._rightData, 0,
        1: 1506:                                              endIndex - this->_container._rightReconstructed._left->length());
call    0 returned 100%
call    1 returned 100%
        -: 1507:                }
        -: 1508:            } else {
        2: 1509:                if((endIndex - this->_container._rightReconstructed._left->length()) <
call    0 returned 100%
        2: 1510:                   this->_container._rightReconstructed._rightLength) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2: 1511:                    SuperString::UTF32::print(stream, (const Byte *) this->_container._rightReconstructed._rightData,
        1: 1512:                                              startIndex - this->_container._rightReconstructed._left->length(),
call    0 returned 100%
        1: 1513:                                              endIndex - this->_container._rightReconstructed._left->length());
call    0 returned 100%
call    1 returned 100%
        -: 1514:                }
        -: 1515:            }
        4: 1516:            break;
        1: 1517:        case Kind::RECONSTRUCTED:
        1: 1518:            SuperString::UTF32::print(stream, (const Byte *) this->_container._reconstructed._data, startIndex,
call    0 returned 100%
        -: 1519:                                      endIndex);
        -: 1520:    }
       19: 1521:    return isOk;
        -: 1522:}
        -: 1523:
function _ZNK11SuperString21ConcatenationSequence4trimEv called 1 returned 100% blocks executed 77%
        1: 1524:SuperString SuperString::ConcatenationSequence::trim() const {
        -: 1525:    // TODO: General code, specify
        1: 1526:    std::size_t startIndex = 0;
        1: 1527:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1528:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1529:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1530:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1531:    }
        1: 1532:    result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2: 1533:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1534:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1535:    }
        2: 1536:    return SuperString();
call    0 returned 100%
        -: 1537:    // FIXME: Substring Is Not implemented yet by Hikari, always return SuperString()
        -: 1538:    // return this->substring(startIndex, endIndex).ok();
        1: 1539:}
call    0 returned 100%
call    1 never executed
        -: 1540:
function _ZNK11SuperString21ConcatenationSequence8trimLeftEv called 1 returned 100% blocks executed 79%
        1: 1541:SuperString SuperString::ConcatenationSequence::trimLeft() const {
        -: 1542:    // TODO: General code, specify
        1: 1543:    std::size_t startIndex = 0;
        1: 1544:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1545:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1546:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1547:    }
        2: 1548:    return SuperString();
call    0 returned 100%
        -: 1549:    // FIXME: Substring Is Not implemented yet by Hikari, always return SuperString()
        -: 1550:    // return this->substring(startIndex, this->length()).ok();
        1: 1551:}
call    0 returned 100%
call    1 never executed
        -: 1552:
function _ZNK11SuperString21ConcatenationSequence9trimRightEv called 1 returned 100% blocks executed 80%
        1: 1553:SuperString SuperString::ConcatenationSequence::trimRight() const {
        -: 1554:    // TODO: General code, specify
        1: 1555:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1556:    Result<int, Error> result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1557:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1558:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1559:    }
        2: 1560:    return SuperString();
call    0 returned 100%
        -: 1561:    // FIXME: Substring Is Not implemented yet by Hikari, always return SuperString()
        -: 1562:    // return this->substring(0, endIndex).ok();
        1: 1563:}
call    0 returned 100%
call    1 never executed
        -: 1564:
function _ZNK11SuperString21ConcatenationSequence11keepingCostEv called 12 returned 100% blocks executed 92%
       12: 1565:std::size_t SuperString::ConcatenationSequence::keepingCost() const {
       12: 1566:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 75%
branch  2 taken 8%
branch  3 taken 8%
branch  4 taken 8%
branch  5 taken 0%
        9: 1567:        case Kind::CONCATENATION:
        9: 1568:            return sizeof(ConcatenationSequence) + this->_container._concatenation._left->keepingCost() +
call    0 returned 100%
        9: 1569:                   this->_container._concatenation._right->keepingCost();
call    0 returned 100%
        1: 1570:        case Kind::LEFTRECONSTRUCTED:
        1: 1571:            return sizeof(ConcatenationSequence) + this->_container._leftReconstructed._leftLength * sizeof(int) +
        1: 1572:                   this->_container._leftReconstructed._right->keepingCost();
call    0 returned 100%
        1: 1573:        case Kind::RIGHTRECONSTRUCTED:
        1: 1574:            return sizeof(ConcatenationSequence) + this->_container._rightReconstructed._left->keepingCost() +
call    0 returned 100%
        1: 1575:                   this->_container._rightReconstructed._rightLength * sizeof(int);
        1: 1576:        case Kind::RECONSTRUCTED:
        1: 1577:            return sizeof(ConcatenationSequence) + this->_container._reconstructed._length * sizeof(int);
        -: 1578:    }
        -: 1579:    /* FIXME: Never goes here! by Hikari */
    #####: 1580:}
        -: 1581:
function _ZNK11SuperString21ConcatenationSequence18reconstructionCostEPKNS_14StringSequenceE called 8 returned 100% blocks executed 95%
        8: 1582:std::size_t SuperString::ConcatenationSequence::reconstructionCost(const StringSequence *sequence) const {
        8: 1583:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 38%
branch  2 taken 25%
branch  3 taken 25%
branch  4 taken 12%
branch  5 taken 0%
        3: 1584:        case Kind::CONCATENATION:
        3: 1585:            if(sequence == this->_container._concatenation._left) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 1586:                return sizeof(ConcatenationSequence) +
        1: 1587:                       this->_container._concatenation._left->length() * sizeof(int);
call    0 returned 100%
        2: 1588:            } else if(sequence == this->_container._concatenation._right) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1589:                return sizeof(ConcatenationSequence) +
        1: 1590:                       this->_container._concatenation._right->length() * sizeof(int);
call    0 returned 100%
        -: 1591:            }
        1: 1592:            return 0;
        2: 1593:        case Kind::LEFTRECONSTRUCTED:
        2: 1594:            if(sequence == this->_container._leftReconstructed._right) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1595:                return sizeof(ConcatenationSequence) +
        1: 1596:                       this->_container._leftReconstructed._right->length() * sizeof(int);
call    0 returned 100%
        -: 1597:            } else {
        1: 1598:                return 0;
        -: 1599:            }
        2: 1600:        case Kind::RIGHTRECONSTRUCTED:
        2: 1601:            if(sequence == this->_container._rightReconstructed._left) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1602:                return sizeof(ConcatenationSequence) +
        1: 1603:                       this->_container._rightReconstructed._left->length() * sizeof(int);
call    0 returned 100%
        -: 1604:            } else {
        1: 1605:                return 0;
        -: 1606:            }
        1: 1607:        case Kind::RECONSTRUCTED:
        1: 1608:            return 0;
        -: 1609:    }
        -: 1610:    /* FIXME: Never goes here! by Hikari */
    #####: 1611:}
        -: 1612:
function _ZNK11SuperString21ConcatenationSequence11reconstructEPKNS_14StringSequenceE called 6 returned 100% blocks executed 82%
        6: 1613:void SuperString::ConcatenationSequence::reconstruct(const StringSequence *sequence) const {
        6: 1614:    ConcatenationSequence *self = ((ConcatenationSequence *) ((std::size_t) this));
        6: 1615:    if(self->kind() == Kind::CONCATENATION) {
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        4: 1616:        struct ConcatenationMetaInfo old = self->_container._concatenation;
        4: 1617:        if(old._left == sequence) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1618:            struct LeftReconstructedMetaInfo nw;
        2: 1619:            nw._right = old._right;
        2: 1620:            nw._leftLength = old._left->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       2*: 1621:            nw._leftData = new int[nw._leftLength];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       12: 1622:            for(std::size_t i = 0; i < nw._leftLength; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10: 1623:                nw._leftData[i] = old._left->codeUnitAt(i).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -: 1624:            }
        2: 1625:            old._left->removeReferencer(self);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       2*: 1626:            if(old._left->refCount() == 0 && old._left->freeingCost() < old._left->keepingCost()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1627:                // FIXME: Never goes here! by Hikari
        -: 1628:                // old._left->doDelete();
        -: 1629:            }
        2: 1630:            self->_kind = Kind::LEFTRECONSTRUCTED;
        2: 1631:            self->_container._leftReconstructed = nw;
        2: 1632:        } else if(old._right == sequence) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1633:            struct RightReconstructedMetaInfo nw;
        2: 1634:            nw._left = old._left; 
        -: 1635:            //FIXME: Real Logic Bug From Author!!! By Hikari  
        -: 1636:            // nw._left = old._right;
        2: 1637:            nw._rightLength = old._right->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       2*: 1638:            nw._rightData = new int[nw._rightLength];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       12: 1639:            for(std::size_t i = 0; i < nw._rightLength; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10: 1640:                nw._rightData[i] = old._right->codeUnitAt(i).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -: 1641:            }
        2: 1642:            old._right->removeReferencer(self);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       2*: 1643:            if(old._right->refCount() == 0 && old._right->freeingCost() < old._right->keepingCost()) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1644:                // FIXME: Never goes here! by Hikari
        -: 1645:                // old._right->doDelete();
        -: 1646:            }
        2: 1647:            self->_kind = Kind::RIGHTRECONSTRUCTED;
        2: 1648:            self->_container._rightReconstructed = nw;
        -: 1649:        }
        2: 1650:    } else if(self->kind() == Kind::LEFTRECONSTRUCTED) {
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1: 1651:        struct LeftReconstructedMetaInfo old = self->_container._leftReconstructed;
        1: 1652:        if(old._right == sequence) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1653:            struct ReconstructedMetaInfo nw;
        1: 1654:            nw._length = old._leftLength + old._right->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       1*: 1655:            nw._data = new int[nw._length];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       16: 1656:            for(std::size_t i = 0; i < nw._length; i++) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
       15: 1657:                if(i < old._leftLength) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        5: 1658:                    nw._data[i] = old._leftData[i];
        -: 1659:                } else {
       10: 1660:                    nw._data[i] = old._right->codeUnitAt(i - old._leftLength).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -: 1661:                }
        -: 1662:            }
        1: 1663:            old._right->removeReferencer(self);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       1*: 1664:            if(old._right->refCount() == 0 && old._right->freeingCost() < old._right->keepingCost()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
        1: 1665:                old._right->doDelete();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1666:            }
        1: 1667:            self->_kind = Kind::RECONSTRUCTED;
        1: 1668:            self->_container._reconstructed = nw;
        -: 1669:        }
        1: 1670:    } else if(self->kind() == Kind::RIGHTRECONSTRUCTED) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1671:        struct RightReconstructedMetaInfo old = self->_container._rightReconstructed;
        1: 1672:        if(old._left == sequence) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1673:            struct ReconstructedMetaInfo nw;
        1: 1674:            nw._length = old._left->length() + old._rightLength;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       1*: 1675:            nw._data = new int[nw._length];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        1: 1676:            std::size_t leftLength = old._left->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16: 1677:            for(std::size_t i = 0; i < nw._length; i++) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
       15: 1678:                if(i < leftLength) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       10: 1679:                    nw._data[i] = old._left->codeUnitAt(i).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -: 1680:                } else {
        5: 1681:                    nw._data[i] = old._rightData[i - leftLength];
        -: 1682:                }
        -: 1683:            }
        1: 1684:            old._left->removeReferencer(self);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       1*: 1685:            if(old._left->refCount() == 0 && old._left->freeingCost() < old._left->keepingCost()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
        1: 1686:                old._left->doDelete();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1687:            }
        1: 1688:            self->_kind = Kind::RECONSTRUCTED;
        1: 1689:            self->_container._reconstructed = nw;
        -: 1690:        }
        -: 1691:    }
        6: 1692:}
        -: 1693:
function _ZNK11SuperString21ConcatenationSequence8doDeleteEv called 7 returned 100% blocks executed 100%
        7: 1694:void SuperString::ConcatenationSequence::doDelete() const {
        7: 1695:    ConcatenationSequence *self = ((ConcatenationSequence *) (std::size_t) this);
        7: 1696:    if(!this->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        7: 1697:        *((char *) &self->_kind) = ((char) self->kind()) + 0b10000000; // Just a trick, we don't want any more variable
call    0 returned 100%
        7: 1698:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 1699:    }
        7: 1700:}
        -: 1701:
function _ZNK11SuperString21ConcatenationSequence13isToBeDeletedEv called 7 returned 100% blocks executed 100%
        7: 1702:bool SuperString::ConcatenationSequence::isToBeDeleted() const {
        7: 1703:    return (((char) this->_kind) & 0b10000000) == 0b10000000;
        -: 1704:}
        -: 1705:
        -: 1706://*-- MultipleSequence (internal)
function _ZN11SuperString16MultipleSequenceC2EPKNS_14StringSequenceEm called 5 returned 100% blocks executed 80%
        5: 1707:SuperString::MultipleSequence::MultipleSequence(const StringSequence *sequence, std::size_t time) {
call    0 returned 100%
        5: 1708:    this->_kind = Kind::MULTIPLE;
        5: 1709:    this->_container._multiple._time = time;
        5: 1710:    this->_container._multiple._sequence = sequence;
        5: 1711:    this->_container._multiple._sequence->addReferencer(this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5: 1712:}
call    0 never executed
        -: 1713:
        8: 1714:SuperString::MultipleSequence::~MultipleSequence() {
        5: 1715:    this->reconstructReferencers();
        5: 1716:    switch(this->kind()) {
        4: 1717:        case Kind::MULTIPLE:
        4: 1718:            this->_container._multiple._sequence->removeReferencer(this);
        5: 1719:            if(this->_container._multiple._sequence->refCount() == 0 &&
        1: 1720:               this->_container._multiple._sequence->freeingCost() <
        1: 1721:               this->_container._multiple._sequence->keepingCost()) {
        1: 1722:                this->_container._multiple._sequence->doDelete();
        -: 1723:            }
        4: 1724:            break;
        1: 1725:        case Kind::RECONSTRUCTED:
        1: 1726:            delete this->_container._reconstructed._data;
        1: 1727:            break;
        -: 1728:    }
        8: 1729:}
------------------
_ZN11SuperString16MultipleSequenceD0Ev:
function _ZN11SuperString16MultipleSequenceD0Ev called 3 returned 100% blocks executed 100%
        3: 1714:SuperString::MultipleSequence::~MultipleSequence() {
        -: 1715:    this->reconstructReferencers();
        -: 1716:    switch(this->kind()) {
        -: 1717:        case Kind::MULTIPLE:
        -: 1718:            this->_container._multiple._sequence->removeReferencer(this);
        -: 1719:            if(this->_container._multiple._sequence->refCount() == 0 &&
        -: 1720:               this->_container._multiple._sequence->freeingCost() <
        -: 1721:               this->_container._multiple._sequence->keepingCost()) {
        -: 1722:                this->_container._multiple._sequence->doDelete();
        -: 1723:            }
        -: 1724:            break;
        -: 1725:        case Kind::RECONSTRUCTED:
        -: 1726:            delete this->_container._reconstructed._data;
        -: 1727:            break;
        -: 1728:    }
        3: 1729:}
call    0 returned 100%
call    1 returned 100%
------------------
_ZN11SuperString16MultipleSequenceD2Ev:
function _ZN11SuperString16MultipleSequenceD2Ev called 5 returned 100% blocks executed 100%
        5: 1714:SuperString::MultipleSequence::~MultipleSequence() {
        5: 1715:    this->reconstructReferencers();
call    0 returned 100%
        5: 1716:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20%
branch  3 taken 0%
        4: 1717:        case Kind::MULTIPLE:
        4: 1718:            this->_container._multiple._sequence->removeReferencer(this);
call    0 returned 100%
        5: 1719:            if(this->_container._multiple._sequence->refCount() == 0 &&
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
branch  3 taken 25% (fallthrough)
branch  4 taken 75%
        1: 1720:               this->_container._multiple._sequence->freeingCost() <
call    0 returned 100%
        1: 1721:               this->_container._multiple._sequence->keepingCost()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1722:                this->_container._multiple._sequence->doDelete();
call    0 returned 100%
        -: 1723:            }
        4: 1724:            break;
        1: 1725:        case Kind::RECONSTRUCTED:
        1: 1726:            delete this->_container._reconstructed._data;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        1: 1727:            break;
        -: 1728:    }
        5: 1729:}
call    0 returned 100%
------------------
        -: 1730:
function _ZNK11SuperString16MultipleSequence4kindEv called 123 returned 100% blocks executed 100%
      123: 1731:SuperString::MultipleSequence::Kind SuperString::MultipleSequence::kind() const {
      123: 1732:    return (Kind) (((char) this->_kind) & 0b01111111);
        -: 1733:}
        -: 1734:
function _ZNK11SuperString16MultipleSequence6lengthEv called 63 returned 100% blocks executed 86%
       63: 1735:std::size_t SuperString::MultipleSequence::length() const {
       63: 1736:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 95%
branch  2 taken 5%
branch  3 taken 0%
       60: 1737:        case Kind::MULTIPLE:
       60: 1738:            return this->_container._multiple._sequence->length() * this->_container._multiple._time;
call    0 returned 100%
        3: 1739:        case Kind::RECONSTRUCTED:
        3: 1740:            return this->_container._reconstructed._dataLength * this->_container._reconstructed._time;
        -: 1741:    }
        -: 1742:    // FIXME: Never goes here! by Hikari
    #####: 1743:}
        -: 1744:
function _ZNK11SuperString16MultipleSequence10codeUnitAtEm called 30 returned 100% blocks executed 100%
       30: 1745:SuperString::Result<int, SuperString::Error> SuperString::MultipleSequence::codeUnitAt(std::size_t index) const {
       30: 1746:    std::size_t length = this->length();
call    0 returned 100%
       30: 1747:    if(index < length) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
       29: 1748:        switch(this->kind()) {
call    0 returned 100%
branch  1 taken 97%
branch  2 taken 3%
branch  3 taken 0%
       28: 1749:            case Kind::MULTIPLE:
       28: 1750:                return this->_container._multiple._sequence->codeUnitAt(
       28: 1751:                        index % this->_container._multiple._sequence->length());
call    0 returned 100%
call    1 returned 100%
        1: 1752:            case Kind::RECONSTRUCTED:
        1: 1753:                return this->_container._reconstructed._data[index % this->_container._reconstructed._dataLength];
call    0 returned 100%
        -: 1754:        }
        -: 1755:    }
        1: 1756:    return Result<int, Error>(Error::RangeError);
call    0 returned 100%
        -: 1757:}
        -: 1758:
        -: 1759:SuperString::Result<SuperString, SuperString::Error>
function _ZNK11SuperString16MultipleSequence9substringEmm called 3 returned 100% blocks executed 100%
        3: 1760:SuperString::MultipleSequence::substring(std::size_t startIndex,
        -: 1761:                                         std::size_t endIndex) const {
        3: 1762:    std::size_t length = this->length();
call    0 returned 100%
        3: 1763:    if(length < startIndex || length < endIndex) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        2: 1764:        return Result<SuperString, Error>(Error::RangeError);
call    0 returned 100%
        -: 1765:    }
        1: 1766:    return Result<SuperString, Error>(Error::Unimplemented);
call    0 returned 100%
        -: 1767:    // FIXME: Not implemented yet by Hikari, always return Error::Unimplemented
        -: 1768:    // SubstringSequence *sequence = new SubstringSequence(this, startIndex, endIndex);
        -: 1769:    // return Result<SuperString, Error>(SuperString(sequence));
        -: 1770:}
        -: 1771:
function _ZNK11SuperString16MultipleSequence5printERSo called 5 returned 100% blocks executed 100%
        5: 1772:bool SuperString::MultipleSequence::print(std::ostream &stream) const {
        5: 1773:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20%
branch  3 taken 0%
        4: 1774:        case Kind::MULTIPLE:
       13: 1775:            for(std::size_t i = 0; i < this->_container._multiple._time; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        9: 1776:                this->_container._multiple._sequence->print(stream);
call    0 returned 100%
        -: 1777:            }
        4: 1778:            break;
        1: 1779:        case Kind::RECONSTRUCTED:
        4: 1780:            for(std::size_t i = 0; i < this->_container._multiple._time; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1781:                SuperString::UTF32::print(stream, (const Byte *) this->_container._reconstructed._data);
call    0 returned 100%
        -: 1782:            }
        1: 1783:            break;
        -: 1784:    }
        5: 1785:    return true;
        -: 1786:}
        -: 1787:
function _ZNK11SuperString16MultipleSequence5printERSomm called 11 returned 100% blocks executed 100%
       11: 1788:bool SuperString::MultipleSequence::print(std::ostream &stream, std::size_t startIndex,
        -: 1789:                                                       std::size_t endIndex) const {
       11: 1790:    bool printing = false;
        -: 1791:    std::size_t unitLength;
       11: 1792:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 73%
branch  2 taken 27%
branch  3 taken 0%
        8: 1793:        case Kind::MULTIPLE:
        8: 1794:            unitLength = this->_container._multiple._sequence->length();
call    0 returned 100%
       15: 1795:            for(std::size_t i = 0; i < this->_container._multiple._time; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       12: 1796:                std::size_t iterationStartIndex = i * unitLength;
       12: 1797:                std::size_t iterationEndIndex = (i + 1) * unitLength;
       12: 1798:                if(!printing) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        8: 1799:                    if(iterationStartIndex <= startIndex) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8: 1800:                        if(endIndex < iterationEndIndex) {
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
        5: 1801:                            this->_container._multiple._sequence->print(stream, startIndex - iterationStartIndex,
call    0 returned 100%
        -: 1802:                                                                        endIndex - iterationStartIndex);
        5: 1803:                            break;
        -: 1804:                        } else {
        3: 1805:                            printing = true;
        3: 1806:                            this->_container._multiple._sequence->print(stream, startIndex - iterationStartIndex,
call    0 returned 100%
        -: 1807:                                                                        unitLength);
        -: 1808:                        }
        -: 1809:                    }
        -: 1810:                } else {
        4: 1811:                    if(endIndex <= iterationEndIndex) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3: 1812:                        this->_container._multiple._sequence->print(stream, 0, endIndex - iterationStartIndex);
call    0 returned 100%
        -: 1813:                    } else {
        1: 1814:                        this->_container._multiple._sequence->print(stream);
call    0 returned 100%
        -: 1815:                    }
        -: 1816:                }
        -: 1817:            }
        8: 1818:            break;
        3: 1819:        case Kind::RECONSTRUCTED:
        3: 1820:            unitLength = this->_container._reconstructed._dataLength;
        9: 1821:            for(std::size_t i = 0; i < this->_container._reconstructed._time; i++) {
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        7: 1822:                std::size_t iterationStartIndex = i * unitLength;
        7: 1823:                std::size_t iterationEndIndex = (i + 1) * unitLength;
        7: 1824:                if(!printing) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        3: 1825:                    if(iterationStartIndex <= startIndex) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3: 1826:                        if(endIndex < iterationEndIndex) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 1827:                            SuperString::UTF32::print(stream, (const Byte *) this->_container._reconstructed._data,
call    0 returned 100%
        -: 1828:                                                      startIndex - iterationStartIndex,
        -: 1829:                                                      endIndex - iterationStartIndex);
        1: 1830:                            break;
        -: 1831:                        } else {
        2: 1832:                            printing = true;
        2: 1833:                            SuperString::UTF32::print(stream, (const Byte *) this->_container._reconstructed._data,
call    0 returned 100%
        -: 1834:                                                      startIndex - iterationStartIndex,
        -: 1835:                                                      unitLength);
        -: 1836:                        }
        -: 1837:                    }
        -: 1838:                } else {
        4: 1839:                    if(endIndex <= iterationEndIndex) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1: 1840:                        SuperString::UTF32::print(stream, (const Byte *) this->_container._reconstructed._data,
call    0 returned 100%
        -: 1841:                                                  0, endIndex - iterationStartIndex);
        -: 1842:                    } else {
        3: 1843:                        SuperString::UTF32::print(stream, (const Byte *) this->_container._reconstructed._data);
call    0 returned 100%
        -: 1844:                    }
        -: 1845:                }
        -: 1846:            }
        3: 1847:            break;
        -: 1848:    }
       11: 1849:    return true;
        -: 1850:}
        -: 1851:
function _ZNK11SuperString16MultipleSequence4trimEv called 1 returned 100% blocks executed 77%
        1: 1852:SuperString SuperString::MultipleSequence::trim() const {
        -: 1853:    // TODO: General code, specify
        1: 1854:    std::size_t startIndex = 0;
        1: 1855:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1856:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1857:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1858:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1859:    }
        1: 1860:    result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2: 1861:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1862:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1863:    }
        2: 1864:    return SuperString();
call    0 returned 100%
        -: 1865:    // FIXME: Substring Is Not implemented yet by Hikari, always return SuperString()
        -: 1866:    // return this->substring(startIndex, endIndex).ok();
        1: 1867:}
call    0 returned 100%
call    1 never executed
        -: 1868:
function _ZNK11SuperString16MultipleSequence8trimLeftEv called 1 returned 100% blocks executed 79%
        1: 1869:SuperString SuperString::MultipleSequence::trimLeft() const {
        -: 1870:    // TODO: General code, specify
        1: 1871:    std::size_t startIndex = 0;
        1: 1872:    Result<int, Error> result = this->codeUnitAt(startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1873:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1874:        result = this->codeUnitAt(++startIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1875:    }
        2: 1876:    return SuperString();
call    0 returned 100%
        -: 1877:    // FIXME: Substring Is Not implemented yet by Hikari, always return SuperString()
        -: 1878:    // return this->substring(startIndex, this->length()).ok();
        1: 1879:}
call    0 returned 100%
call    1 never executed
        -: 1880:
function _ZNK11SuperString16MultipleSequence9trimRightEv called 1 returned 100% blocks executed 80%
        1: 1881:SuperString SuperString::MultipleSequence::trimRight() const {
        -: 1882:    // TODO: General code, specify
        1: 1883:    std::size_t endIndex = this->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1: 1884:    Result<int, Error> result = this->codeUnitAt(endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2: 1885:    while(result.isOk() && SuperString::isWhiteSpace(result.ok())) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 50%
branch  8 taken 50% (fallthrough)
        1: 1886:        result = this->codeUnitAt(--endIndex - 1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        -: 1887:    }
        2: 1888:    return SuperString();
call    0 returned 100%
        -: 1889:    // FIXME: Substring Is Not implemented yet by Hikari, always return SuperString()
        -: 1890:    // return this->substring(0, endIndex).ok();
        1: 1891:}
call    0 returned 100%
call    1 never executed
        -: 1892:
function _ZNK11SuperString16MultipleSequence11keepingCostEv called 4 returned 100% blocks executed 86%
        4: 1893:std::size_t SuperString::MultipleSequence::keepingCost() const {
        4: 1894:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 75%
branch  2 taken 25%
branch  3 taken 0%
        3: 1895:        case Kind::MULTIPLE:
        3: 1896:            return sizeof(MultipleSequence) + this->_container._multiple._sequence->keepingCost();
call    0 returned 100%
        1: 1897:        case Kind::RECONSTRUCTED:
        1: 1898:            return sizeof(MultipleSequence) + this->_container._reconstructed._dataLength * sizeof(int);
        -: 1899:    }
        -: 1900:    // FIXME: Never goes here! by Hikari
        -: 1901:    // return 0;
    #####: 1902:}
        -: 1903:
function _ZNK11SuperString16MultipleSequence18reconstructionCostEPKNS_14StringSequenceE called 2 returned 100% blocks executed 86%
        2: 1904:std::size_t SuperString::MultipleSequence::reconstructionCost(const StringSequence *sequence) const {
        2: 1905:    switch(this->kind()) {
call    0 returned 100%
branch  1 taken 50%
branch  2 taken 50%
branch  3 taken 0%
        1: 1906:        case Kind::MULTIPLE:
        1: 1907:            return sizeof(SubstringSequence) +
        1: 1908:                   this->_container._multiple._sequence->length() * this->_container._multiple._time * 2;
call    0 returned 100%
        1: 1909:        case Kind::RECONSTRUCTED:
        1: 1910:            return 0;
        -: 1911:    }
        -: 1912:    // FIXME: Never goes here! by Hikari
    #####: 1913:}
        -: 1914:
function _ZNK11SuperString16MultipleSequence11reconstructEPKNS_14StringSequenceE called 1 returned 100% blocks executed 90%
        1: 1915:void SuperString::MultipleSequence::reconstruct(const StringSequence *sequence) const {
        1: 1916:    MultipleSequence *self = ((MultipleSequence *) ((std::size_t) this));
        1: 1917:    if(self->kind() == Kind::MULTIPLE) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1918:        struct MultipleMetaInfo old = self->_container._multiple;
        1: 1919:        if(sequence == old._sequence) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1920:            struct ReconstructedMetaInfo nw;
        1: 1921:            nw._time = old._time;
        1: 1922:            nw._dataLength = old._sequence->length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       1*: 1923:            nw._data = new int[nw._dataLength];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       11: 1924:            for(std::size_t i = 0; i < nw._dataLength; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10: 1925:                nw._data[i] = old._sequence->codeUnitAt(i).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        -: 1926:            }
        1: 1927:            old._sequence->removeReferencer(self);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       1*: 1928:            if(old._sequence->refCount() == 0 && old._sequence->freeingCost() < old._sequence->keepingCost()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
        1: 1929:                old._sequence->doDelete();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -: 1930:            }
        1: 1931:            self->_kind = Kind::RECONSTRUCTED;
        1: 1932:            self->_container._reconstructed = nw;
        -: 1933:        }
        -: 1934:    }
        1: 1935:}
        -: 1936:
function _ZNK11SuperString16MultipleSequence8doDeleteEv called 3 returned 100% blocks executed 100%
        3: 1937:void SuperString::MultipleSequence::doDelete() const {
        3: 1938:    MultipleSequence *self = ((MultipleSequence *) (std::size_t) this);
        3: 1939:    if(!self->isToBeDeleted()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        3: 1940:        self->_kind = (Kind) (((char) self->kind()) + 0b10000000); // Just a trick, we don't want any more variable
call    0 returned 100%
        3: 1941:        delete self;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 1942:    }
        3: 1943:}
        -: 1944:
function _ZNK11SuperString16MultipleSequence13isToBeDeletedEv called 3 returned 100% blocks executed 100%
        3: 1945:bool SuperString::MultipleSequence::isToBeDeleted() const {
        3: 1946:    return (((char) this->_kind) & 0b10000000) == 0b10000000;
        -: 1947:}
        -: 1948:
        -: 1949://*-- SuperString::ASCII
function _ZN11SuperString5ASCII6lengthEPKh called 7 returned 100% blocks executed 100%
        7: 1950:std::size_t SuperString::ASCII::length(const SuperString::Byte *bytes) {
        7: 1951:    const Byte *pointer = bytes;
       25: 1952:    while(*pointer != 0x00) {
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
       18: 1953:        pointer++;
        -: 1954:    }
        7: 1955:    return pointer - bytes;
        -: 1956:}
        -: 1957:
function _ZN11SuperString5ASCII10codeUnitAtEPKhm called 24 returned 100% blocks executed 100%
       24: 1958:int SuperString::ASCII::codeUnitAt(const SuperString::Byte *bytes, std::size_t index) {
       24: 1959:    return ((int) *(bytes + index));
        -: 1960:}
        -: 1961:
function _ZN11SuperString5ASCII5printERSoPKh called 2 returned 100% blocks executed 100%
        2: 1962:void SuperString::ASCII::print(std::ostream &stream, const SuperString::Byte *bytes) {
        2: 1963:    stream << (const char *) bytes;
call    0 returned 100%
        2: 1964:}
        -: 1965:
function _ZN11SuperString5ASCII5printERSoPKhmm called 2 returned 100% blocks executed 100%
        2: 1966:void SuperString::ASCII::print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t startIndex,
        -: 1967:                               std::size_t endIndex) {
        2: 1968:    stream.write(((char *) (bytes + startIndex)), endIndex - startIndex);
call    0 returned 100%
        2: 1969:}
        -: 1970:
        -: 1971:SuperString::Pair<std::size_t, std::size_t>
function _ZN11SuperString5ASCII4trimEPKhm called 2 returned 100% blocks executed 100%
        2: 1972:SuperString::ASCII::trim(const SuperString::Byte *bytes, std::size_t length) {
        2: 1973:    std::size_t startIndex = 0;
        2: 1974:    std::size_t endIndex = length;
        2: 1975:    char c = *(bytes + startIndex);
        3: 1976:    while(c != 0x00 && SuperString::isWhiteSpace(c)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 33%
branch  6 taken 67% (fallthrough)
        1: 1977:        c = *(bytes + (++startIndex));
        -: 1978:    }
        2: 1979:    c = *(bytes + (endIndex - 1));
        3: 1980:    while(endIndex > 0 && SuperString::isWhiteSpace(c)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 33%
branch  6 taken 67% (fallthrough)
        1: 1981:        c = *(bytes + (--endIndex - 1));
        -: 1982:    }
        2: 1983:    return Pair<std::size_t, std::size_t>(startIndex, endIndex);
call    0 returned 100%
        -: 1984:}
        -: 1985:
function _ZN11SuperString5ASCII8trimLeftEPKh called 2 returned 100% blocks executed 100%
        2: 1986:std::size_t SuperString::ASCII::trimLeft(const SuperString::Byte *bytes) {
        2: 1987:    std::size_t startIndex = 0;
        2: 1988:    char c = *(bytes + startIndex);
        3: 1989:    while(c != 0x00 && SuperString::isWhiteSpace(c)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 33%
branch  6 taken 67% (fallthrough)
        1: 1990:        c = *(bytes + ++startIndex);
        -: 1991:    }
        2: 1992:    return startIndex;
        -: 1993:}
        -: 1994:
function _ZN11SuperString5ASCII9trimRightEPKhm called 2 returned 100% blocks executed 100%
        2: 1995:std::size_t SuperString::ASCII::trimRight(const SuperString::Byte *bytes, std::size_t length) {
        2: 1996:    std::size_t endIndex = length;
        2: 1997:    char c = *(bytes + (endIndex - 1));
        3: 1998:    while(endIndex > 0 && SuperString::isWhiteSpace(c)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 33%
branch  6 taken 67% (fallthrough)
        1: 1999:        c = *(bytes + (--endIndex - 1));
        -: 2000:    }
        2: 2001:    return endIndex;
        -: 2002:}
        -: 2003:
        -: 2004:// SuperString::UTF8
function _ZN11SuperString4UTF86lengthEPKh called 35 returned 100% blocks executed 100%
       35: 2005:std::size_t SuperString::UTF8::length(const SuperString::Byte *bytes) {
       35: 2006:    std::size_t length = 0;
       35: 2007:    const Byte *pointer = bytes;
      137: 2008:    while(*pointer != 0x00) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      103: 2009:        if((*pointer & 0xf8) == 0xf0) { pointer += 4; }
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      102: 2010:        else if((*pointer & 0xf0) == 0xe0) { pointer += 3; }
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      101: 2011:        else if((*pointer & 0xe0) == 0xc0) { pointer += 2; }
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      100: 2012:        else if((*pointer & 0x80) == 0x00) { pointer++; }
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        1: 2013:        else return 0;
      102: 2014:        length++;
        -: 2015:    }
       34: 2016:    return length;
        -: 2017:}
        -: 2018:
        -: 2019:SuperString::Pair<std::size_t, std::size_t>
function _ZN11SuperString4UTF821lengthAndMemoryLengthEPKh called 8 returned 100% blocks executed 81%
        8: 2020:SuperString::UTF8::lengthAndMemoryLength(const SuperString::Byte *bytes) {
        8: 2021:    std::size_t length = 0;
        8: 2022:    const Byte *pointer = bytes;
       31: 2023:    while(*pointer != 0x00) {
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
      24*: 2024:        if((*pointer & 0xf8) == 0xf0) { pointer += 4; }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      24*: 2025:        else if((*pointer & 0xf0) == 0xe0) { pointer += 3; }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      24*: 2026:        else if((*pointer & 0xe0) == 0xc0) { pointer += 2; }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       24: 2027:        else if((*pointer & 0x80) == 0x00) { pointer++; }
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
        1: 2028:        else return Pair<std::size_t, std::size_t>(0, 0); // handle error
call    0 returned 100%
       23: 2029:        length++;
        -: 2030:    }
        7: 2031:    return Pair<std::size_t, std::size_t>(length, pointer - bytes + 1);
call    0 returned 100%
        -: 2032:}
        -: 2033:
        -: 2034:SuperString::Result<int, SuperString::Error>
function _ZN11SuperString4UTF810codeUnitAtEPKhm called 326 returned 100% blocks executed 100%
      326: 2035:SuperString::UTF8::codeUnitAt(const SuperString::Byte *bytes, std::size_t index) {
      326: 2036:    std::size_t i = 0;
      326: 2037:    const Byte *pointer = bytes;
      768: 2038:    while(*pointer != 0x00) {
branch  0 taken 100%
branch  1 taken 1% (fallthrough)
      767: 2039:        int codeUnit = 0;
      767: 2040:        int remainingBytes = 0;
      767: 2041:        if((*pointer & 0xf8) == 0xf0) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        1: 2042:            codeUnit = *pointer & 0x07;
        1: 2043:            remainingBytes = 3;
      766: 2044:        } else if((*pointer & 0xf0) == 0xe0) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        1: 2045:            codeUnit = *pointer & 0x0f;
        1: 2046:            remainingBytes = 2;
      765: 2047:        } else if((*pointer & 0xe0) == 0xc0) {
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
        1: 2048:            codeUnit = *pointer & 0x1f;
        1: 2049:            remainingBytes = 1;
      764: 2050:        } else if((*pointer & 0x80) == 0x00) {
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      763: 2051:            codeUnit = *pointer;
        -: 2052:        } else {
        1: 2053:            return Result<int, SuperString::Error>(Error::InvalidByteSequence);
call    0 returned 100%
        -: 2054:        }
      772: 2055:        while(remainingBytes-- > 0) {
branch  0 taken 1%
branch  1 taken 99% (fallthrough)
        6: 2056:            pointer++;
        6: 2057:            codeUnit = codeUnit << 6 | (*pointer & 0x3f);
        -: 2058:        }
      766: 2059:        if(i == index) {
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
      324: 2060:            return Result<int, SuperString::Error>(codeUnit);
call    0 returned 100%
        -: 2061:        }
      442: 2062:        pointer++;
      442: 2063:        i++;
        -: 2064:    }
        1: 2065:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -: 2066:}
        -: 2067:
function _ZN11SuperString4UTF85printERSoPKh called 18 returned 100% blocks executed 100%
       18: 2068:void SuperString::UTF8::print(std::ostream &stream, const SuperString::Byte *bytes) {
       18: 2069:    stream << bytes;
call    0 returned 100%
       18: 2070:}
        -: 2071:
function _ZN11SuperString4UTF85printERSoPKhmm called 19 returned 100% blocks executed 74%
       19: 2072:void SuperString::UTF8::print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t startIndex,
        -: 2073:                              std::size_t endIndex) {
       19: 2074:    Result<Pair<std::size_t, std::size_t>, Error> result = SuperString::UTF8::rangeIndexes(bytes, startIndex, endIndex);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       19: 2075:    if(result.isOk()) {
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
       17: 2076:        stream.write(((char *) (bytes + result.ok().first())), result.ok().second() - result.ok().first());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
        -: 2077:    }
       19: 2078:}
call    0 returned 100%
call    1 never executed
        -: 2079:
        -: 2080:SuperString::Result<SuperString::Pair<std::size_t, std::size_t>, SuperString::Error>
function _ZN11SuperString4UTF812rangeIndexesEPKhmm called 19 returned 100% blocks executed 89%
       19: 2081:SuperString::UTF8::rangeIndexes(
        -: 2082:        const SuperString::Byte *bytes, std::size_t startIndex, std::size_t endIndex) {        
       19: 2083:    std::size_t i = 0;
        -: 2084:    std::size_t startOffset, endOffset;
       19: 2085:    bool first = false, second = false;
       19: 2086:    const Byte *pointer = bytes;
       83: 2087:    while(*pointer != '\0') {
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
       73: 2088:        if(!first) {
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
       31: 2089:            if(i == startIndex) {
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
       19: 2090:                first = true;
       19: 2091:                startOffset = ((std::size_t) pointer) - ((std::size_t) bytes);
        -: 2092:            }
        -: 2093:        } else {
       42: 2094:            if(i == endIndex) {
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
        8: 2095:                second = true;
        8: 2096:                endOffset = ((std::size_t) pointer) - ((std::size_t) bytes);
        8: 2097:                break;
        -: 2098:            }
        -: 2099:        }
      65*: 2100:        if((*pointer & 0xf8) == 0xf0) { pointer += 4; }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      65*: 2101:        else if((*pointer & 0xf0) == 0xe0) { pointer += 3; }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      65*: 2102:        else if((*pointer & 0xe0) == 0xc0) { pointer += 2; }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       65: 2103:        else if((*pointer & 0x80) == 0x00) { pointer++; }
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        1: 2104:        else return Result<Pair<std::size_t, std::size_t>, Error>(Error::InvalidByteSequence);
call    0 returned 100%
       64: 2105:        i++;
        -: 2106:    }
       18: 2107:    if(!second) {
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
       10: 2108:        if(i == endIndex) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
        9: 2109:            second = true;
        9: 2110:            endOffset = ((std::size_t) pointer) - ((std::size_t) bytes);
        -: 2111:        }
        -: 2112:    }
       18: 2113:    if(first && second) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
       17: 2114:        return Result<Pair<std::size_t, std::size_t>, Error>(Pair<std::size_t, std::size_t>(startOffset, endOffset));
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -: 2115:    }
        1: 2116:    return Result<Pair<std::size_t, std::size_t>, Error>(Error::RangeError);
call    0 returned 100%
        -: 2117:}
        -: 2118:
function _ZN11SuperString4UTF814codeUnitToCharEi called 142 returned 100% blocks executed 100%
      142: 2119:SuperString::Pair<SuperString::Byte *, std::size_t> SuperString::UTF8::codeUnitToChar(int c) {
      142: 2120:    char numBytes = 0;
        -: 2121:    Byte byte1, byte2, byte3, byte4;
      142: 2122:    if(c < 0x0080) {
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      132: 2123:        byte1 = (Byte) c;
      132: 2124:        numBytes = 1;
       10: 2125:    } else if(c < 0x0800) {
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        6: 2126:        byte1 = (Byte) ((c >> 6) + (((Byte) 0b110) << 5));
        6: 2127:        byte2 = (Byte) ((((Byte) 0x2) << 6) + (c & 0b00000111111));
        6: 2128:        numBytes = 2;
        4: 2129:    } else if(c < 0x10000) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1: 2130:        byte1 = (Byte) ((c >> 12) + (((Byte) 0b1110) << 4));
        1: 2131:        byte2 = (Byte) ((((Byte) 0x2) << 6) + (c >> 6 & 0b0000111111));
        1: 2132:        byte3 = (Byte) ((((Byte) 0x2) << 6) + (c & 0b0000000000111111));
        1: 2133:        numBytes = 3;
        3: 2134:    } else if(c < 0x200000) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2: 2135:        byte1 = (Byte) ((c >> 18) + (((Byte) 0b11110) << 3));
        2: 2136:        byte2 = (Byte) ((((Byte) 0x2) << 6) + (c >> 12 & 0b000111111));
        2: 2137:        byte3 = (Byte) ((((Byte) 0x2) << 6) + (c >> 6 & 0b000000000111111));
        2: 2138:        byte4 = (Byte) ((((Byte) 0x2) << 6) + (c & 0b00000000000000111111));
        2: 2139:        numBytes = 4;
        -: 2140:    }
      142: 2141:    Byte *bytes = new Byte[numBytes];
call    0 returned 100%
      142: 2142:    std::size_t j = 0;
      297: 2143:    while(j < numBytes) {
branch  0 taken 52%
branch  1 taken 48% (fallthrough)
      155: 2144:        switch(j) {
branch  0 taken 91%
branch  1 taken 6%
branch  2 taken 2%
branch  3 taken 1%
branch  4 taken 0%
      141: 2145:            case 0:
      141: 2146:                bytes[j] = byte1;
      141: 2147:                break;
        9: 2148:            case 1:
        9: 2149:                bytes[j] = byte2;
        9: 2150:                break;
        3: 2151:            case 2:
        3: 2152:                bytes[j] = byte3;
        3: 2153:                break;
        2: 2154:            case 3:
        2: 2155:                bytes[j] = byte4;
        2: 2156:                break;
      155: 2157:            default:;
        -: 2158:        }
      155: 2159:        j++;
        -: 2160:    }
      142: 2161:    return Pair<Byte *, std::size_t>(bytes, numBytes);
call    0 returned 100%
        -: 2162:}
        -: 2163:
        -: 2164:// SuperString::UTF16BE
function _ZN11SuperString7UTF16BE6lengthEPKh called 2 returned 100% blocks executed 100%
        2: 2165:std::size_t SuperString::UTF16BE::length(const SuperString::Byte *bytes) {
        2: 2166:    const Byte *pointer = bytes;
        9: 2167:    while(*pointer != 0x00 || *(pointer + 1) != 0x00) {
branch  0 taken 22%
branch  1 taken 78% (fallthrough)
branch  2 taken 71%
branch  3 taken 29% (fallthrough)
        7: 2168:        pointer += 2;
        -: 2169:    }
        2: 2170:    return (pointer - bytes) / 2;
        -: 2171:}
        -: 2172:
        -: 2173:SuperString::Pair<std::size_t, std::size_t>
function _ZN11SuperString7UTF16BE21lengthAndMemoryLengthEPKh called 3 returned 100% blocks executed 90%
        3: 2174:SuperString::UTF16BE::lengthAndMemoryLength(const SuperString::Byte *bytes) {
        3: 2175:    std::size_t length = 0;
        3: 2176:    const Byte *pointer = bytes;
       18: 2177:    while(*pointer != 0x00 || *(pointer + 1) != 0x00) {
branch  0 taken 44%
branch  1 taken 56% (fallthrough)
branch  2 taken 70%
branch  3 taken 30% (fallthrough)
      15*: 2178:        if((*pointer & 0xfc) == 0xd8) { pointer += 4; }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15: 2179:        else { pointer += 2; }
       15: 2180:        length++;
        -: 2181:    }
        3: 2182:    return Pair<std::size_t, std::size_t>(length, pointer - bytes + 2);
call    0 returned 100%
        -: 2183:}
        -: 2184:
        -: 2185:SuperString::Result<int, SuperString::Error>
function _ZN11SuperString7UTF16BE10codeUnitAtEPKhm called 20 returned 100% blocks executed 100%
       20: 2186:SuperString::UTF16BE::codeUnitAt(const SuperString::Byte *bytes, std::size_t index) {
       20: 2187:    std::size_t i = 0;
       20: 2188:    const Byte *pointer = bytes;
       53: 2189:    while(*pointer != 0x00 || *(pointer + 1) != 0x00) {
branch  0 taken 4%
branch  1 taken 96% (fallthrough)
branch  2 taken 98%
branch  3 taken 2% (fallthrough)
       52: 2190:        int codeUnit = 0;
       52: 2191:        if((*pointer & 0xfc) == 0xd8) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        2: 2192:            codeUnit = (*pointer & 0x03) << 18;
        2: 2193:            codeUnit += *(pointer + 1) << 10;
        2: 2194:            codeUnit += (*(pointer + 2) & 0x03) << 8;
        2: 2195:            codeUnit += *(pointer + 3);
        2: 2196:            pointer += 4;
        -: 2197:        } else {
       50: 2198:            codeUnit = (*pointer << 8) + (*(pointer + 1));
       50: 2199:            pointer += 2;
        -: 2200:        }
       52: 2201:        if(i == index) {
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
       19: 2202:            return Result<int, SuperString::Error>(codeUnit);
call    0 returned 100%
        -: 2203:        }
       33: 2204:        i++;
        -: 2205:    }
        1: 2206:    return Result<int, SuperString::Error>(Error::RangeError);
call    0 returned 100%
        -: 2207:}
        -: 2208:
function _ZN11SuperString7UTF16BE5printERSoPKhm called 3 returned 100% blocks executed 100%
        3: 2209:void SuperString::UTF16BE::print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t length) {
        3: 2210:    SuperString::UTF16BE::print(stream, bytes, 0, length);
call    0 returned 100%
        3: 2211:}
        -: 2212:
function _ZN11SuperString7UTF16BE5printERSoPKhmm called 7 returned 100% blocks executed 100%
        7: 2213:void SuperString::UTF16BE::print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t startIndex,
        -: 2214:                                 std::size_t endIndex) {
        7: 2215:    std::size_t i = 0;
        7: 2216:    const Byte *pointer = bytes;
       32: 2217:    while((*pointer != 0x00 || *(pointer + 1) != 0x00) && i < endIndex) {
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 84% (fallthrough)
branch  3 taken 16%
branch  4 taken 93%
branch  5 taken 7% (fallthrough)
       25: 2218:        int codeUnit = 0;
       25: 2219:        if((*pointer & 0xfc) == 0xd8) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        1: 2220:            codeUnit = (*pointer & 0x03) << 18;
        1: 2221:            codeUnit += *(pointer + 1) << 10;
        1: 2222:            codeUnit += (*(pointer + 2) & 0x03) << 8;
        1: 2223:            codeUnit += *(pointer + 3);
        1: 2224:            pointer += 4;
        -: 2225:        } else {
       24: 2226:            codeUnit = (*pointer << 8) + (*(pointer + 1));
       24: 2227:            pointer += 2;
        -: 2228:        }
       25: 2229:        if(startIndex <= i) {
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
       21: 2230:            Pair<Byte *, std::size_t> encoded = SuperString::UTF8::codeUnitToChar(codeUnit);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       21: 2231:            stream.write((const char *) encoded.first(), encoded.second());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       21: 2232:            delete encoded.first();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
        -: 2233:        }
       25: 2234:        i++;
        -: 2235:    }
        7: 2236:}
        -: 2237:
        -: 2238:// SuperString::UTF32
function _ZN11SuperString5UTF326lengthEPKh called 6 returned 100% blocks executed 100%
        6: 2239:std::size_t SuperString::UTF32::length(const SuperString::Byte *bytes) {
        6: 2240:    const Byte *pointer = bytes;
       32: 2241:    while(*((int *) pointer) != 0x00) {
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
       26: 2242:        pointer += 4;
        -: 2243:    }
        6: 2244:    return (pointer - bytes) / 4;
        -: 2245:}
        -: 2246:
        -: 2247:// FIXME: DEAD METHOD TO IGNORE by Hikari
        -: 2248:// SuperString::Pair<std::size_t, std::size_t> SuperString::UTF32::lengthAndMemoryLength(
        -: 2249://         const SuperString::Byte *bytes) {
        -: 2250://     std::size_t length = 0;
        -: 2251://     const Byte *pointer = bytes;
        -: 2252://     while(*((int *) pointer) != 0x00) {
        -: 2253://         pointer += 4;
        -: 2254://         length++;
        -: 2255://     }
        -: 2256://     return Pair<std::size_t, std::size_t>(length, pointer - bytes + 4);
        -: 2257:// }
        -: 2258:
function _ZN11SuperString5UTF3210codeUnitAtEPKhm called 2 returned 100% blocks executed 100%
        2: 2259:int SuperString::UTF32::codeUnitAt(const SuperString::Byte *bytes, std::size_t index) {
        2: 2260:    return *(((int *) bytes) + index);
        -: 2261:}
        -: 2262:
function _ZN11SuperString5UTF325printERSoPKh called 13 returned 100% blocks executed 100%
       13: 2263:void SuperString::UTF32::print(std::ostream &stream, const SuperString::Byte *bytes) {
       13: 2264:    const Byte *pointer = bytes;
      111: 2265:    while(*((int *) pointer) != 0x00) {
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
       98: 2266:        int codeUnit = *((int *) pointer);
       98: 2267:        Pair<Byte *, std::size_t> encoded = SuperString::UTF8::codeUnitToChar(codeUnit);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       98: 2268:        stream.write((const char *) encoded.first(), encoded.second());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       98: 2269:        delete encoded.first();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
       98: 2270:        pointer += 4;
        -: 2271:    }
       13: 2272:}
        -: 2273:
function _ZN11SuperString5UTF325printERSoPKhmm called 12 returned 100% blocks executed 100%
       12: 2274:void SuperString::UTF32::print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t startIndex,
        -: 2275:                               std::size_t endIndex) {
       35: 2276:    for(std::size_t i = startIndex; i < endIndex; i++) {
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
       23: 2277:        int codeUnit = *(((int *) bytes) + i);
       23: 2278:        Pair<Byte *, std::size_t> encoded = SuperString::UTF8::codeUnitToChar(codeUnit);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       23: 2279:        stream.write((const char *) encoded.first(), encoded.second());
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
       23: 2280:        delete encoded.first();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
        -: 2281:    }
       12: 2282:}
        -: 2283:
        -: 2284:SuperString::Pair<std::size_t, std::size_t>
function _ZN11SuperString5UTF324trimEPKhm called 2 returned 100% blocks executed 100%
        2: 2285:SuperString::UTF32::trim(const SuperString::Byte *bytes, std::size_t length) {
        2: 2286:    std::size_t startIndex = 0;
        2: 2287:    std::size_t endIndex = length;
        2: 2288:    int c = *(((const int *) bytes) + startIndex);
        4: 2289:    while(c != 0x00 && SuperString::isWhiteSpace(c)) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
branch  5 taken 50%
branch  6 taken 50% (fallthrough)
        2: 2290:        c = *(((const int *) bytes) + ++startIndex);
        -: 2291:    }
        2: 2292:    c = *(((const int *) bytes) + (endIndex - 1));
        3: 2293:    while(endIndex > 0 && SuperString::isWhiteSpace(c)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 33%
branch  6 taken 67% (fallthrough)
        1: 2294:        c = *(((const int *) bytes) + (--endIndex - 1));
        -: 2295:    }
        2: 2296:    return Pair<std::size_t, std::size_t>(startIndex, endIndex);
call    0 returned 100%
        -: 2297:}
        -: 2298:
function _ZN11SuperString5UTF328trimLeftEPKh called 2 returned 100% blocks executed 100%
        2: 2299:std::size_t SuperString::UTF32::trimLeft(const SuperString::Byte *bytes) {
        2: 2300:    std::size_t startIndex = 0;
        2: 2301:    int c = *(((const int *) bytes) + startIndex);
        4: 2302:    while(c != 0x00 && SuperString::isWhiteSpace(c)) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
call    2 returned 100%
branch  3 taken 67% (fallthrough)
branch  4 taken 33%
branch  5 taken 50%
branch  6 taken 50% (fallthrough)
        2: 2303:        c = *(((const int *) bytes) + ++startIndex);
        -: 2304:    }
        2: 2305:    return startIndex;
        -: 2306:}
        -: 2307:
function _ZN11SuperString5UTF329trimRightEPKhm called 2 returned 100% blocks executed 100%
        2: 2308:std::size_t SuperString::UTF32::trimRight(const SuperString::Byte *bytes, std::size_t length) {
        2: 2309:    std::size_t endIndex = length;
        2: 2310:    int c = *(((const int *) bytes) + (endIndex - 1));
        3: 2311:    while(endIndex > 0 && SuperString::isWhiteSpace(c)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 33% (fallthrough)
branch  4 taken 67%
branch  5 taken 33%
branch  6 taken 67% (fallthrough)
        1: 2312:        c = *(((const int *) bytes) + (--endIndex - 1));
        -: 2313:    }
        2: 2314:    return endIndex;
        -: 2315:}
        -: 2316:
        -: 2317://
function _ZlsRSoRK11SuperString called 1 returned 100% blocks executed 100%
        1: 2318:std::ostream &operator<<(std::ostream &stream, const SuperString &string) {
        1: 2319:    string.print(stream);
call    0 returned 100%
        1: 2320:    return stream;
        -: 2321:}
