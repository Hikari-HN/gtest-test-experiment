        -:    0:Source:include/SuperString.hh
        -:    0:Graph:test.gcno
        -:    0:Data:test.gcda
        -:    0:Runs:1
        -:    1:#ifndef BOUTGLAY_SUPERSTRING_HEADER
        -:    2:#define BOUTGLAY_SUPERSTRING_HEADER
        -:    3:
        -:    4:/*-- imports --*/
        -:    5:
        -:    6:// std
        -:    7:#include <cstddef>
        -:    8:#include <iostream>
        -:    9:
        -:   10:/*-- declarations --*/
        -:   11:
        -:   12:/**
        -:   13: * `SuperString` is an automatically garbage collected string designed
        -:   14: * with memory efficiency in mind.
        -:   15: */
        -:   16:class SuperString {
        -:   17:public:
        -:   18:    //*-- Encoding
        -:   19:    /**
        -:   20:     * Supported encoding.
        -:   21:     */
        -:   22:    enum class Encoding {
        -:   23:        ASCII,
        -:   24:        UTF8,
        -:   25:        UTF16BE,
        -:   26:        UTF32
        -:   27:        // TODO: Support LE version of UTF-16
        -:   28:    };
        -:   29:
        -:   30:    //*-- Error
        -:   31:    /**
        -:   32:     * Possible errors that SuperString methods can produce.
        -:   33:     */
        -:   34:    enum class Error {
        -:   35:        Unimplemented, // temporary
        -:   36:        Unexpected, // Something that never happen, Unreachable code
        -:   37:        RangeError,
        -:   38:        InvalidByteSequence,
        -:   39:        NotFound
        -:   40:    };
        -:   41:
        -:   42:    //*-- Byte
        -:   43:    /**
        -:   44:     * An unsigned 8-bit type, mainly to represent raw data.
        -:   45:     */
        -:   46:    typedef unsigned char Byte;
        -:   47:
        -:   48:    //*-- Result<T, E>
        -:   49:    /**
        -:   50:     * `Result<T, E>` is the type used for returning and propagating errors.
        -:   51:     */
        -:   52:    template<class T, class E>
        -:   53:    class Result {
        -:   54:    private:
        -:   55:        char *_ok;
        -:   56:        char *_err;
        -:   57:
        -:   58:    public:
        -:   59:        //*- Constructors
        -:   60:
        -:   61:        Result();
        -:   62:
        -:   63:        Result(T ok);
        -:   64:
        -:   65:        Result(E err);
        -:   66:
        -:   67:        Result(const SuperString::Result<T, E> &other) /*copy*/;
        -:   68:
        -:   69:        //*- Destructor
        -:   70:
        -:   71:        ~Result();
        -:   72:
        -:   73:        //*- Getters
        -:   74:
        -:   75:        /**
        -:   76:         * Returns the error value.
        -:   77:         */
        -:   78:        E err() const;
        -:   79:
        -:   80:        /**
        -:   81:         * Returns true if the result is Ok.
        -:   82:         */
        -:   83:        bool isErr() const;
        -:   84:
        -:   85:        /**
        -:   86:         * Returns true if the result is Err.
        -:   87:         */
        -:   88:        bool isOk() const;
        -:   89:
        -:   90:        /**
        -:   91:         * Returns the success value.
        -:   92:         */
        -:   93:        T ok() const;
        -:   94:
        -:   95:        //*- Setters
        -:   96:
        -:   97:        /**
        -:   98:         * Sets this to Err with given [err] value.
        -:   99:         */
        -:  100:        void err(E err);
        -:  101:
        -:  102:        /**
        -:  103:         * Sets this to Ok with given [ok] value.
        -:  104:         */
        -:  105:        void ok(T ok);
        -:  106:
        -:  107:        //*- Operators
        -:  108:
        -:  109:        SuperString::Result<T, E> &operator=(const SuperString::Result<T, E> &other);
        -:  110:    };
        -:  111:
        -:  112:    //*-- SuperString
        -:  113:public:
        -:  114:    //*- Constructors
        -:  115:
        -:  116:    /**
        -:  117:     * Constructs a new empty string.
        -:  118:     */
        -:  119:    SuperString();
        -:  120:
        -:  121:    /**
        -:  122:     * Constructs a new string from [other].
        -:  123:     */
        -:  124:    SuperString(const SuperString &other) /*copy*/;
        -:  125:
        -:  126:    //*- Destructor
        -:  127:
        -:  128:    /**
        -:  129:     * Destructs this string.
        -:  130:     */
        -:  131:    ~SuperString();
        -:  132:
        -:  133:    /* FIXME
        -:  134:     * Use for testing by Hikari.
        -:  135:     */
        -:  136:    bool testrefRelease_case0() const;
        -:  137:
        -:  138:    //*- Getters
        -:  139:
        -:  140:    /**
        -:  141:     * Returns true if this string is empty.
        -:  142:     */
        -:  143:    bool isEmpty() const;
        -:  144:
        -:  145:    /**
        -:  146:     * Returns true if this string is not empty.
        -:  147:     */
        -:  148:    bool isNotEmpty() const;
        -:  149:
        -:  150:    /* FIXME
        -:  151:     * Use for testing by Hikari.
        -:  152:     */
        -:  153:    bool isSequenceEmpty() const;
        -:  154:
        -:  155:    /* FIXME
        -:  156:     * Use for testing by Hikari.
        -:  157:     */
        -:  158:    bool isSequenceNotEmpty() const;
        -:  159:
        -:  160:    /* FIXME
        -:  161:     * Use for testing by Hikari.
        -:  162:     */
        -:  163:    bool testfreeingCost_notnull() const;
        -:  164:
        -:  165:    /* FIXME
        -:  166:     * Use for testing by Hikari.
        -:  167:     */
        -:  168:    bool testbad_substringMatches() const;
        -:  169:
        -:  170:    /* FIXME
        -:  171:     * Use for testing by Hikari.
        -:  172:     */
        -:  173:    bool testCopyASCIISequence() const;
        -:  174:
        -:  175:    /* FIXME
        -:  176:     * Use for testing by Hikari.
        -:  177:     */
        -:  178:    bool testCopyUTF8Sequence() const;
        -:  179:
        -:  180:    /* FIXME
        -:  181:     * Use for testing by Hikari.
        -:  182:     */
        -:  183:    bool testCopyUTF16BESequence() const;
        -:  184:
        -:  185:    /* FIXME
        -:  186:     * Use for testing by Hikari.
        -:  187:     */
        -:  188:    bool testCopyUTF32Sequence() const;
        -:  189:
        -:  190:
        -:  191:    /* FIXME
        -:  192:     * Use for testing by Hikari.
        -:  193:     */
        -:  194:    bool testSubstringSequence_ref() const;
        -:  195:    
        -:  196:    /* FIXME
        -:  197:     * Use for testing by Hikari.
        -:  198:     */
        -:  199:    bool testSubstringSequence_substr() const;
        -:  200:
        -:  201:    /* FIXME
        -:  202:     * Use for testing by Hikari.
        -:  203:     */
        -:  204:    bool testSubstringSequence_trim() const;
        -:  205:    
        -:  206:    /* FIXME
        -:  207:     * Use for testing by Hikari.
        -:  208:     */
        -:  209:    bool testConcatenationSequence_simple() const;
        -:  210:    
        -:  211:    /* FIXME
        -:  212:     * Use for testing by Hikari.
        -:  213:     */
        -:  214:    bool testMultipleSequence_simple() const;
        -:  215:
        -:  216:    /* FIXME
        -:  217:     * Use for testing by Hikari.
        -:  218:     */
        -:  219:    bool testUTF16BE_simple() const;
        -:  220:
        -:  221:    /* FIXME
        -:  222:     * Use for testing by Hikari.
        -:  223:     */
        -:  224:    bool testUTF32_simple() const;
        -:  225:
        -:  226:    /**
        -:  227:     * Returns the length of this string.
        -:  228:     */
        -:  229:    std::size_t length() const;
        -:  230:
        -:  231:    //*- Methods
        -:  232:
        -:  233:    /**
        -:  234:     * Returns the 32-bit code unit at the given index.
        -:  235:     */
        -:  236:    SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const;
        -:  237:
        -:  238:    /**
        -:  239:     * Compares this to [other].
        -:  240:     */
        -:  241:    int compareTo(const SuperString &other) const;
        -:  242:
        -:  243:    /**
        -:  244:     * Returns the position of the first occurrence of [other] in this string,
        -:  245:     * if not found, it returns SuperString::Error::NotFound.
        -:  246:     */
        -:  247:    SuperString::Result<std::size_t, SuperString::Error> indexOf(SuperString other) const;
        -:  248:
        -:  249:    /**
        -:  250:     * Returns the position of the last occurrence of [other] in this string,
        -:  251:     * if not found, returns SuperString::Error::NotFound.
        -:  252:     */
        -:  253:    SuperString::Result<std::size_t, SuperString::Error> lastIndexOf(SuperString other) const;
        -:  254:
        -:  255:    /**
        -:  256:     * Returns the substring of this sequence that extends
        -:  257:     * from [startIndex], inclusive, to [endIndex], exclusive.
        -:  258:     */
        -:  259:    SuperString::Result<SuperString, SuperString::Error>
        -:  260:    substring(std::size_t startIndex, std::size_t endIndex) const;
        -:  261:
        -:  262:    SuperString substr(std::size_t pos, std::size_t len) const;
        -:  263:    SuperString substr(std::size_t pos) const;
        -:  264:
        -:  265:    /**
        -:  266:     * Outputs the whole string to the given [stream].
        -:  267:     */
        -:  268:    bool print(std::ostream &stream) const;
        -:  269:
        -:  270:    /**
        -:  271:     * Outputs the substring from [startIndex] to [endIndex]
        -:  272:     * to the given [stream].
        -:  273:     */
        -:  274:    bool print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const;
        -:  275:
        -:  276:    /**
        -:  277:     * Returns the string without any leading and trailing whitespace.
        -:  278:     */
        -:  279:    SuperString trim() const;
        -:  280:
        -:  281:    /**
        -:  282:     * Returns the string without any leading whitespace.
        -:  283:     */
        -:  284:    SuperString trimLeft() const;
        -:  285:
        -:  286:    /**
        -:  287:     * Returns the string without any trailing whitespace.
        -:  288:     */
        -:  289:    SuperString trimRight() const;
        -:  290:
        -:  291:    // TODO: delete this two methods
        -:  292:    std::size_t keepingCost() const;
        -:  293:
        -:  294:    std::size_t freeingCost() const;
        -:  295:
        -:  296:    //*- Operators
        -:  297:
        -:  298:    /**
        -:  299:     * Creates a new string by concatenating this string with [other].
        -:  300:     */
        -:  301:    SuperString operator+(const SuperString &other) const;
        -:  302:
        -:  303:    /**
        -:  304:     * Creates a new string by concatenating this string with itself a
        -:  305:     * number of [times].
        -:  306:     */
        -:  307:    SuperString operator*(std::size_t times) const;
        -:  308:
        -:  309:    /**
        -:  310:     * Assigns [other] to this string.
        -:  311:     */
        -:  312:    SuperString &operator=(const SuperString &other);
        -:  313:
        -:  314:    /**
        -:  315:     * Returns `SuperString::TRUE` if this is equal to [other].
        -:  316:     */
        -:  317:    bool operator==(const SuperString &other) const;
        -:  318:
        -:  319:    //*- Statics
        -:  320:
        -:  321:    /**
        -:  322:     * Creates a string for the given `const char *` [chars] (UTF-8 default as encoding),
        -:  323:     * without copying the data of [chars].
        -:  324:     */
        -:  325:    static SuperString Const(const char *chars, SuperString::Encoding encoding = SuperString::Encoding::UTF8);
        -:  326:
        -:  327:    /**
        -:  328:     * Creates a string for the given `const int *` [chars] (UTF-32 default as encoding),
        -:  329:     * without copying the data of [chars].
        -:  330:     */
        -:  331:    static SuperString Const(const int *chars, SuperString::Encoding encoding = SuperString::Encoding::UTF32);
        -:  332:
        -:  333:    /**
        -:  334:     * Creates a string for the given `const SuperString::Byte *` [bytes] (UTF-8 default as encoding),
        -:  335:     * without copying the data of [bytes].
        -:  336:     */
        -:  337:    static SuperString
        -:  338:    Const(const SuperString::Byte *bytes, SuperString::Encoding encoding = SuperString::Encoding::UTF8);
        -:  339:
        -:  340:    /**
        -:  341:     * Creates a string for the given `const char *` [chars] (UTF-8 default as encoding),
        -:  342:     * by copying the data of [chars].
        -:  343:     */
        -:  344:    static SuperString Copy(const char *chars, SuperString::Encoding encoding = SuperString::Encoding::UTF8);
        -:  345:
        -:  346:    /**
        -:  347:     * Creates a string for the given `const int *` [chars] (UTF-32 default as encoding),
        -:  348:     * by copying the data of [chars].
        -:  349:     */
        -:  350:    static SuperString Copy(const int *chars, SuperString::Encoding encoding = SuperString::Encoding::UTF32);
        -:  351:
        -:  352:    /**
        -:  353:     * Creates a string for the given `const SuperString::Byte *` [bytes] (UTF-8 default as encoding),
        -:  354:     * by copying the data of [bytes].
        -:  355:     */
        -:  356:    static SuperString
        -:  357:    Copy(const SuperString::Byte *bytes, SuperString::Encoding encoding = SuperString::Encoding::UTF8);
        -:  358:
        -:  359:private:
        -:  360:    // forward declaration
        -:  361:    class StringSequence;
        -:  362:
        -:  363:    class ReferenceStringSequence;
        -:  364:
        -:  365:    class CopyASCIISequence;
        -:  366:
        -:  367:    class CopyUTF8Sequence;
        -:  368:
        -:  369:    class CopyUTF16BESequence;
        -:  370:
        -:  371:    class CopyUTF32Sequence;
        -:  372:
        -:  373:    //*-- SuperString
        -:  374:    StringSequence *_sequence;
        -:  375:
        -:  376:    //*- Constructors
        -:  377:
        -:  378:    SuperString(StringSequence *sequence);
        -:  379:
        -:  380:    //*-- SingleLinkedList<E> (internal)
        -:  381:    template<class E>
        -:  382:    class SingleLinkedList {
        -:  383:    public:
        -:  384:        // forward declaration
        -:  385:        template<class Ei>
        -:  386:        class Node;
        -:  387:
        -:  388:        Node<E> *_head;
        -:  389:        Node<E> *_tail;
        -:  390:    public:
        -:  391:        //*- Constructors
        -:  392:
        -:  393:        SingleLinkedList();
        -:  394:
        -:  395:        //*- Destructor
        -:  396:
        -:  397:        ~SingleLinkedList();
        -:  398:
        -:  399:        //*- Getters
        -:  400:
        -:  401:        std::size_t length() const;
        -:  402:
        -:  403:        //*- Methods
        -:  404:
        -:  405:        void push(E value);
        -:  406:
        -:  407:        void remove(E value);
        -:  408:
        -:  409:        template<class Ei>
        -:  410:        class Node {
        -:  411:        public:
        -:  412:            Ei _data;
        -:  413:            Node<E> *_next;
        -:  414:
        -:  415:            //*- Constructors
        -:  416:
        -:  417:            Node(E data);
        -:  418:        };
        -:  419:    };
        -:  420:
        -:  421:    //*-- Pair<T, U>
        -:  422:    template<class T, class U>
        -:  423:    class Pair {
        -:  424:    private:
        -:  425:        T _0;
        -:  426:        U _1;
        -:  427:
        -:  428:    public:
        -:  429:        //*- Constructor
        -:  430:        Pair();
        -:  431:
        -:  432:        Pair(T $0, U $1);
        -:  433:
        -:  434:        //*- Getters
        -:  435:
        -:  436:        T first() const;
        -:  437:
        -:  438:        U second() const;
        -:  439:
        -:  440:        //*- Setters
        -:  441:
        -:  442:        void first(T $0);
        -:  443:
        -:  444:        void second(U $1);
        -:  445:    };
        -:  446:
        -:  447:    //*-- StringSequence (abstract|internal)
        -:  448:    class StringSequence {
        -:  449:    private:
        -:  450:        std::size_t _refCount;
        -:  451:        SingleLinkedList<ReferenceStringSequence *> _referencers;
        -:  452:
        -:  453:    public:
        -:  454:        // Constructors
        -:  455:
        -:  456:        StringSequence();
        -:  457:
        -:  458:        //*- Destructor
        -:  459:
        -:  460:        /**
        -:  461:         * Destructs this sequence.
        -:  462:         */
        -:  463:        virtual ~StringSequence();
        -:  464:
        -:  465:        //*- Getters
        -:  466:
        -:  467:        /**
        -:  468:         * Returns `SuperString::TRUE` if this string is empty.
        -:  469:         */
        -:  470:        virtual bool isEmpty() const;
        -:  471:
        -:  472:        /**
        -:  473:         * Returns `SuperString::TRUE` if this string is not empty.
        -:  474:         */
        -:  475:        virtual bool isNotEmpty() const;
        -:  476:
        -:  477:        /**
        -:  478:         * Returns the length of this sequence.
        -:  479:         */
        -:  480:        virtual std::size_t length() const = 0;
        -:  481:
        -:  482:        //*- Methods
        -:  483:
        -:  484:        /**
        -:  485:         * Returns the 32-bit code unit at the given index.
        -:  486:         */
        -:  487:        virtual SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const = 0;
        -:  488:
        -:  489:        SuperString::Result<std::size_t, SuperString::Error> indexOf(SuperString other) const;
        -:  490:
        -:  491:        SuperString::Result<std::size_t, SuperString::Error> lastIndexOf(SuperString other) const;
        -:  492:
        -:  493:        /**
        -:  494:         * Returns the substring of this sequence that extends
        -:  495:         * from [startIndex], inclusive, to [endIndex], exclusive.
        -:  496:         */
        -:  497:        virtual SuperString::Result<SuperString, SuperString::Error>
        -:  498:        substring(std::size_t startIndex, std::size_t endIndex) const = 0;
        -:  499:
        -:  500:        /**
        -:  501:         * Prints this string to the given [stream].
        -:  502:         */
        -:  503:        virtual bool print(std::ostream &stream) const = 0;
        -:  504:
        -:  505:        /**
        -:  506:         * Prints a substring of this string that starts at [startIndex], inclusive,
        -:  507:         * and end at [endIndex], exclusive, to given [stream].
        -:  508:         */
        -:  509:        virtual bool
        -:  510:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const = 0;
        -:  511:
        -:  512:        /**
        -:  513:         * Returns the sequence without any leading and trailing whitespace.
        -:  514:         */
        -:  515:        virtual SuperString trim() const = 0;
        -:  516:
        -:  517:        /**
        -:  518:         * Returns the string without any leading whitespace.
        -:  519:         */
        -:  520:        virtual SuperString trimLeft() const = 0;
        -:  521:
        -:  522:        /**
        -:  523:         * Returns the string without any trailing whitespace.
        -:  524:         */
        -:  525:        virtual SuperString trimRight() const = 0;
        -:  526:
        -:  527:        // TODO: comment
        -:  528:        virtual std::size_t keepingCost() const = 0;
        -:  529:
        -:  530:        // TODO: comment
        -:  531:        std::size_t freeingCost() const;
        -:  532:
        -:  533:        // TODO: comment
        -:  534:        void refAdd() const;
        -:  535:
        -:  536:        // TODO: comment
        -:  537:        std::size_t refRelease() const;
        -:  538:
        -:  539:        // TODO: comment
        -:  540:        std::size_t refCount() const;
        -:  541:
        -:  542:        // TODO: comment
        -:  543:        void addReferencer(SuperString::ReferenceStringSequence *sequence) const;
        -:  544:
        -:  545:        // TODO: comment
        -:  546:        void removeReferencer(SuperString::ReferenceStringSequence *sequence) const;
        -:  547:
        -:  548:        // TODO: comment
        -:  549:        void reconstructReferencers();
        -:  550:
        -:  551:    protected:
        -:  552:        virtual void doDelete() const = 0;
        -:  553:
        -:  554:        virtual bool isToBeDeleted() const = 0;
        -:  555:
        -:  556:    private:
        -:  557:        bool _substringMatches(std::size_t startIndex, SuperString other) const;
        -:  558:
        -:  559:        friend class SuperString;
        -:  560:    };
        -:  561:
        -:  562:    //*-- ReferenceStringSequence (abstract|internal)
        -:  563:    class ReferenceStringSequence: public StringSequence {
        -:  564:    public:
        -:  565:        //*- Destructor
        -:  566:
        -:  567:        virtual ~ReferenceStringSequence();
        -:  568:
        -:  569:        //*- Getters
        -:  570:
        -:  571:        // inherited: bool isEmpty() const;
        -:  572:
        -:  573:        // inherited: bool isNotEmpty() const;
        -:  574:
        -:  575:        virtual std::size_t length() const = 0 /*override*/;
        -:  576:
        -:  577:        //*- Methods
        -:  578:
        -:  579:        virtual SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const = 0 /*override*/;
        -:  580:
        -:  581:        virtual SuperString::Result<SuperString, SuperString::Error>
        -:  582:        substring(std::size_t startIndex, std::size_t endIndex) const = 0 /*override*/;
        -:  583:
        -:  584:        virtual bool print(std::ostream &stream) const = 0 /*override*/;
        -:  585:
        -:  586:        virtual bool
        -:  587:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const = 0 /*override*/;
        -:  588:
        -:  589:        virtual SuperString trim() const = 0 /*override*/;
        -:  590:
        -:  591:        virtual SuperString trimLeft() const = 0 /*override*/;
        -:  592:
        -:  593:        virtual SuperString trimRight() const = 0 /*override*/;
        -:  594:
        -:  595:        virtual std::size_t keepingCost() const = 0 /*override*/;
        -:  596:
        -:  597:        // inherited: std::size_t freeingCost() const;
        -:  598:
        -:  599:        // TODO: comment
        -:  600:        virtual std::size_t reconstructionCost(const StringSequence *sequence) const = 0;
        -:  601:
        -:  602:        // TODO: comment
        -:  603:        virtual void reconstruct(const StringSequence *sequence) const = 0;
        -:  604:
        -:  605:    protected:
        -:  606:        virtual void doDelete() const = 0;
        -:  607:
        -:  608:        virtual bool isToBeDeleted() const = 0;
        -:  609:    };
        -:  610:
        -:  611:    //*-- ConstASCIISequence (internal)
        -:  612:    class ConstASCIISequence: public StringSequence {
        -:  613:    private:
        -:  614:        enum class Status {
        -:  615:            LengthNotComputed,
        -:  616:            LengthComputed,
        -:  617:            ToBeDestructed
        -:  618:        };
        -:  619:
        -:  620:        const Byte *_bytes;
        -:  621:        std::size_t _length;
        -:  622:        Status _status;
        -:  623:
        -:  624:    public:
        -:  625:        //*- Constructors
        -:  626:
        -:  627:        ConstASCIISequence(const Byte *bytes);
        -:  628:
        -:  629:        //*- Destructor
        -:  630:
        -:  631:        ~ConstASCIISequence();
        -:  632:
        -:  633:        //*- Getters
        -:  634:
        -:  635:        // inherited: bool isEmpty() const;
        -:  636:
        -:  637:        // inherited: bool isNotEmpty() const;
        -:  638:
        -:  639:        std::size_t length() const /*override*/;
        -:  640:
        -:  641:        //*- Methods
        -:  642:
        -:  643:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -:  644:
        -:  645:        SuperString::Result<SuperString, SuperString::Error>
        -:  646:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  647:
        -:  648:        bool print(std::ostream &stream) const /*override*/;
        -:  649:
        -:  650:        bool
        -:  651:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  652:
        -:  653:        SuperString trim() const /*override*/;
        -:  654:
        -:  655:        SuperString trimLeft() const /*override*/;
        -:  656:
        -:  657:        SuperString trimRight() const /*override*/;
        -:  658:
        -:  659:        std::size_t keepingCost() const /*override*/;
        -:  660:
        -:  661:        // inherited: std::size_t freeingCost() const;
        -:  662:
        -:  663:        friend class CopyASCIISequence;
        -:  664:
        -:  665:    protected:
        -:  666:        void doDelete() const;
        -:  667:
        -:  668:        bool isToBeDeleted() const;
        -:  669:    };
        -:  670:
        -:  671:    //*-- CopyASCIISequence (internal)
        -:  672:    class CopyASCIISequence: public StringSequence {
        -:  673:    private:
        -:  674:        Byte *_data;
        -:  675:        std::size_t _length;
        -:  676:
        -:  677:    public:
        -:  678:        //*- Constructors
        -:  679:
        -:  680:        CopyASCIISequence(const SuperString::Byte *chars);
        -:  681:
        -:  682:        CopyASCIISequence(const SuperString::ConstASCIISequence *sequence);
        -:  683:
        -:  684:        //*- Destructor
        -:  685:
        -:  686:        ~CopyASCIISequence();
        -:  687:
        -:  688:        //*- Getters
        -:  689:
        -:  690:        // inherited: bool isEmpty() const;
        -:  691:
        -:  692:        // inherited: bool isNotEmpty() const;
        -:  693:
        -:  694:        std::size_t length() const /*override*/;
        -:  695:
        -:  696:        //*- Methods
        -:  697:
        -:  698:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -:  699:
        -:  700:        SuperString::Result<SuperString, SuperString::Error>
        -:  701:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  702:
        -:  703:        bool print(std::ostream &stream) const /*override*/;
        -:  704:
        -:  705:        bool
        -:  706:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  707:
        -:  708:        SuperString trim() const /*override*/;
        -:  709:
        -:  710:        SuperString trimLeft() const /*override*/;
        -:  711:
        -:  712:        SuperString trimRight() const /*override*/;
        -:  713:
        -:  714:        std::size_t keepingCost() const /*override*/;
        -:  715:
        -:  716:        // inherited: std::size_t freeingCost() const;
        -:  717:
        -:  718:    protected:
        -:  719:        void doDelete() const;
        -:  720:
        -:  721:        bool isToBeDeleted() const;
        -:  722:    };
        -:  723:
        -:  724:    //*--ConstUTF8Sequence (internal)
        -:  725:    class ConstUTF8Sequence: public StringSequence {
        -:  726:    private:
        -:  727:        enum class Status {
        -:  728:            LengthNotComputed,
        -:  729:            LengthComputed,
        -:  730:            ToBeDestructed
        -:  731:        };
        -:  732:
        -:  733:        const Byte *_bytes;
        -:  734:        std::size_t _length;
        -:  735:        Status _status;
        -:  736:
        -:  737:    public:
        -:  738:        //*- Constructors
        -:  739:
        -:  740:        ConstUTF8Sequence(const Byte *chars);
        -:  741:
        -:  742:        //*- Destructor
        -:  743:
        -:  744:        ~ConstUTF8Sequence();
        -:  745:
        -:  746:        //*- Getters
        -:  747:
        -:  748:        // inherited: bool isEmpty() const;
        -:  749:
        -:  750:        // inherited: bool isNotEmpty() const;
        -:  751:
        -:  752:        std::size_t length() const /*override*/;
        -:  753:
        -:  754:        //*- Methods
        -:  755:
        -:  756:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -:  757:
        -:  758:        SuperString::Result<SuperString, SuperString::Error>
        -:  759:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  760:
        -:  761:        bool print(std::ostream &stream) const /*override*/;
        -:  762:
        -:  763:        bool
        -:  764:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  765:
        -:  766:        SuperString trim() const /*override*/;
        -:  767:
        -:  768:        SuperString trimLeft() const /*override*/;
        -:  769:
        -:  770:        SuperString trimRight() const /*override*/;
        -:  771:
        -:  772:        std::size_t keepingCost() const /*override*/;
        -:  773:
        -:  774:        // inherited:SuperString:: std::size_t freeingCost() const;
        -:  775:
        -:  776:        friend class CopyUTF8Sequence;
        -:  777:
        -:  778:    protected:
        -:  779:        void doDelete() const;
        -:  780:
        -:  781:        bool isToBeDeleted() const;
        -:  782:    };
        -:  783:
        -:  784:    //*-- CopyUTF8Sequence (internal)
        -:  785:    class CopyUTF8Sequence: public StringSequence {
        -:  786:    private:
        -:  787:        Byte *_data;
        -:  788:        std::size_t _length;
        -:  789:        std::size_t _memoryLength;
        -:  790:
        -:  791:    public:
        -:  792:        //*- Constructors
        -:  793:
        -:  794:        CopyUTF8Sequence(const SuperString::Byte *chars);
        -:  795:
        -:  796:        CopyUTF8Sequence(const SuperString::ConstUTF8Sequence *sequence);
        -:  797:
        -:  798:        //*- Destructor
        -:  799:
        -:  800:        ~CopyUTF8Sequence();
        -:  801:
        -:  802:        //*- Getters
        -:  803:
        -:  804:        // inherited: bool isEmpty() const;
        -:  805:
        -:  806:        // inherited: bool isNotEmpty() const;
        -:  807:
        -:  808:        std::size_t length() const /*override*/;
        -:  809:
        -:  810:        //*- Methods
        -:  811:
        -:  812:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -:  813:
        -:  814:        SuperString::Result<SuperString, SuperString::Error>
        -:  815:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  816:
        -:  817:        bool print(std::ostream &stream) const /*override*/;
        -:  818:
        -:  819:        bool
        -:  820:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  821:
        -:  822:        SuperString trim() const /*override*/;
        -:  823:
        -:  824:        SuperString trimLeft() const /*override*/;
        -:  825:
        -:  826:        SuperString trimRight() const /*override*/;
        -:  827:
        -:  828:        std::size_t keepingCost() const /*override*/;
        -:  829:
        -:  830:        // inherited: std::size_t freeingCost() const;
        -:  831:
        -:  832:    protected:
        -:  833:        void doDelete() const;
        -:  834:
        -:  835:        bool isToBeDeleted() const;
        -:  836:    };
        -:  837:
        -:  838:    //*-- ConstUTF16BESequence (internal)
        -:  839:    class ConstUTF16BESequence: public StringSequence {
        -:  840:    private:
        -:  841:        enum class Status {
        -:  842:            LengthNotComputed,
        -:  843:            LengthComputed,
        -:  844:            ToBeDestructed
        -:  845:        };
        -:  846:
        -:  847:        const Byte *_bytes;
        -:  848:        std::size_t _length;
        -:  849:        Status _status;
        -:  850:
        -:  851:    public:
        -:  852:        //*- Constructors
        -:  853:
        -:  854:        ConstUTF16BESequence(const SuperString::Byte *bytes);
        -:  855:
        -:  856:        //*- Destructor
        -:  857:
        -:  858:        ~ConstUTF16BESequence();
        -:  859:
        -:  860:        //*- Getters
        -:  861:
        -:  862:        // inherited: bool isEmpty() const;
        -:  863:
        -:  864:        // inherited: bool isNotEmpty() const;
        -:  865:
        -:  866:        std::size_t length() const /*override*/;
        -:  867:
        -:  868:        //*- Methods
        -:  869:
        -:  870:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -:  871:
        -:  872:        SuperString::Result<SuperString, SuperString::Error>
        -:  873:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  874:
        -:  875:        bool print(std::ostream &stream) const /*override*/;
        -:  876:
        -:  877:        bool
        -:  878:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  879:
        -:  880:        SuperString trim() const /*override*/;
        -:  881:
        -:  882:        SuperString trimLeft() const /*override*/;
        -:  883:
        -:  884:        SuperString trimRight() const /*override*/;
        -:  885:
        -:  886:        std::size_t keepingCost() const /*override*/;
        -:  887:
        -:  888:        // inherited:SuperString:: std::size_t freeingCost() const;
        -:  889:
        -:  890:        friend class CopyUTF16BESequence;
        -:  891:
        -:  892:    protected:
        -:  893:        void doDelete() const;
        -:  894:
        -:  895:        bool isToBeDeleted() const;
        -:  896:    };
        -:  897:
        -:  898:    //*-- CopyUTF16BESequence (internal)
        -:  899:    class CopyUTF16BESequence: public StringSequence {
        -:  900:    private:
        -:  901:        Byte *_data;
        -:  902:        std::size_t _length;
        -:  903:        std::size_t _memoryLength;
        -:  904:
        -:  905:    public:
        -:  906:        //*- Constructors
        -:  907:
        -:  908:        CopyUTF16BESequence(const SuperString::Byte *bytes);
        -:  909:
        -:  910:        CopyUTF16BESequence(const SuperString::ConstUTF16BESequence *sequence);
        -:  911:
        -:  912:        //*- Destructor
        -:  913:
        -:  914:        ~CopyUTF16BESequence();
        -:  915:
        -:  916:        //*- Getters
        -:  917:
        -:  918:        // inherited: bool isEmpty() const;
        -:  919:
        -:  920:        // inherited: bool isNotEmpty() const;
        -:  921:
        -:  922:        std::size_t length() const /*override*/;
        -:  923:
        -:  924:        //*- Methods
        -:  925:
        -:  926:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -:  927:
        -:  928:        SuperString::Result<SuperString, SuperString::Error>
        -:  929:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  930:
        -:  931:        bool print(std::ostream &stream) const /*override*/;
        -:  932:
        -:  933:        bool
        -:  934:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  935:
        -:  936:        SuperString trim() const /*override*/;
        -:  937:
        -:  938:        SuperString trimLeft() const /*override*/;
        -:  939:
        -:  940:        SuperString trimRight() const /*override*/;
        -:  941:
        -:  942:        std::size_t keepingCost() const /*override*/;
        -:  943:
        -:  944:        // inherited: std::size_t freeingCost() const;
        -:  945:
        -:  946:    protected:
        -:  947:        void doDelete() const;
        -:  948:
        -:  949:        bool isToBeDeleted() const;
        -:  950:    };
        -:  951:
        -:  952:    //*-- ConstUTF32Sequence (internal)
        -:  953:    class ConstUTF32Sequence: public StringSequence {
        -:  954:    private:
        -:  955:        enum class Status {
        -:  956:            LengthNotComputed,
        -:  957:            LengthComputed,
        -:  958:            ToBeDestructed
        -:  959:        };
        -:  960:
        -:  961:        const int *_bytes;
        -:  962:        std::size_t _length;
        -:  963:        Status _status;
        -:  964:
        -:  965:    public:
        -:  966:        //*- Constructors
        -:  967:
        -:  968:        ConstUTF32Sequence(const SuperString::Byte *bytes);
        -:  969:
        -:  970:        //*- Destructor
        -:  971:
        -:  972:        ~ConstUTF32Sequence();
        -:  973:
        -:  974:        //*- Getters
        -:  975:
        -:  976:        // inherited: bool isEmpty() const;
        -:  977:
        -:  978:        // inherited: bool isNotEmpty() const;
        -:  979:
        -:  980:        std::size_t length() const /*override*/;
        -:  981:
        -:  982:        //*- Methods
        -:  983:
        -:  984:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -:  985:
        -:  986:        SuperString::Result<SuperString, SuperString::Error>
        -:  987:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  988:
        -:  989:        bool print(std::ostream &stream) const /*override*/;
        -:  990:
        -:  991:        bool
        -:  992:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -:  993:
        -:  994:        SuperString trim() const /*override*/;
        -:  995:
        -:  996:        SuperString trimLeft() const /*override*/;
        -:  997:
        -:  998:        SuperString trimRight() const /*override*/;
        -:  999:
        -: 1000:        std::size_t keepingCost() const /*override*/;
        -: 1001:
        -: 1002:        // inherited: std::size_t freeingCost() const;
        -: 1003:
        -: 1004:        friend class CopyUTF32Sequence;
        -: 1005:
        -: 1006:    protected:
        -: 1007:        void doDelete() const;
        -: 1008:
        -: 1009:        bool isToBeDeleted() const;
        -: 1010:    };
        -: 1011:
        -: 1012:    //*-- CopyUTF32Sequence (internal)
        -: 1013:    class CopyUTF32Sequence: public StringSequence {
        -: 1014:    private:
        -: 1015:        int *_data;
        -: 1016:        std::size_t _length;
        -: 1017:
        -: 1018:    public:
        -: 1019:        //*- Constructors
        -: 1020:
        -: 1021:        CopyUTF32Sequence(const SuperString::Byte *chars);
        -: 1022:
        -: 1023:        CopyUTF32Sequence(const SuperString::ConstUTF32Sequence *sequence);
        -: 1024:
        -: 1025:        //*- Destructor
        -: 1026:
        -: 1027:        ~CopyUTF32Sequence();
        -: 1028:
        -: 1029:        //*- Getters
        -: 1030:
        -: 1031:        // inherited: bool isEmpty() const;
        -: 1032:
        -: 1033:        // inherited: bool isNotEmpty() const;
        -: 1034:
        -: 1035:        std::size_t length() const /*override*/;
        -: 1036:
        -: 1037:        //*- Methods
        -: 1038:
        -: 1039:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -: 1040:
        -: 1041:        SuperString::Result<SuperString, SuperString::Error>
        -: 1042:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -: 1043:
        -: 1044:        bool print(std::ostream &stream) const /*override*/;
        -: 1045:
        -: 1046:        bool
        -: 1047:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -: 1048:
        -: 1049:        SuperString trim() const /*override*/;
        -: 1050:
        -: 1051:        SuperString trimLeft() const /*override*/;
        -: 1052:
        -: 1053:        SuperString trimRight() const /*override*/;
        -: 1054:
        -: 1055:        std::size_t keepingCost() const /*override*/;
        -: 1056:
        -: 1057:        // inherited: std::size_t freeingCost() const;
        -: 1058:
        -: 1059:    protected:
        -: 1060:        void doDelete() const;
        -: 1061:
        -: 1062:        bool isToBeDeleted() const;
        -: 1063:    };
        -: 1064:
        -: 1065:    //*-- SubstringSequence (internal)
        -: 1066:    class SubstringSequence: public ReferenceStringSequence {
        -: 1067:    private:
        -: 1068:        enum class Kind: char {
        -: 1069:            SUBSTRING,
        -: 1070:            RECONSTRUCTED
        -: 1071:        };
        -: 1072:        struct SubstringMetaInfo {
        -: 1073:            const StringSequence *_sequence;
        -: 1074:            std::size_t _startIndex;
        -: 1075:            std::size_t _endIndex;
        -: 1076:        };
        -: 1077:        struct ReconstructedMetaInfo {
        -: 1078:            int *_data;
        -: 1079:            std::size_t _length;
        -: 1080:        };
        -: 1081:
        -: 1082:        Kind _kind;
        -: 1083:        union {
        -: 1084:            struct SubstringMetaInfo _substring;
        -: 1085:            struct ReconstructedMetaInfo _reconstructed;
        -: 1086:        } _container;
        -: 1087:
        -: 1088:    public:
        -: 1089:        //*- Constructors
        -: 1090:
        -: 1091:        SubstringSequence(const StringSequence *sequence, std::size_t startIndex, std::size_t endIndex);
        -: 1092:
        -: 1093:        //*- Destructor
        -: 1094:
        -: 1095:        ~SubstringSequence();
        -: 1096:
        -: 1097:        //*- Getters
        -: 1098:
        -: 1099:        SuperString::SubstringSequence::Kind kind() const;
        -: 1100:
        -: 1101:        std::size_t length() const /*override*/;
        -: 1102:
        -: 1103:        //*- Methods
        -: 1104:
        -: 1105:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -: 1106:
        -: 1107:        SuperString::Result<SuperString, SuperString::Error>
        -: 1108:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -: 1109:
        -: 1110:        bool print(std::ostream &stream) const /*override*/;
        -: 1111:
        -: 1112:        bool
        -: 1113:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -: 1114:
        -: 1115:        SuperString trim() const /*override*/;
        -: 1116:
        -: 1117:        SuperString trimLeft() const /*override*/;
        -: 1118:
        -: 1119:        SuperString trimRight() const /*override*/;
        -: 1120:
        -: 1121:        std::size_t keepingCost() const /*override*/;
        -: 1122:
        -: 1123:        // inherited: std::size_t freeingCost() const;
        -: 1124:
        -: 1125:        std::size_t reconstructionCost(const StringSequence *sequence) const /*override*/;
        -: 1126:
        -: 1127:        void reconstruct(const StringSequence *sequence) const /*override*/;
        -: 1128:
        -: 1129:        friend class StringSequence;
        -: 1130:
        -: 1131:    protected:
        -: 1132:        void doDelete() const;
        -: 1133:
        -: 1134:        bool isToBeDeleted() const;
        -: 1135:    };
        -: 1136:
        -: 1137:    //*-- ConcatenationSequence (internal)
        -: 1138:    class ConcatenationSequence: public ReferenceStringSequence {
        -: 1139:    private:
        -: 1140:        enum class Kind {
        -: 1141:            CONCATENATION,
        -: 1142:            LEFTRECONSTRUCTED,
        -: 1143:            RIGHTRECONSTRUCTED,
        -: 1144:            RECONSTRUCTED
        -: 1145:        };
        -: 1146:        struct ConcatenationMetaInfo {
        -: 1147:            const StringSequence *_left;
        -: 1148:            const StringSequence *_right;
        -: 1149:        };
        -: 1150:        struct LeftReconstructedMetaInfo {
        -: 1151:            const StringSequence *_right;
        -: 1152:            int *_leftData;
        -: 1153:            std::size_t _leftLength;
        -: 1154:        };
        -: 1155:        struct RightReconstructedMetaInfo {
        -: 1156:            const StringSequence *_left;
        -: 1157:            int *_rightData;
        -: 1158:            std::size_t _rightLength;
        -: 1159:        };
        -: 1160:        struct ReconstructedMetaInfo {
        -: 1161:            int *_data;
        -: 1162:            std::size_t _length;
        -: 1163:        };
        -: 1164:
        -: 1165:        Kind _kind;
        -: 1166:        union {
        -: 1167:            struct ConcatenationMetaInfo _concatenation;
        -: 1168:            struct LeftReconstructedMetaInfo _leftReconstructed;
        -: 1169:            struct RightReconstructedMetaInfo _rightReconstructed;
        -: 1170:            struct ReconstructedMetaInfo _reconstructed;
        -: 1171:        } _container;
        -: 1172:
        -: 1173:    public:
        -: 1174:        //*- Constructors
        -: 1175:
        -: 1176:        ConcatenationSequence(const StringSequence *leftSequence, const StringSequence *rightSequence);
        -: 1177:
        -: 1178:        //*- Destructor
        -: 1179:
        -: 1180:        ~ConcatenationSequence();
        -: 1181:
        -: 1182:        //*- Getters
        -: 1183:
        -: 1184:        SuperString::ConcatenationSequence::Kind kind() const;
        -: 1185:
        -: 1186:        std::size_t length() const /*override*/;
        -: 1187:
        -: 1188:        //*- Methods
        -: 1189:
        -: 1190:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -: 1191:
        -: 1192:        SuperString::Result<SuperString, SuperString::Error>
        -: 1193:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -: 1194:
        -: 1195:        bool print(std::ostream &stream) const /*override*/;
        -: 1196:
        -: 1197:        bool
        -: 1198:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -: 1199:
        -: 1200:        SuperString trim() const /*override*/;
        -: 1201:
        -: 1202:        SuperString trimLeft() const /*override*/;
        -: 1203:
        -: 1204:        SuperString trimRight() const /*override*/;
        -: 1205:
        -: 1206:        std::size_t keepingCost() const /*override*/;
        -: 1207:
        -: 1208:        // inherited: std::size_t freeingCost() const;
        -: 1209:
        -: 1210:        std::size_t reconstructionCost(const StringSequence *sequence) const /*override*/;
        -: 1211:
        -: 1212:        void reconstruct(const StringSequence *sequence) const /*override*/;
        -: 1213:
        -: 1214:    protected:
        -: 1215:        void doDelete() const;
        -: 1216:
        -: 1217:        bool isToBeDeleted() const;
        -: 1218:    };
        -: 1219:
        -: 1220:    //*-- MultipleSequence (internal)
        -: 1221:    class MultipleSequence: public ReferenceStringSequence {
        -: 1222:    private:
        -: 1223:        struct MultipleMetaInfo {
        -: 1224:            std::size_t _time;
        -: 1225:            const StringSequence *_sequence;
        -: 1226:        };
        -: 1227:        struct ReconstructedMetaInfo {
        -: 1228:            std::size_t _time;
        -: 1229:            int *_data;
        -: 1230:            std::size_t _dataLength;
        -: 1231:        };
        -: 1232:        enum class Kind {
        -: 1233:            MULTIPLE,
        -: 1234:            RECONSTRUCTED
        -: 1235:        };
        -: 1236:
        -: 1237:        Kind _kind;
        -: 1238:        union {
        -: 1239:            struct MultipleMetaInfo _multiple;
        -: 1240:            struct ReconstructedMetaInfo _reconstructed;
        -: 1241:        } _container;
        -: 1242:
        -: 1243:    public:
        -: 1244:        //*- Constructors
        -: 1245:
        -: 1246:        MultipleSequence(const StringSequence *sequence, std::size_t time);
        -: 1247:
        -: 1248:        //*- Destructor
        -: 1249:
        -: 1250:        ~MultipleSequence();
        -: 1251:
        -: 1252:        //*- Getters
        -: 1253:
        -: 1254:        SuperString::MultipleSequence::Kind kind() const;
        -: 1255:
        -: 1256:        std::size_t length() const /*override*/;
        -: 1257:
        -: 1258:        //*- Methods
        -: 1259:
        -: 1260:        SuperString::Result<int, SuperString::Error> codeUnitAt(std::size_t index) const /*override*/;
        -: 1261:
        -: 1262:        SuperString::Result<SuperString, SuperString::Error>
        -: 1263:        substring(std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -: 1264:
        -: 1265:        bool print(std::ostream &stream) const /*override*/;
        -: 1266:
        -: 1267:        bool
        -: 1268:        print(std::ostream &stream, std::size_t startIndex, std::size_t endIndex) const /*override*/;
        -: 1269:
        -: 1270:        SuperString trim() const /*override*/;
        -: 1271:
        -: 1272:        SuperString trimLeft() const /*override*/;
        -: 1273:
        -: 1274:        SuperString trimRight() const /*override*/;
        -: 1275:
        -: 1276:        std::size_t keepingCost() const /*override*/;
        -: 1277:
        -: 1278:        // inherited: std::size_t freeingCost() const;
        -: 1279:
        -: 1280:        std::size_t reconstructionCost(const StringSequence *sequence) const /*override*/;
        -: 1281:
        -: 1282:        void reconstruct(const StringSequence *sequence) const /*override*/;
        -: 1283:
        -: 1284:    protected:
        -: 1285:        void doDelete() const;
        -: 1286:
        -: 1287:        bool isToBeDeleted() const;
        -: 1288:    };
        -: 1289:
        -: 1290:    inline static bool isWhiteSpace(int codeUnit);
        -: 1291:
        -: 1292:    //
        -: 1293:    class ASCII {
        -: 1294:    public:
        -: 1295:        static std::size_t length(const SuperString::Byte *bytes);
        -: 1296:
        -: 1297:        static int codeUnitAt(const SuperString::Byte *bytes, std::size_t index);
        -: 1298:
        -: 1299:        static void print(std::ostream &stream, const SuperString::Byte *bytes);
        -: 1300:
        -: 1301:        static void print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t startIndex,
        -: 1302:                          std::size_t endIndex);
        -: 1303:
        -: 1304:        static SuperString::Pair<std::size_t, std::size_t>
        -: 1305:        trim(const SuperString::Byte *bytes, std::size_t length);
        -: 1306:
        -: 1307:        static std::size_t trimLeft(const SuperString::Byte *bytes);
        -: 1308:
        -: 1309:        static std::size_t trimRight(const SuperString::Byte *bytes, std::size_t length);
        -: 1310:    };
        -: 1311:
        -: 1312:    class UTF8 {
        -: 1313:    public:
        -: 1314:        static std::size_t length(const SuperString::Byte *bytes);
        -: 1315:
        -: 1316:        static SuperString::Pair<std::size_t, std::size_t>
        -: 1317:        lengthAndMemoryLength(const SuperString::Byte *bytes);
        -: 1318:
        -: 1319:        static SuperString::Result<int, SuperString::Error>
        -: 1320:        codeUnitAt(const SuperString::Byte *bytes, std::size_t index);
        -: 1321:
        -: 1322:        static void print(std::ostream &stream, const SuperString::Byte *bytes);
        -: 1323:
        -: 1324:        static void print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t startIndex,
        -: 1325:                          std::size_t endIndex);
        -: 1326:
        -: 1327:        static SuperString::Result<SuperString::Pair<std::size_t, std::size_t>, SuperString::Error>
        -: 1328:        rangeIndexes(const SuperString::Byte *bytes, std::size_t startIndex, std::size_t endIndex);
        -: 1329:
        -: 1330:        static SuperString::Pair<SuperString::Byte *, std::size_t> codeUnitToChar(int c);
        -: 1331:
        -: 1332:        // TODO: add customized trims methods
        -: 1333:    };
        -: 1334:
        -: 1335:    class UTF16BE {
        -: 1336:    public:
        -: 1337:        static std::size_t length(const SuperString::Byte *bytes);
        -: 1338:
        -: 1339:        static SuperString::Pair<std::size_t, std::size_t>
        -: 1340:        lengthAndMemoryLength(const SuperString::Byte *bytes);
        -: 1341:
        -: 1342:        static SuperString::Result<int, SuperString::Error>
        -: 1343:        codeUnitAt(const SuperString::Byte *bytes, std::size_t index);
        -: 1344:
        -: 1345:        static void print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t length);
        -: 1346:
        -: 1347:        static void print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t startIndex,
        -: 1348:                          std::size_t endIndex);
        -: 1349:
        -: 1350:        // TODO: add customized trims methods
        -: 1351:    };
        -: 1352:
        -: 1353:    class UTF32 {
        -: 1354:    public:
        -: 1355:        static std::size_t length(const SuperString::Byte *bytes);
        -: 1356:
        -: 1357:        // FIXME: DEAD METHOD TO IGNORE by Hikari
        -: 1358:        // static SuperString::Pair<std::size_t, std::size_t>
        -: 1359:        // lengthAndMemoryLength(const SuperString::Byte *bytes);
        -: 1360:
        -: 1361:        static int codeUnitAt(const SuperString::Byte *bytes, std::size_t index);
        -: 1362:
        -: 1363:        static void print(std::ostream &stream, const SuperString::Byte *bytes);
        -: 1364:
        -: 1365:        static void print(std::ostream &stream, const SuperString::Byte *bytes, std::size_t startIndex,
        -: 1366:                          std::size_t endIndex);
        -: 1367:
        -: 1368:        static SuperString::Pair<std::size_t, std::size_t>
        -: 1369:        trim(const SuperString::Byte *bytes, std::size_t length);
        -: 1370:
        -: 1371:        static std::size_t trimLeft(const SuperString::Byte *bytes);
        -: 1372:
        -: 1373:        static std::size_t trimRight(const SuperString::Byte *bytes, std::size_t length);
        -: 1374:    };
        -: 1375:};
        -: 1376:
        -: 1377:// External Operators
        -: 1378:
        -: 1379:std::ostream &operator<<(std::ostream &stream, const SuperString &string);
        -: 1380:
        -: 1381:/*-- definitions --*/
        -: 1382:
        -: 1383://*-- SuperString::Result<T, E>
        -: 1384:template<class T, class E>
        -: 1385:SuperString::Result<T, E>::Result()
        -: 1386:        : _ok(NULL),
        -: 1387:          _err(NULL) {
        -: 1388:    // nothing go here
        -: 1389:}
        -: 1390:
        -: 1391:template<class T, class E>
      445: 1392:SuperString::Result<T, E>::Result(T ok)
      445: 1393:        : _ok(NULL),
      445: 1394:          _err(NULL) {
      445: 1395:    this->_ok = new char[sizeof(T)];
      445: 1396:    new(this->_ok) T(ok);
      445: 1397:}
------------------
_ZN11SuperString6ResultINS_4PairImmEENS_5ErrorEEC2ES2_:
function _ZN11SuperString6ResultINS_4PairImmEENS_5ErrorEEC2ES2_ called 17 returned 100% blocks executed 100%
       17: 1392:SuperString::Result<T, E>::Result(T ok)
       17: 1393:        : _ok(NULL),
       17: 1394:          _err(NULL) {
       17: 1395:    this->_ok = new char[sizeof(T)];
call    0 returned 100%
       17: 1396:    new(this->_ok) T(ok);
call    0 returned 100%
       17: 1397:}
------------------
_ZN11SuperString6ResultIS_NS_5ErrorEEC2ES_:
function _ZN11SuperString6ResultIS_NS_5ErrorEEC2ES_ called 51 returned 100% blocks executed 83%
       51: 1392:SuperString::Result<T, E>::Result(T ok)
       51: 1393:        : _ok(NULL),
       51: 1394:          _err(NULL) {
       51: 1395:    this->_ok = new char[sizeof(T)];
call    0 returned 100%
       51: 1396:    new(this->_ok) T(ok);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 never executed
       51: 1397:}
------------------
_ZN11SuperString6ResultIiNS_5ErrorEEC2Ei:
function _ZN11SuperString6ResultIiNS_5ErrorEEC2Ei called 374 returned 100% blocks executed 100%
      374: 1392:SuperString::Result<T, E>::Result(T ok)
      374: 1393:        : _ok(NULL),
      374: 1394:          _err(NULL) {
      374: 1395:    this->_ok = new char[sizeof(T)];
call    0 returned 100%
      374: 1396:    new(this->_ok) T(ok);
call    0 returned 100%
      374: 1397:}
------------------
_ZN11SuperString6ResultImNS_5ErrorEEC2Em:
function _ZN11SuperString6ResultImNS_5ErrorEEC2Em called 3 returned 100% blocks executed 100%
        3: 1392:SuperString::Result<T, E>::Result(T ok)
        3: 1393:        : _ok(NULL),
        3: 1394:          _err(NULL) {
        3: 1395:    this->_ok = new char[sizeof(T)];
call    0 returned 100%
        3: 1396:    new(this->_ok) T(ok);
call    0 returned 100%
        3: 1397:}
------------------
        -: 1398:
        -: 1399:template<class T, class E>
       53: 1400:SuperString::Result<T, E>::Result(E err)
       53: 1401:        : _ok(NULL),
       53: 1402:          _err(NULL) {
       53: 1403:    this->_err = new char[sizeof(E)];
       53: 1404:    new(this->_err) E(err);
       53: 1405:}
------------------
_ZN11SuperString6ResultINS_4PairImmEENS_5ErrorEEC2ES3_:
function _ZN11SuperString6ResultINS_4PairImmEENS_5ErrorEEC2ES3_ called 2 returned 100% blocks executed 100%
        2: 1400:SuperString::Result<T, E>::Result(E err)
        2: 1401:        : _ok(NULL),
        2: 1402:          _err(NULL) {
        2: 1403:    this->_err = new char[sizeof(E)];
call    0 returned 100%
        2: 1404:    new(this->_err) E(err);
call    0 returned 100%
        2: 1405:}
------------------
_ZN11SuperString6ResultIS_NS_5ErrorEEC2ES1_:
function _ZN11SuperString6ResultIS_NS_5ErrorEEC2ES1_ called 30 returned 100% blocks executed 100%
       30: 1400:SuperString::Result<T, E>::Result(E err)
       30: 1401:        : _ok(NULL),
       30: 1402:          _err(NULL) {
       30: 1403:    this->_err = new char[sizeof(E)];
call    0 returned 100%
       30: 1404:    new(this->_err) E(err);
call    0 returned 100%
       30: 1405:}
------------------
_ZN11SuperString6ResultIiNS_5ErrorEEC2ES1_:
function _ZN11SuperString6ResultIiNS_5ErrorEEC2ES1_ called 17 returned 100% blocks executed 100%
       17: 1400:SuperString::Result<T, E>::Result(E err)
       17: 1401:        : _ok(NULL),
       17: 1402:          _err(NULL) {
       17: 1403:    this->_err = new char[sizeof(E)];
call    0 returned 100%
       17: 1404:    new(this->_err) E(err);
call    0 returned 100%
       17: 1405:}
------------------
_ZN11SuperString6ResultImNS_5ErrorEEC2ES1_:
function _ZN11SuperString6ResultImNS_5ErrorEEC2ES1_ called 4 returned 100% blocks executed 100%
        4: 1400:SuperString::Result<T, E>::Result(E err)
        4: 1401:        : _ok(NULL),
        4: 1402:          _err(NULL) {
        4: 1403:    this->_err = new char[sizeof(E)];
call    0 returned 100%
        4: 1404:    new(this->_err) E(err);
call    0 returned 100%
        4: 1405:}
------------------
        -: 1406:
        -: 1407:template<class T, class E>
        -: 1408:SuperString::Result<T, E>::Result(const SuperString::Result<T, E> &other)
        -: 1409:        : _ok(NULL),
        -: 1410:          _err(NULL) /*copy*/ {
        -: 1411:    if(other._ok != NULL) {
        -: 1412:        this->_ok = new char[sizeof(T)];
        -: 1413:        new(this->_ok) T(*((T *) other._ok));
        -: 1414:    } else {
        -: 1415:        this->_err = new char[sizeof(E)];
        -: 1416:        new(this->_err) E(*((E *) other._err));
        -: 1417:    }
        -: 1418:}
        -: 1419:
        -: 1420:template<class T, class E>
      541: 1421:SuperString::Result<T, E>::~Result() {
      541: 1422:    if(this->_ok != NULL) {
      488: 1423:        ((T *) (this->_ok))->~T();
      488: 1424:        delete this->_ok;
      488: 1425:        this->_ok = NULL;
        -: 1426:    }
      541: 1427:    if(this->_err != NULL) {
       53: 1428:        ((E *) (this->_err))->~E();
       53: 1429:        delete this->_err;
       53: 1430:        this->_err = NULL;
        -: 1431:    }
      541: 1432:}
------------------
_ZN11SuperString6ResultINS_4PairImmEENS_5ErrorEED2Ev:
function _ZN11SuperString6ResultINS_4PairImmEENS_5ErrorEED2Ev called 19 returned 100% blocks executed 100%
       19: 1421:SuperString::Result<T, E>::~Result() {
       19: 1422:    if(this->_ok != NULL) {
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       17: 1423:        ((T *) (this->_ok))->~T();
       17: 1424:        delete this->_ok;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       17: 1425:        this->_ok = NULL;
        -: 1426:    }
       19: 1427:    if(this->_err != NULL) {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        2: 1428:        ((E *) (this->_err))->~E();
        2: 1429:        delete this->_err;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2: 1430:        this->_err = NULL;
        -: 1431:    }
       19: 1432:}
------------------
_ZN11SuperString6ResultIS_NS_5ErrorEED2Ev:
function _ZN11SuperString6ResultIS_NS_5ErrorEED2Ev called 81 returned 100% blocks executed 100%
       81: 1421:SuperString::Result<T, E>::~Result() {
       81: 1422:    if(this->_ok != NULL) {
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
       51: 1423:        ((T *) (this->_ok))->~T();
call    0 returned 100%
       51: 1424:        delete this->_ok;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       51: 1425:        this->_ok = NULL;
        -: 1426:    }
       81: 1427:    if(this->_err != NULL) {
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
       30: 1428:        ((E *) (this->_err))->~E();
       30: 1429:        delete this->_err;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       30: 1430:        this->_err = NULL;
        -: 1431:    }
       81: 1432:}
------------------
_ZN11SuperString6ResultImNS_5ErrorEED2Ev:
function _ZN11SuperString6ResultImNS_5ErrorEED2Ev called 7 returned 100% blocks executed 100%
        7: 1421:SuperString::Result<T, E>::~Result() {
        7: 1422:    if(this->_ok != NULL) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        3: 1423:        ((T *) (this->_ok))->~T();
        3: 1424:        delete this->_ok;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        3: 1425:        this->_ok = NULL;
        -: 1426:    }
        7: 1427:    if(this->_err != NULL) {
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        4: 1428:        ((E *) (this->_err))->~E();
        4: 1429:        delete this->_err;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        4: 1430:        this->_err = NULL;
        -: 1431:    }
        7: 1432:}
------------------
_ZN11SuperString6ResultIiNS_5ErrorEED2Ev:
function _ZN11SuperString6ResultIiNS_5ErrorEED2Ev called 434 returned 100% blocks executed 100%
      434: 1421:SuperString::Result<T, E>::~Result() {
      434: 1422:    if(this->_ok != NULL) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      417: 1423:        ((T *) (this->_ok))->~T();
      417: 1424:        delete this->_ok;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      417: 1425:        this->_ok = NULL;
        -: 1426:    }
      434: 1427:    if(this->_err != NULL) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       17: 1428:        ((E *) (this->_err))->~E();
       17: 1429:        delete this->_err;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
       17: 1430:        this->_err = NULL;
        -: 1431:    }
      434: 1432:}
------------------
        -: 1433:
        -: 1434:template<class T, class E>
function _ZNK11SuperString6ResultIiNS_5ErrorEE3errEv called 0 returned 0% blocks executed 0%
    #####: 1435:E SuperString::Result<T, E>::err() const {
    #####: 1436:    return *((E *) this->_err);
        -: 1437:}
        -: 1438:
        -: 1439:template<class T, class E>
       52: 1440:bool SuperString::Result<T, E>::isErr() const {
       52: 1441:    return this->_err != NULL;
        -: 1442:}
------------------
_ZNK11SuperString6ResultImNS_5ErrorEE5isErrEv:
function _ZNK11SuperString6ResultImNS_5ErrorEE5isErrEv called 4 returned 100% blocks executed 100%
        4: 1440:bool SuperString::Result<T, E>::isErr() const {
        4: 1441:    return this->_err != NULL;
        -: 1442:}
------------------
_ZNK11SuperString6ResultIiNS_5ErrorEE5isErrEv:
function _ZNK11SuperString6ResultIiNS_5ErrorEE5isErrEv called 16 returned 100% blocks executed 100%
       16: 1440:bool SuperString::Result<T, E>::isErr() const {
       16: 1441:    return this->_err != NULL;
        -: 1442:}
------------------
_ZNK11SuperString6ResultIS_NS_5ErrorEE5isErrEv:
function _ZNK11SuperString6ResultIS_NS_5ErrorEE5isErrEv called 32 returned 100% blocks executed 100%
       32: 1440:bool SuperString::Result<T, E>::isErr() const {
       32: 1441:    return this->_err != NULL;
        -: 1442:}
------------------
        -: 1443:
        -: 1444:template<class T, class E>
      151: 1445:bool SuperString::Result<T, E>::isOk() const {
      151: 1446:    return this->_ok != NULL;
        -: 1447:}
------------------
_ZNK11SuperString6ResultIS_NS_5ErrorEE4isOkEv:
function _ZNK11SuperString6ResultIS_NS_5ErrorEE4isOkEv called 5 returned 100% blocks executed 100%
        5: 1445:bool SuperString::Result<T, E>::isOk() const {
        5: 1446:    return this->_ok != NULL;
        -: 1447:}
------------------
_ZNK11SuperString6ResultINS_4PairImmEENS_5ErrorEE4isOkEv:
function _ZNK11SuperString6ResultINS_4PairImmEENS_5ErrorEE4isOkEv called 19 returned 100% blocks executed 100%
       19: 1445:bool SuperString::Result<T, E>::isOk() const {
       19: 1446:    return this->_ok != NULL;
        -: 1447:}
------------------
_ZNK11SuperString6ResultIiNS_5ErrorEE4isOkEv:
function _ZNK11SuperString6ResultIiNS_5ErrorEE4isOkEv called 127 returned 100% blocks executed 100%
      127: 1445:bool SuperString::Result<T, E>::isOk() const {
      127: 1446:    return this->_ok != NULL;
        -: 1447:}
------------------
        -: 1448:
        -: 1449:template<class T, class E>
      508: 1450:T SuperString::Result<T, E>::ok() const {
      508: 1451:    return *((T *) this->_ok);
        -: 1452:}
------------------
_ZNK11SuperString6ResultImNS_5ErrorEE2okEv:
function _ZNK11SuperString6ResultImNS_5ErrorEE2okEv called 3 returned 100% blocks executed 100%
        3: 1450:T SuperString::Result<T, E>::ok() const {
        3: 1451:    return *((T *) this->_ok);
        -: 1452:}
------------------
_ZNK11SuperString6ResultINS_4PairImmEENS_5ErrorEE2okEv:
function _ZNK11SuperString6ResultINS_4PairImmEENS_5ErrorEE2okEv called 51 returned 100% blocks executed 100%
       51: 1450:T SuperString::Result<T, E>::ok() const {
       51: 1451:    return *((T *) this->_ok);
        -: 1452:}
------------------
_ZNK11SuperString6ResultIS_NS_5ErrorEE2okEv:
function _ZNK11SuperString6ResultIS_NS_5ErrorEE2okEv called 46 returned 100% blocks executed 100%
       46: 1450:T SuperString::Result<T, E>::ok() const {
       46: 1451:    return *((T *) this->_ok);
call    0 returned 100%
        -: 1452:}
------------------
_ZNK11SuperString6ResultIiNS_5ErrorEE2okEv:
function _ZNK11SuperString6ResultIiNS_5ErrorEE2okEv called 408 returned 100% blocks executed 100%
      408: 1450:T SuperString::Result<T, E>::ok() const {
      408: 1451:    return *((T *) this->_ok);
        -: 1452:}
------------------
        -: 1453:
        -: 1454:template<class T, class E>
function _ZN11SuperString6ResultIiNS_5ErrorEE3errES1_ called 0 returned 0% blocks executed 0%
    #####: 1455:void SuperString::Result<T, E>::err(E err) {
    #####: 1456:    this->~Result();
call    0 never executed
    #####: 1457:    this->_err = new char[sizeof(E)];
call    0 never executed
    #####: 1458:    new(this->_err) E(err);
call    0 never executed
    #####: 1459:}
        -: 1460:
        -: 1461:template<class T, class E>
function _ZN11SuperString6ResultIiNS_5ErrorEE2okEi called 43 returned 100% blocks executed 100%
       43: 1462:void SuperString::Result<T, E>::ok(T ok) {
       43: 1463:    this->~Result();
call    0 returned 100%
       43: 1464:    this->_ok = new char[sizeof(T)];
call    0 returned 100%
       43: 1465:    new(this->_ok) T(ok);
call    0 returned 100%
       43: 1466:}
        -: 1467:
        -: 1468:template<class T, class E>
function _ZN11SuperString6ResultIiNS_5ErrorEEaSERKS2_ called 43 returned 100% blocks executed 78%
       43: 1469:SuperString::Result<T, E> &SuperString::Result<T, E>::operator=(const SuperString::Result<T, E> &other) {
       43: 1470:    if(this != &other) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       43: 1471:        if(other.isOk()) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
       43: 1472:            this->ok(other.ok());
call    0 returned 100%
call    1 returned 100%
        -: 1473:        } else {
    #####: 1474:            this->err(other.err());
call    0 never executed
call    1 never executed
        -: 1475:        }
        -: 1476:    }
       43: 1477:    return *this;
        -: 1478:}
        -: 1479:
        -: 1480://*-- SuperString::SingleLinkedList<E> (internal)
        -: 1481:template<class E>
function _ZN11SuperString16SingleLinkedListIPNS_23ReferenceStringSequenceEEC2Ev called 150 returned 100% blocks executed 100%
      150: 1482:SuperString::SingleLinkedList<E>::SingleLinkedList()
      150: 1483:        : _head(NULL),
      150: 1484:          _tail(NULL) {
        -: 1485:    // nothing go here
      150: 1486:}
        -: 1487:
        -: 1488:template<class E>
function _ZN11SuperString16SingleLinkedListIPNS_23ReferenceStringSequenceEED2Ev called 144 returned 100% blocks executed 100%
      144: 1489:SuperString::SingleLinkedList<E>::~SingleLinkedList() {
      144: 1490:    Node<E> *node = this->_head;
      145: 1491:    while(node != NULL) {
branch  0 taken 1%
branch  1 taken 99% (fallthrough)
        1: 1492:        Node<E> *tmp = node;
        1: 1493:        node = node->_next;
        1: 1494:        delete tmp;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 1495:    }
      144: 1496:    this->_head = NULL;
      144: 1497:    this->_tail = NULL;
      144: 1498:}
        -: 1499:
        -: 1500:template<class E>
        -: 1501:std::size_t SuperString::SingleLinkedList<E>::length() const {
        -: 1502:    std::size_t length = 0;
        -: 1503:    Node<E> *node = this->_head;
        -: 1504:    while(node != NULL) {
        -: 1505:        length++;
        -: 1506:        node = node->_next;
        -: 1507:    }
        -: 1508:    return length;
        -: 1509:}
        -: 1510:
        -: 1511:template<class E>
function _ZN11SuperString16SingleLinkedListIPNS_23ReferenceStringSequenceEE4pushES2_ called 91 returned 100% blocks executed 100%
       91: 1512:void SuperString::SingleLinkedList<E>::push(E value) {
       91: 1513:    Node<E> *node = new Node<E>(value);
call    0 returned 100%
call    1 returned 100%
       91: 1514:    if(this->_tail == NULL) {
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
       67: 1515:        this->_head = node;
       67: 1516:        this->_tail = node;
        -: 1517:    } else {
       24: 1518:        this->_tail->_next = node;
       24: 1519:        this->_tail = node;
        -: 1520:    }
       91: 1521:}
        -: 1522:
        -: 1523:template<class E>
function _ZN11SuperString16SingleLinkedListIPNS_23ReferenceStringSequenceEE6removeES2_ called 90 returned 100% blocks executed 100%
       90: 1524:void SuperString::SingleLinkedList<E>::remove(E value) {
       90: 1525:    Node<E> *prev = NULL;
       90: 1526:    Node<E> *node = this->_head;
      164: 1527:    while(node != NULL) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
      164: 1528:        if(node->_data == value) {
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
       90: 1529:            break;
        -: 1530:        }
       74: 1531:        prev = node;
       74: 1532:        node = node->_next;
        -: 1533:    }
       90: 1534:    if(node != NULL) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       90: 1535:        if(prev == NULL) {
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
       67: 1536:            this->_head = node->_next;
        -: 1537:        } else {
       23: 1538:            prev->_next = node->_next;
        -: 1539:        }
       90: 1540:        if(node->_next == NULL) {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
       79: 1541:            this->_tail = prev;
        -: 1542:        }
       90: 1543:        delete node;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -: 1544:    }
       90: 1545:}
        -: 1546:
        -: 1547://*-- SuperString::SingleLinkedList<E>::Node<Ei> (internal)
        -: 1548:template<class E>
        -: 1549:template<class Ei>
function _ZN11SuperString16SingleLinkedListIPNS_23ReferenceStringSequenceEE4NodeIS2_EC2ES2_ called 91 returned 100% blocks executed 100%
       91: 1550:SuperString::SingleLinkedList<E>::Node<Ei>::Node(E data)
       91: 1551:        : _data(data),
       91: 1552:          _next(NULL) {
        -: 1553:    // nothing go here
       91: 1554:}
        -: 1555:
        -: 1556://*-- SuperString::Pair<T, U>
        -: 1557:template<class T, class U>
        -: 1558:SuperString::Pair<T, U>::Pair() {
        -: 1559:    // nothing go here
        -: 1560:}
        -: 1561:
        -: 1562:template<class T, class U>
      174: 1563:SuperString::Pair<T, U>::Pair(T $0, U $1)
      174: 1564:        : _0($0),
      174: 1565:          _1($1) {
        -: 1566:    // nothing go here
      174: 1567:}
------------------
_ZN11SuperString4PairIPhmEC2ES1_m:
function _ZN11SuperString4PairIPhmEC2ES1_m called 142 returned 100% blocks executed 100%
      142: 1563:SuperString::Pair<T, U>::Pair(T $0, U $1)
      142: 1564:        : _0($0),
      142: 1565:          _1($1) {
        -: 1566:    // nothing go here
      142: 1567:}
------------------
_ZN11SuperString4PairImmEC2Emm:
function _ZN11SuperString4PairImmEC2Emm called 32 returned 100% blocks executed 100%
       32: 1563:SuperString::Pair<T, U>::Pair(T $0, U $1)
       32: 1564:        : _0($0),
       32: 1565:          _1($1) {
        -: 1566:    // nothing go here
       32: 1567:}
------------------
        -: 1568:
        -: 1569:template<class T, class U>
      333: 1570:T SuperString::Pair<T, U>::first() const {
      333: 1571:    return this->_0;
        -: 1572:}
------------------
_ZNK11SuperString4PairIPhmE5firstEv:
function _ZNK11SuperString4PairIPhmE5firstEv called 284 returned 100% blocks executed 100%
      284: 1570:T SuperString::Pair<T, U>::first() const {
      284: 1571:    return this->_0;
        -: 1572:}
------------------
_ZNK11SuperString4PairImmE5firstEv:
function _ZNK11SuperString4PairImmE5firstEv called 49 returned 100% blocks executed 100%
       49: 1570:T SuperString::Pair<T, U>::first() const {
       49: 1571:    return this->_0;
        -: 1572:}
------------------
        -: 1573:
        -: 1574:template<class T, class U>
      174: 1575:U SuperString::Pair<T, U>::second() const {
      174: 1576:    return this->_1;
        -: 1577:}
------------------
_ZNK11SuperString4PairIPhmE6secondEv:
function _ZNK11SuperString4PairIPhmE6secondEv called 142 returned 100% blocks executed 100%
      142: 1575:U SuperString::Pair<T, U>::second() const {
      142: 1576:    return this->_1;
        -: 1577:}
------------------
_ZNK11SuperString4PairImmE6secondEv:
function _ZNK11SuperString4PairImmE6secondEv called 32 returned 100% blocks executed 100%
       32: 1575:U SuperString::Pair<T, U>::second() const {
       32: 1576:    return this->_1;
        -: 1577:}
------------------
        -: 1578:
        -: 1579:template<class T, class U>
        -: 1580:void SuperString::Pair<T, U>::first(T $0) {
        -: 1581:    this->_0 = $0;
        -: 1582:}
        -: 1583:
        -: 1584:template<class T, class U>
        -: 1585:void SuperString::Pair<T, U>::second(U $1) {
        -: 1586:    this->_1 = $1;
        -: 1587:}
        -: 1588:
        -: 1589://*-- SuperString (statics)
function _ZN11SuperString12isWhiteSpaceEi called 100 returned 100% blocks executed 92%
      100: 1590:bool SuperString::isWhiteSpace(int codeUnit) {
      100: 1591:    if(codeUnit <= 32) {
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -: 1592:        return (
       46: 1593:                (codeUnit == 32) || // Space.
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2: 1594:                ((codeUnit <= 13) && (codeUnit >= 9)) // CR, LF, TAB, etc.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       44: 1595:        );
        -: 1596:    }
      56*: 1597:    return (codeUnit == 0x85) || (codeUnit == 0xA0); // NEL, NBSP.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1598:}
        -: 1599:
        -: 1600:
        -: 1601:#endif // BOUTGLAY_SUPERSTRING_HEADER
