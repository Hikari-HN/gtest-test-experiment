        -:    0:Source:test_helper.cpp
        -:    0:Graph:test.gcno
        -:    0:Data:test.gcda
        -:    0:Runs:1
        -:    1:#include "include/SuperString.hh"
        -:    2:
function _ZNK11SuperString15isSequenceEmptyEv called 1 returned 100% blocks executed 100%
        1:    3:bool SuperString::isSequenceEmpty() const
        -:    4:{
        1:    5:    return this->_sequence->isEmpty();
call    0 returned 100%
        -:    6:}
        -:    7:
function _ZNK11SuperString18isSequenceNotEmptyEv called 1 returned 100% blocks executed 100%
        1:    8:bool SuperString::isSequenceNotEmpty() const
        -:    9:{
        1:   10:    return this->_sequence->isNotEmpty();
call    0 returned 100%
        -:   11:}
        -:   12:
function _ZNK11SuperString20testrefRelease_case0Ev called 1 returned 100% blocks executed 100%
        1:   13:bool SuperString::testrefRelease_case0() const
        -:   14:{
        1:   15:    return this->_sequence->refRelease() == 0;
call    0 returned 100%
        -:   16:}
        -:   17:
function _ZNK11SuperString23testfreeingCost_notnullEv called 1 returned 100% blocks executed 69%
        1:   18:bool SuperString::testfreeingCost_notnull() const
        -:   19:{
        1:   20:    SuperString s1 = SuperString::Const("aaa");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   21:    SubstringSequence *ss1 = new SubstringSequence(s1._sequence, 1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:   22:    this->_sequence->addReferencer(ss1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   23:    this->_sequence->reconstructReferencers();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   24:    return true;
        1:   25:}
call    0 returned 100%
call    1 never executed
        -:   26:
function _ZNK11SuperString24testbad_substringMatchesEv called 1 returned 100% blocks executed 64%
        1:   27:bool SuperString::testbad_substringMatches() const
        -:   28:{
        1:   29:    SuperString s1 = SuperString::Const("aaa");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:   30:    return this->_sequence->_substringMatches(1, s1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:   31:}
call    0 returned 100%
call    1 never executed
        -:   32:
function _ZNK11SuperString21testCopyASCIISequenceEv called 1 returned 100% blocks executed 78%
        1:   33:bool SuperString::testCopyASCIISequence() const
        -:   34:{
        1:   35:    SuperString::Byte b[4] = "aaa";
        1:   36:    auto s1 = new SuperString::ConstASCIISequence(b);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:   37:    auto s2 = SuperString::CopyASCIISequence(s1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   38:    return true;
        1:   39:}
call    0 returned 100%
        -:   40:
function _ZNK11SuperString20testCopyUTF8SequenceEv called 1 returned 100% blocks executed 78%
        1:   41:bool SuperString::testCopyUTF8Sequence() const
        -:   42:{
        1:   43:    SuperString::Byte b[4] = "aaa";
        1:   44:    auto s1 = new SuperString::ConstUTF8Sequence(b);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:   45:    auto s2 = SuperString::CopyUTF8Sequence(s1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   46:    return true;
        1:   47:}
call    0 returned 100%
        -:   48:
function _ZNK11SuperString18testUTF16BE_simpleEv called 1 returned 100% blocks executed 85%
        1:   49:bool SuperString::testUTF16BE_simple() const
        -:   50:{
        1:   51:    SuperString::Byte b[11] = {0xD8, 0xD8, 0xD8, 0xD8};
        1:   52:    SuperString s1 = SuperString::Const(b, SuperString::Encoding::UTF16BE);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   53:    s1.length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   54:    s1.codeUnitAt(0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:   55:    s1.codeUnitAt(1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:   56:    s1.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   57:    return true;
        1:   58:}
call    0 returned 100%
call    1 never executed
        -:   59:
function _ZNK11SuperString23testCopyUTF16BESequenceEv called 1 returned 100% blocks executed 78%
        1:   60:bool SuperString::testCopyUTF16BESequence() const
        -:   61:{
        1:   62:    SuperString::Byte b[4] = "aaa";
        1:   63:    auto s1 = new SuperString::ConstUTF16BESequence(b);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:   64:    auto s2 = SuperString::CopyUTF16BESequence(s1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   65:    return true;
        1:   66:}
call    0 returned 100%
        -:   67:
function _ZNK11SuperString16testUTF32_simpleEv called 1 returned 100% blocks executed 80%
        1:   68:bool SuperString::testUTF32_simple() const
        -:   69:{
        1:   70:    SuperString::Byte b[11] = {0x00, 0x00, 0x10, 0x00};
        1:   71:    SuperString s1 = SuperString::Const(b, SuperString::Encoding::UTF32);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   72:    s1.length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   73:    s1.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   74:    s1.length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   75:    return true;
        1:   76:}
call    0 returned 100%
call    1 never executed
        -:   77:
function _ZNK11SuperString21testCopyUTF32SequenceEv called 1 returned 100% blocks executed 78%
        1:   78:bool SuperString::testCopyUTF32Sequence() const
        -:   79:{
        1:   80:    SuperString::Byte b[4] = "aaa";
        1:   81:    auto s1 = new SuperString::ConstUTF32Sequence(b);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:   82:    auto s2 = SuperString::CopyUTF32Sequence(s1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   83:    return true;
        1:   84:}
call    0 returned 100%
        -:   85:
function _ZNK11SuperString25testSubstringSequence_refEv called 1 returned 100% blocks executed 78%
        1:   86:bool SuperString::testSubstringSequence_ref() const
        -:   87:{
        1:   88:    auto *s1 = new SubstringSequence(this->_sequence, 0, 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:   89:    SubstringSequence ss1 = SubstringSequence(s1, 0, 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   90:    return true;
        1:   91:}
call    0 returned 100%
        -:   92:
function _ZNK11SuperString28testSubstringSequence_substrEv called 1 returned 100% blocks executed 84%
        1:   93:bool SuperString::testSubstringSequence_substr() const
        -:   94:{
        1:   95:    SubstringSequence ss1 = SubstringSequence(this->_sequence, 0, 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   96:    SubstringSequence ss2 = SubstringSequence(this->_sequence, 1, 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   97:    SubstringSequence ss3 = SubstringSequence(this->_sequence, 0, 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   98:    SubstringSequence ss4 = SubstringSequence(this->_sequence, 0, 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:   99:    ss2.reconstructionCost(NULL);
call    0 returned 100%
        1:  100:    ss2.reconstruct(NULL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  101:    ss2.length();
call    0 returned 100%
        1:  102:    ss2.codeUnitAt(0).ok();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  103:    ss2.codeUnitAt(5).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  104:    ss1.substring(1, 2).isOk();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  105:    ss3.substring(-1, 2).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  106:    ss4.substring(1, 5).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  107:    ss1.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  108:    ss2.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  109:    ss1.print(std::cout, 1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  110:    ss2.print(std::cout, 1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  111:    ss2.keepingCost();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  112:    ss2.substring(-1, 2).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  113:    ss2.substring(1, 5).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  114:    ss2.substring(1, 2).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  115:    return true;
        1:  116:}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
        -:  117:
function _ZNK11SuperString26testSubstringSequence_trimEv called 1 returned 100% blocks executed 56%
        1:  118:bool SuperString::testSubstringSequence_trim() const
        -:  119:{
        1:  120:    SubstringSequence ss = SubstringSequence(this->_sequence, 0, 5);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  121:    ss.trim().isNotEmpty();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  122:    ss.trimLeft().isNotEmpty();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  123:    ss.trimRight().isNotEmpty();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        1:  124:    return true;
        1:  125:}
call    0 returned 100%
call    1 never executed
        -:  126:
function _ZNK11SuperString32testConcatenationSequence_simpleEv called 1 returned 100% blocks executed 82%
        1:  127:bool SuperString::testConcatenationSequence_simple() const
        -:  128:{
        1:  129:    SuperString s1 = SuperString::Const(" bbb ");
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  130:    auto *cs1 = new ConcatenationSequence(this->_sequence, s1._sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:  131:    auto *cs2 = new ConcatenationSequence(this->_sequence, s1._sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:  132:    auto *cs3 = new ConcatenationSequence(this->_sequence, s1._sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:  133:    auto *cs4 = new ConcatenationSequence(this->_sequence, s1._sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:  134:    auto *cs5 = new ConcatenationSequence(this->_sequence, s1._sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:  135:    auto *cs6 = new ConcatenationSequence(this->_sequence, s1._sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:  136:    ConcatenationSequence cs_l = ConcatenationSequence(cs1, this->_sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  137:    ConcatenationSequence cs_r = ConcatenationSequence(this->_sequence, cs2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  138:    ConcatenationSequence cs_lcstr = ConcatenationSequence(this->_sequence, cs3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  139:    ConcatenationSequence cs_rcstr = ConcatenationSequence(cs4, this->_sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  140:    ConcatenationSequence cs_lcstr_r = ConcatenationSequence(this->_sequence, cs5);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  141:    ConcatenationSequence cs_rcstr_l = ConcatenationSequence(cs6, this->_sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  142:    cs_lcstr.reconstruct(this->_sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  143:    cs_rcstr.reconstruct(this->_sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  144:    cs_lcstr_r.reconstruct(this->_sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  145:    cs_rcstr_l.reconstruct(this->_sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  146:    cs_lcstr_r.reconstruct(cs5);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  147:    cs_rcstr_l.reconstruct(cs6);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  148:    cs_lcstr.length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  149:    cs_rcstr.length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  150:    cs_lcstr_r.length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  151:    cs_rcstr_l.length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  152:    cs_l.codeUnitAt(0).isOk();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  153:    cs_l.codeUnitAt(14).isOk();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  154:    cs_l.codeUnitAt(20).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  155:    cs_lcstr.codeUnitAt(0).isOk();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  156:    cs_lcstr.codeUnitAt(14).isOk();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  157:    cs_lcstr.codeUnitAt(20).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  158:    cs_rcstr.codeUnitAt(0).isOk();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  159:    cs_rcstr.codeUnitAt(14).isOk();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  160:    cs_rcstr.codeUnitAt(20).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  161:    cs_rcstr_l.codeUnitAt(0).isOk();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  162:    cs_rcstr_l.codeUnitAt(20).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  163:    cs_l.substring(1, 2).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  164:    cs_l.substring(-1, 2).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  165:    cs_l.substring(1, 20).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  166:    cs_l.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  167:    cs_l.print(std::cout, 1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  168:    cs_l.print(std::cout, 1, 20);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  169:    cs_l.print(std::cout, -1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  170:    cs_l.print(std::cout, -1, 10);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  171:    cs_lcstr.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  172:    cs_lcstr.print(std::cout, 1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  173:    cs_lcstr.print(std::cout, 1, 20);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  174:    cs_lcstr.print(std::cout, -1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  175:    cs_lcstr.print(std::cout, -1, 10);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  176:    cs_rcstr.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  177:    cs_rcstr.print(std::cout, 1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  178:    cs_rcstr.print(std::cout, 1, 20);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  179:    cs_rcstr.print(std::cout, -1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  180:    cs_rcstr.print(std::cout, -1, 10);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  181:    cs_lcstr_r.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  182:    cs_lcstr_r.print(std::cout, 1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  183:    cs_l.trim();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:  184:    cs_l.trimLeft();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:  185:    cs_l.trimRight();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:  186:    cs_lcstr.keepingCost();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  187:    cs_rcstr.keepingCost();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  188:    cs_lcstr_r.keepingCost();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  189:    cs_l.reconstructionCost(cs1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  190:    cs_l.reconstructionCost(this->_sequence);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  191:    cs_l.reconstructionCost(NULL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  192:    cs_lcstr.reconstructionCost(cs3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  193:    cs_lcstr.reconstructionCost(NULL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  194:    cs_rcstr.reconstructionCost(cs4);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  195:    cs_rcstr.reconstructionCost(NULL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  196:    cs_lcstr_r.reconstructionCost(NULL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  197:    return true;
        1:  198:}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
call    6 returned 100%
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
        -:  199:
function _ZNK11SuperString27testMultipleSequence_simpleEv called 1 returned 100% blocks executed 85%
        1:  200:bool SuperString::testMultipleSequence_simple() const
        -:  201:{
        1:  202:    auto *ms1ptr = new MultipleSequence(this->_sequence, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:  203:    auto *ms2ptr = new MultipleSequence(this->_sequence, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 never executed
        1:  204:    MultipleSequence ms1 = MultipleSequence(ms1ptr, 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  205:    MultipleSequence ms2 = MultipleSequence(ms2ptr, 3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  206:    ms2.reconstruct(ms2ptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  207:    ms2.length();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  208:    ms2.codeUnitAt(31).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  209:    ms2.codeUnitAt(4).isOk();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  210:    ms1.substring(1, 2).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  211:    ms1.substring(-1, 2).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  212:    ms1.substring(1, 40).isErr();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 returned 100%
        1:  213:    ms1.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  214:    ms1.print(std::cout, 1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  215:    ms1.print(std::cout, 1, 14);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  216:    ms1.print(std::cout, -1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  217:    ms2.print(std::cout);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  218:    ms2.print(std::cout, -1, 2);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  219:    ms2.print(std::cout, -1, 40);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  220:    ms2.print(std::cout, -1, 24);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  221:    ms1.trim();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:  222:    ms1.trimLeft();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:  223:    ms1.trimRight();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
        1:  224:    ms2.keepingCost();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  225:    ms1.reconstructionCost(ms1ptr);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  226:    ms2.reconstructionCost(NULL);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        1:  227:    return true;
        1:  228:}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
call    3 never executed
